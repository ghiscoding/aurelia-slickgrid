"use strict";(self.webpackChunkau_slickgrid_demo=self.webpackChunkau_slickgrid_demo||[]).push([[789],{5725:(e,t,i)=>{i.d(t,{A:()=>s});var n=i(7526),a=i.n(n),l=i(8967),r=i.n(l)()(a());r.push([e.id,"#grid21 .slick-header-column:last-child .slick-header-menu-button,#grid21 .slick-header-column:last-child .slick-resizable-handle,#grid21 .slick-header-column:last-child .slick-sort-indicator,#grid21 .slick-header-column:last-child .slick-sort-indicator-numbered{margin-right:18px}",""]);const s=r},4789:(e,t,i)=>{i.r(t),i.d(t,{Example21:()=>x});var n={};i.r(n),i.d(n,{bindables:()=>c,default:()=>o,dependencies:()=>d,name:()=>r,register:()=>u,template:()=>s});var a=i(109),l=i(5725);const r="example21",s='<h2>\n  ${title}\n  <span class="float-end">\n    <a style="font-size: 18px"\n        target="_blank"\n        href="https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example21.ts">\n      <span class="mdi mdi-link-variant"></span> code\n    </a>\n  </span>\n</h2>\n<div class="subtitle"\n      innerhtml.bind="subTitle"></div>\n\n<div class="row row-cols-lg-auto g-1 align-items-center">\n  <div class="col">\n    <label for="columnSelect">Single Search:</label>\n  </div>\n  <div class="col">\n    <select class="form-select" class="form-select" data-test="search-column-list" name="selectedColumn"\n            value.bind="selectedColumn" id="columnSelect">\n      <option repeat.for="column of columnDefinitions"\n              model.bind="column">\n        ${column.name}\n      </option>\n    </select>\n  </div>\n  <div class="col">\n    <select value.bind="selectedOperator"\n            class="form-select"\n            data-test="search-operator-list">\n      <option repeat.for="operator of operatorList"\n              model.bind="operator">\n        ${operator}\n      </option>\n    </select>\n  </div>\n\n  <div class="col">\n    <div class="input-group">\n      <input type="text"\n              class="form-control"\n              placeholder="search value"\n              data-test="search-value-input"\n              value.bind="searchValue" />\n      <button class="btn btn-outline-secondary d-flex align-items-center pl-2 pr-2" data-test="clear-search-value"\n              click.trigger="clearGridSearchInput()">\n        <span class="mdi mdi-close"></span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<hr />\n\n<aurelia-slickgrid grid-id="grid21"\n                    column-definitions.bind="columnDefinitions"\n                    grid-options.bind="gridOptions"\n                    dataset.bind="dataset"\n                    instances.bind="aureliaGrid">\n</aurelia-slickgrid>\n',o=s,d=[],c=[];let h;function u(e){h||(h=a.K94.define({name:r,template:s,dependencies:d,bindables:c})),e.register(h)}var m=i(550),p=i(3957),g=i.n(p),f=i(1794),b=i.n(f),v=i(8866),k=i.n(v),w=i(621),y=i.n(w),C=i(3897),S=i.n(C),O=i(5462),D=i.n(O),M={};M.styleTagTransform=D(),M.setAttributes=y(),M.insert=k().bind(null,"head"),M.domAPI=b(),M.insertStyleElement=S(),g()(l.A,M),l.A&&l.A.locals&&l.A.locals,i(8635);class x{selectedColumn;selectedOperator;searchValue="";title="Example 21: Grid AutoHeight";subTitle='\n  The SlickGrid option "autoHeight" can be used if you wish to keep the full height of the grid without any scrolling\n  <ul>\n    <li>You define a fixed grid width via "gridWidth" in the View</li>\n    <li>You can still use the "autoResize" for the width to be resized automatically (the height will never change in this case)</li>\n    <li>This dataset has 25 rows, if you scroll down the page you can see the entire set is shown without any grid scrolling (though you might have browser scrolling)</li>\n  </ul>\n  ';aureliaGrid;columnDefinitions=[];gridOptions;dataset=[];operatorList=["=","<","<=",">",">=","<>","StartsWith","EndsWith"];constructor(){this.defineGrid()}attached(){this.getData()}defineGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",width:100,sortable:!0,type:m.PUO.string},{id:"duration",name:"Duration (days)",field:"duration",width:100,sortable:!0,type:m.PUO.number},{id:"complete",name:"% Complete",field:"percentComplete",width:100,sortable:!0,formatter:m._tQ.percentCompleteBar,type:m.PUO.number},{id:"start",name:"Start",field:"start",width:100,sortable:!0,formatter:m._tQ.dateIso,type:m.PUO.date},{id:"finish",name:"Finish",field:"finish",width:100,sortable:!0,formatter:m._tQ.dateIso,type:m.PUO.date},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",width:100,sortable:!0,formatter:m._tQ.checkmarkMaterial,type:m.PUO.number}],this.gridOptions={autoHeight:!0,autoResize:{container:"#demo-container",rightPadding:10},enableFiltering:!0,showHeaderRow:!1,alwaysShowVerticalScroll:!1,enableColumnPicker:!0,enableCellNavigation:!0,enableRowSelection:!0}}getData(){const e=[];for(let t=0;t<25;t++){const i=2e3+Math.floor(10*Math.random()),n=Math.floor(11*Math.random()),a=Math.floor(29*Math.random()),l=Math.round(100*Math.random());e[t]={id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:l,percentCompleteNumber:l,start:new Date(i,n,a),finish:new Date(i,n+1,a),effortDriven:t%5==0}}this.dataset=e}clearGridSearchInput(){this.searchValue="",this.updateFilter()}selectedOperatorChanged(){this.updateFilter()}selectedColumnChanged(){this.updateFilter()}searchValueChanged(){this.updateFilter()}updateFilter(){this.aureliaGrid?.filterService.updateSingleFilter({columnId:`${this.selectedColumn.id||""}`,operator:this.selectedOperator,searchTerms:[this.searchValue||""]})}}a.K94.define({...n,bindables:[...c,"selectedColumn","selectedOperator","searchValue"]},x)}}]);