{"version":3,"file":"example40-DgLLiXNy.js","sources":["../../src/examples/slickgrid/example40.$au.ts","../../src/examples/slickgrid/example40.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example40\";\nexport const template = \"<div class=\\\"demo40\\\">\\n  <h2>\\n    Example 40: Infinite Scroll from JSON data\\n    <span class=\\\"float-end\\\">\\n      <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example40.ts\\\">\\n        <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n      </a>\\n    </span>\\n    <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n  </h2>\\n\\n  <div class=\\\"subtitle\\\">\\n    <ul>\\n      <li>\\n        Infinite scrolling allows the grid to lazy-load rows from the server when reaching the scroll bottom (end) position.\\n        In its simplest form, the more the user scrolls down, the more rows get loaded.\\n      </li>\\n      <li>NOTES: <code>presets.pagination</code> is not supported with Infinite Scroll and will revert to the first page,\\n          simply because since we keep appending data, we always have to start from index zero (no offset).\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-filters-sorting\\\"\\n              click.trigger=\\\"clearAllFiltersAndSorts()\\\" title=\\\"Clear all Filters & Sorts\\\">\\n        <span class=\\\"mdi mdi-close\\\"></span>\\n        <span>Clear all Filter & Sorts</span>\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-filter\\\" click.trigger=\\\"setFiltersDynamically()\\\">\\n        Set Filters Dynamically\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"set-dynamic-sorting\\\" click.trigger=\\\"setSortingDynamically()\\\">\\n        Set Sorting Dynamically\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"group-by-duration\\\" click.trigger=\\\"groupByDuration()\\\">\\n        Group by Duration\\n      </button>\\n\\n      <label class=\\\"ml-4\\\">Reset Dataset <code>onSort</code>:</label>\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"onsort-on\\\" click.trigger=\\\"onSortReset(true)\\\">\\n        ON\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm\\\" data-test=\\\"onsort-off\\\" click.trigger=\\\"onSortReset(false)\\\">\\n        OFF\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div show.bind=\\\"metrics\\\" class=\\\"mt-2\\\" style=\\\"margin: 10px 0px\\\">\\n    <b>Metrics:</b>\\n    <span>\\n    <span>${metrics.endTime | dateFormat: 'DD MMM, h:mm:ss a'}</span> â€”\\n      <span data-test=\\\"totalItemCount\\\">${metrics.totalItemCount}</span>\\n      items\\n    </span>\\n  </div>\\n\\n  <aurelia-slickgrid\\n    grid-id=\\\"grid40\\\"\\n    column-definitions.bind=\\\"columnDefinitions\\\"\\n    grid-options.bind=\\\"gridOptions\\\"\\n    dataset.bind=\\\"dataset\\\"\\n    instances.bind=\\\"aureliaGrid\\\"\\n    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n    on-row-count-changed.trigger=\\\"refreshMetrics($event.detail.args)\\\"\\n    on-sort.trigger=\\\"handleOnSort()\\\"\\n    on-scroll.trigger=\\\"handleOnScroll($event.detail.args)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import {\n  type AureliaGridInstance,\n  Aggregators,\n  type Column,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type Grouping,\n  type Metrics,\n  type OnRowCountChangedEventArgs,\n  SortComparers,\n  SortDirectionNumber,\n} from 'aurelia-slickgrid';\n\nconst FETCH_SIZE = 50;\n\nexport class Example40 {\n  aureliaGrid: AureliaGridInstance;\n  columnDefinitions!: Column[];\n  dataset: any[] = [];\n  gridOptions!: GridOption;\n  metrics!: Partial<Metrics>;\n  hideSubTitle = false;\n  shouldResetOnSort = false;\n\n  constructor() {\n    this.defineGrid();\n    this.dataset = this.loadData(0, FETCH_SIZE);\n    this.metrics = {\n      itemCount: FETCH_SIZE,\n      totalItemCount: FETCH_SIZE,\n    };\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, minWidth: 100, filterable: true },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, minWidth: 100, filterable: true, type: FieldType.number },\n      { id: 'percentComplete', name: '% Complete', field: 'percentComplete', sortable: true, minWidth: 100, filterable: true, type: FieldType.number },\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate } },\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate } },\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', sortable: true, minWidth: 100, filterable: true, formatter: Formatters.checkmarkMaterial }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableAutoResize: true,\n      enableFiltering: true,\n      enableGrouping: true,\n      editable: false,\n      rowHeight: 33,\n    };\n  }\n\n  // add onScroll listener which will detect when we reach the scroll end\n  // if so, then append items to the dataset\n  handleOnScroll(args: any) {\n    const viewportElm = args.grid.getViewportNode();\n    if (\n      ['mousewheel', 'scroll'].includes(args.triggeredBy || '')\n      && viewportElm.scrollTop > 0\n      && Math.ceil(viewportElm.offsetHeight + args.scrollTop) >= args.scrollHeight\n    ) {\n      console.log('onScroll end reached, add more items');\n      const startIdx = this.aureliaGrid.dataView?.getItemCount() || 0;\n      const newItems = this.loadData(startIdx, FETCH_SIZE);\n      this.aureliaGrid.dataView?.addItems(newItems);\n    }\n  }\n\n  // do we want to reset the dataset when Sorting?\n  // if answering Yes then use the code below\n  handleOnSort() {\n    if (this.shouldResetOnSort) {\n      const newData = this.loadData(0, FETCH_SIZE);\n      this.aureliaGrid.slickGrid?.scrollTo(0); // scroll back to top to avoid unwanted onScroll end triggered\n      this.aureliaGrid.dataView?.setItems(newData);\n      this.aureliaGrid.dataView?.reSort();\n    }\n  }\n\n  groupByDuration() {\n    this.aureliaGrid?.dataView?.setGrouping({\n      getter: 'duration',\n      formatter: (g) => `Duration: ${g.value} <span class=\"text-green\">(${g.count} items)</span>`,\n      comparer: (a, b) => SortComparers.numeric(a.value, b.value, SortDirectionNumber.asc),\n      aggregators: [\n        new Aggregators.Avg('percentComplete'),\n        new Aggregators.Sum('cost')\n      ],\n      aggregateCollapsed: false,\n      lazyTotalsCalculation: true\n    } as Grouping);\n\n    // you need to manually add the sort icon(s) in UI\n    this.aureliaGrid?.slickGrid?.setSortColumns([{ columnId: 'duration', sortAsc: true }]);\n    this.aureliaGrid?.slickGrid?.invalidate(); // invalidate all rows and re-render\n  }\n\n  loadData(startIdx: number, count: number) {\n    const tmpData: any[] = [];\n    for (let i = startIdx; i < startIdx + count; i++) {\n      tmpData.push(this.newItem(i));\n    }\n\n    return tmpData;\n  }\n\n  newItem(idx: number) {\n    const randomYear = 2000 + Math.floor(Math.random() * 10);\n    const randomMonth = Math.floor(Math.random() * 11);\n    const randomDay = Math.floor((Math.random() * 29));\n    const randomPercent = Math.round(Math.random() * 100);\n\n    return {\n      id: idx,\n      title: 'Task ' + idx,\n      duration: Math.round(Math.random() * 100) + '',\n      percentComplete: randomPercent,\n      start: new Date(randomYear, randomMonth + 1, randomDay),\n      finish: new Date(randomYear + 1, randomMonth + 1, randomDay),\n      effortDriven: (idx % 5 === 0)\n    };\n  }\n\n  onSortReset(shouldReset: boolean) {\n    this.shouldResetOnSort = shouldReset;\n  }\n\n  clearAllFiltersAndSorts() {\n    if (this.aureliaGrid?.gridService) {\n      this.aureliaGrid.gridService.clearAllFiltersAndSorts();\n    }\n  }\n\n  setFiltersDynamically() {\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\n    this.aureliaGrid?.filterService.updateFilters([\n      { columnId: 'percentComplete', searchTerms: ['50'], operator: '>=' },\n    ]);\n  }\n\n  refreshMetrics(args: OnRowCountChangedEventArgs) {\n    if (this.aureliaGrid && args?.current >= 0) {\n      this.metrics.itemCount = this.aureliaGrid.dataView?.getFilteredItemCount() || 0;\n      this.metrics.totalItemCount = args.itemCount || 0;\n    }\n  }\n\n  setSortingDynamically() {\n    this.aureliaGrid?.sortService.updateSorting([\n      { columnId: 'title', direction: 'DESC' },\n    ]);\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example40_decorators","_init","FETCH_SIZE","customElement","__au2ViewDef","Example40","__publicField","aureliaGrid","FieldType","Formatters","Filters","args","viewportElm","startIdx","_a","newItems","_b","newData","_c","g","a","b","SortComparers","SortDirectionNumber","Aggregators","_d","_f","count","tmpData","i","idx","randomYear","randomMonth","randomDay","randomPercent","shouldReset","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}