{"version":3,"file":"example26-DuMfqDKd.js","sources":["../../src/examples/slickgrid/example26.$au.ts","../../src/examples/slickgrid/custom-aureliaViewModelEditor.ts","../../src/examples/slickgrid/custom-aureliaViewModelFilter.ts","../../src/examples/slickgrid/example26.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example26\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example26.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n  >\\n    <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n  </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <label>autoEdit setting</label>\\n    <br />\\n    <span id=\\\"radioAutoEdit\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n          <label class=\\\"radio-inline control-label\\\" for=\\\"radioTrue\\\">\\n            <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" id=\\\"radioTrue\\\" checked value.bind=\\\"isAutoEdit\\\"\\n                    click.trigger=\\\"setAutoEdit(true)\\\"> ON\\n            (single-click)\\n          </label>\\n          <label class=\\\"radio-inline control-label\\\" for=\\\"radioFalse\\\">\\n            <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" id=\\\"radioFalse\\\" value.bind=\\\"isAutoEdit\\\"\\n                    click.trigger=\\\"setAutoEdit(false)\\\"> OFF\\n            (double-click)\\n          </label>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n          <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"undo()\\\">\\n            <i class=\\\"mdi mdi-undo\\\"></i>\\n            Undo last edit(s)\\n          </button>\\n          <label class=\\\"checkbox-inline control-label\\\" for=\\\"autoCommitEdit\\\">\\n            <input type=\\\"checkbox\\\" id=\\\"autoCommitEdit\\\" data-test=\\\"auto-edit-checkbox\\\" value.bind=\\\"gridOptions.autoCommitEdit\\\"\\n                    click.trigger=\\\"changeAutoCommit()\\\">\\n            Auto Commit Edit\\n          </label>\\n        </div>\\n      </div>\\n    </span>\\n    <div class=\\\"row\\\" style=\\\"margin-top: 5px\\\">\\n      <div class=\\\"col\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-filters\\\" click.trigger=\\\"aureliaGrid.filterService.clearFilters()\\\">Clear\\n          Filters</button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-sorting\\\" click.trigger=\\\"aureliaGrid.sortService.clearSorting()\\\">Clear\\n          Sorting</button>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"col-sm-6\\\">\\n    <div class=\\\"alert alert-info\\\" show.bind=\\\"updatedObject\\\">\\n      <strong>Updated Item:</strong> ${updatedObject | stringify}\\n    </div>\\n    <div class=\\\"alert alert-warning\\\" show.bind=\\\"alertWarning\\\">\\n      ${alertWarning}\\n    </div>\\n  </div>\\n</div>\\n\\n<div id=\\\"grid-container\\\" class=\\\"col-sm-12\\\">\\n  <aurelia-slickgrid grid-id=\\\"grid26\\\"\\n                      column-definitions.bind=\\\"columnDefinitions\\\"\\n                      grid-options.bind=\\\"gridOptions\\\"\\n                      dataset.bind=\\\"dataset\\\"\\n                      instances.bind=\\\"aureliaGrid\\\"\\n                      on-cell-change.trigger=\\\"onCellChanged($event.detail.eventData, $event.detail.args)\\\"\\n                      on-click.trigger=\\\"onCellClicked($event.detail.eventData, $event.detail.args)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import type { IBindingContext } from '@aurelia/runtime';\nimport type { ICustomElementController } from '@aurelia/runtime-html';\n\nimport {\n  AureliaUtilService,\n  type Column,\n  type Editor,\n  type EditorValidator,\n  type EditorValidationResult,\n  type GridOption,\n  type SlickGrid,\n  type ViewModelBindableInputData,\n} from 'aurelia-slickgrid';\n\n/*\n * An example of a 'detaching' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class CustomAureliaViewModelEditor implements Editor {\n  /** Aurelia ViewModel Reference */\n  aureliaViewModel: any;\n\n  /** default item Id */\n  defaultId?: string;\n\n  /** default item object */\n  defaultItem: any;\n\n  selectedItem: any;\n\n  /** SlickGrid grid object */\n  grid: SlickGrid;\n  vm?: { controller?: ICustomElementController } | null;\n  elmBindingContext?: IBindingContext;\n\n  constructor(private args: any) {\n    this.grid = args && args.grid;\n    this.init();\n  }\n\n  /** Aurelia Util Service (could be inside the Grid Options Params or the Editor Params ) */\n  get aureliaUtilService(): AureliaUtilService {\n    let aureliaUtilService = this.gridOptions?.params?.aureliaUtilService;\n    if (!aureliaUtilService || !(aureliaUtilService instanceof AureliaUtilService)) {\n      aureliaUtilService = this.columnEditor?.params?.aureliaUtilService;\n    }\n    return aureliaUtilService;\n  }\n\n  /** Get the Collection */\n  get collection(): any[] {\n    return this.columnDef?.editor?.collection ?? [];\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args?.column ?? {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): any {\n    return this.columnDef?.editor ?? {};\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  get gridOptions(): GridOption {\n    return (this.grid?.getOptions() ?? {}) as GridOption;\n  }\n\n  get hasAutoCommitEdit() {\n    return this.args.grid.getOptions().autoCommitEdit;\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator {\n    return this.columnEditor.validator || this.columnDef.validator;\n  }\n\n  async init() {\n    if (!this.columnEditor?.params?.viewModel) {\n      throw new Error(`[Aurelia-Slickgrid] For the Editors.aureliaComponent to work properly, you need to fill in the \"templateUrl\" property of your Custom Element Editor.\n      Example: this.columnDefs = [{ id: 'title', field: 'title', editor: { model: CustomEditor, collection: [...], param: { viewModel: MyVM } },`);\n    }\n    if (this.columnEditor?.params?.viewModel) {\n      const bindableData = {\n        grid: this.grid,\n        model: {\n          collection: this.collection,\n        },\n      } as ViewModelBindableInputData;\n      const viewModel = this.columnEditor.params.viewModel;\n      this.vm = await this.aureliaUtilService.createAureliaViewModelAddToSlot(viewModel, bindableData, this.args.container);\n      this.elmBindingContext = this.vm?.controller?.children?.[0].scope.bindingContext;\n    }\n  }\n\n  save() {\n    const validation = this.validate();\n    if (validation && validation.valid) {\n      if (this.hasAutoCommitEdit) {\n        this.args.grid.getEditorLock().commitCurrentEdit();\n      } else {\n        this.args.commitChanges();\n      }\n    }\n  }\n\n  cancel() {\n    if (this.elmBindingContext) {\n      this.elmBindingContext.selectedItem = this.defaultItem;\n    }\n    if (this.args?.cancelChanges) {\n      this.args.cancelChanges();\n    }\n  }\n\n  /** destroy the Aurelia ViewModel & Subscription */\n  destroy() {\n    this.vm?.controller?.deactivate(this.vm.controller, null);\n  }\n\n  /** optional, implement a hide method on your Aurelia ViewModel */\n  hide() {\n    this.elmBindingContext?.hide();\n  }\n\n  /** optional, implement a show method on your Aurelia ViewModel */\n  show() {\n    this.elmBindingContext?.focus();\n  }\n\n  /** optional, implement a focus method on your Aurelia ViewModel */\n  focus() {\n    this.elmBindingContext?.focus();\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.columnDef.field] = state;\n  }\n\n  getValue() {\n    return this.elmBindingContext?.selectedItem.id;\n  }\n\n  loadValue(item: any) {\n    const itemObject = item?.[this.columnDef.field];\n    this.selectedItem = itemObject;\n    this.defaultItem = itemObject;\n\n    // add a delay so that the editor has time to be enhanced (created) prior to changing the value\n    window.setTimeout(() => {\n      this.focus();\n      if (this.elmBindingContext) {\n        this.elmBindingContext.selectedItem = itemObject;\n\n        // whenever the selected item changed (from the @bindable() selectedItem), we'll save the new value\n        this.elmBindingContext.selectedItemChanged = ((newItem: any) => {\n          this.selectedItem = newItem;\n          if (newItem !== itemObject) {\n            this.save();\n          }\n        });\n      }\n    }, 0);\n  }\n\n  serializeValue(): any {\n    return this.selectedItem;\n  }\n\n  isValueChanged() {\n    return (!(this.selectedItem.id === '' && (this.defaultId === null || this.defaultId === undefined))) && (this.selectedItem.id !== this.defaultId);\n  }\n\n  validate(): EditorValidationResult {\n    if (this.validator) {\n      const value = this.selectedItem.id;\n      return this.validator(value, this.args);\n    }\n\n    // by default the editor is always valid\n    // if user want it to be required, he would have to provide his own validator\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n","import type { IBindingContext } from '@aurelia/runtime';\nimport type { ICustomElementController } from '@aurelia/runtime-html';\n\nimport {\n  AureliaUtilService,\n  type Column,\n  type ColumnFilter,\n  emptyElement,\n  type Filter,\n  type FilterArguments,\n  type FilterCallback,\n  type GridOption,\n  OperatorType,\n  type OperatorString,\n  type SearchTerm,\n  type SlickGrid,\n  type ViewModelBindableInputData,\n} from 'aurelia-slickgrid';\n\nexport class CustomAureliaViewModelFilter implements Filter {\n  private _shouldTriggerQuery = true;\n  container!: HTMLDivElement;\n  grid!: SlickGrid;\n  searchTerms: SearchTerm[] = [];\n  columnDef!: Column;\n  callback!: FilterCallback;\n  operator: OperatorType | OperatorString = OperatorType.equal;\n\n  /** Aurelia ViewModel Reference */\n  vm?: { controller?: ICustomElementController } | null;\n  elmBindingContext?: IBindingContext;\n\n  /** Aurelia Util Service (could be inside the Grid Options Params or the Filter Params ) */\n  get aureliaUtilService(): AureliaUtilService {\n    let aureliaUtilService = this.gridOptions?.params?.aureliaUtilService;\n    if (!aureliaUtilService || !(aureliaUtilService instanceof AureliaUtilService)) {\n      aureliaUtilService = this.columnFilter?.params?.aureliaUtilService;\n    }\n    return aureliaUtilService;\n  }\n\n  /** Get the Collection */\n  get collection(): any[] {\n    return this.columnFilter?.collection ?? [];\n  }\n\n  /** Getter for the Column Filter */\n  get columnFilter(): ColumnFilter {\n    return this.columnDef?.filter ?? {};\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  get gridOptions(): GridOption {\n    return (this.grid?.getOptions() ?? {}) as GridOption;\n  }\n\n  /**\n   * Initialize the Filter\n   */\n  async init(args: FilterArguments) {\n    this.grid = args.grid as SlickGrid;\n    this.callback = args.callback;\n    this.columnDef = args.columnDef;\n    this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];\n\n    if (!this.columnFilter?.params?.viewModel) {\n      throw new Error(`[Aurelia-Slickgrid] For the Filters.aureliaComponent to work properly, you need to fill in the \"viewModel\" property of your Custom Element Filter.\n      Example: this.columnDefs = [{ id: 'title', field: 'title', filter: { model: CustomFilter, collection: [...], param: { viewModel: MyVM } },`);\n    }\n\n    if (this.columnFilter.params.viewModel) {\n      this.container = this.grid.getHeaderRowColumn(this.columnDef.id);\n      emptyElement(this.container);\n\n      // provide model binding including collection and selectedItem callback, we can use this binding in createAureliaViewModelAddToSlot()\n      const bindableData = {\n        grid: this.grid,\n\n        // here we override the collection object of the Aurelia Custom Element\n        // but technically you can pass any values you wish as bindings\n        model: {\n          collection: this.collection,\n        },\n      } as ViewModelBindableInputData;\n      const viewModel = this.columnFilter.params.viewModel;\n      this.vm = await this.aureliaUtilService.createAureliaViewModelAddToSlot(viewModel, bindableData, this.container);\n      this.elmBindingContext = this.vm?.controller?.children?.[0].scope.bindingContext;\n\n      // override the FilterSelect selectedItemChanged method (from the @bindable() selectedItem), we'll trigger the filter callback\n      if (this.elmBindingContext) {\n        this.elmBindingContext.selectedItemChanged = ((item: any) => {\n          this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: [item.id], shouldTriggerQuery: this._shouldTriggerQuery });\n          // reset flag for next use\n          this._shouldTriggerQuery = true;\n        });\n      }\n    }\n  }\n\n  /** Clear the filter value */\n  clear(shouldTriggerQuery = true) {\n    this._shouldTriggerQuery = shouldTriggerQuery;\n    if (this.elmBindingContext?.selectedItem) {\n      this.elmBindingContext.selectedItem = { id: '', name: '' };\n    }\n  }\n\n  /** destroy the Aurelia Custom Element & Subscription */\n  destroy() {\n    this.vm?.controller?.deactivate(this.vm.controller, null);\n    this.container = this.grid.getHeaderRowColumn(this.columnDef.id);\n    emptyElement(this.container);\n  }\n\n  /** Set value(s) on the DOM element */\n  setValues(values: any) {\n    if (this.elmBindingContext?.selectedItem) {\n      this.elmBindingContext.selectedItem = values;\n    }\n  }\n}\n","import { resolve } from 'aurelia';\nimport {\n  type AureliaGridInstance,\n  AureliaUtilService,\n  type Column,\n  type EditCommand,\n  Editors,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type OnEventArgs,\n  OperatorType,\n  SlickGlobalEditorLock,\n  type ViewModelBindableInputData,\n} from 'aurelia-slickgrid';\nimport { CustomAureliaViewModelEditor } from './custom-aureliaViewModelEditor';\nimport { CustomAureliaViewModelFilter } from './custom-aureliaViewModelFilter';\nimport { CustomTitleFormatter } from './custom-title-formatter';\nimport { EditorSelect } from './editor-select';\nimport { FilterSelect } from './filter-select';\n\nconst NB_ITEMS = 100;\n\nexport class Example26 {\n  title = 'Example 26: Use of Aurelia Custom Elements';\n  subTitle = `\n  <h5>Filters, Editors, AsyncPostRender with Aurelia Custom Elements</h5>\n  Grid with usage of Aurelia Custom Elements as Editor &amp; AsyncPostRender (similar to Formatter).\n  <ul>\n    <li>Support of Aurelia Custom Element as Custom Editor (click on any \"Assignee\" name cell)</li>\n    <ul>\n      <li>That column uses a simple select drodown wrapped in an Aurelia Custom Element</li>\n      <li>Increased Grid Options \"rowHeight\" &amp; \"headerRowHeight\" to 45 so that the Custom Element fits in the cell.</li>\n    </ul>\n    <li>Support of Aurelia Custom Element as Custom Filter (\"Assignee\" columns), which also uses Custom Element</li>\n    <li>The 2nd \"Assignee\" column (showing in bold text) uses \"asyncPostRender\" with an Aurelia Custom Element</li>\n    <ul>\n      <li>Why can't we use Aurelia Custom Element as Customer Formatter and why do I see a slight delay in loading the data?</li>\n      <li>It's totally normal since SlickGrid Formatters only accept strings (synchronously),\n      so we cannot use that (Aurelia requires at least 1 full cycle to render the element), so we are left with SlickGrid \"asyncPostRender\" and\n      it works but as the name suggest it's async users might see noticeable delay in loading the data\n      </li>\n    </ul>\n  </ul>\n  `;\n  private _commandQueue: EditCommand[] = [];\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  updatedObject: any;\n  hideSubTitle = false;\n  isAutoEdit = true;\n  alertWarning: any;\n  assignees = [\n    { id: '', name: '' },\n    { id: '1', name: 'John' },\n    { id: '2', name: 'Pierre' },\n    { id: '3', name: 'Paul' },\n  ];\n\n  constructor(private aureliaUtilService: AureliaUtilService = resolve(AureliaUtilService)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.mockData(NB_ITEMS);\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title',\n        name: 'Title',\n        field: 'title',\n        filterable: true,\n        sortable: true,\n        type: FieldType.string,\n        editor: {\n          model: Editors.longText,\n          minLength: 5,\n          maxLength: 255,\n        },\n        minWidth: 100,\n        onCellChange: (_e: Event, args: OnEventArgs) => {\n          console.log(args);\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\n        }\n      }, {\n        id: 'assignee',\n        name: 'Assignee',\n        field: 'assignee',\n        minWidth: 100,\n        filterable: true,\n        sortable: true,\n        filter: {\n          model: CustomAureliaViewModelFilter,\n          collection: this.assignees,\n          params: {\n            viewModel: FilterSelect\n            // aureliaUtilService: this.aureliaUtilService, // pass the aureliaUtilService here OR in the grid option params\n            // templateUrl: PLATFORM.moduleName('examples/slickgrid/filter-select') // FilterSelect,\n          }\n        },\n        queryFieldFilter: 'assignee.id', // for a complex object it's important to tell the Filter which field to query and our CustomAureliaComponentFilter returns the \"id\" property\n        queryFieldSorter: 'assignee.name',\n        formatter: Formatters.complexObject,\n        params: {\n          complexFieldLabel: 'assignee.name',\n        },\n        exportWithFormatter: true,\n        editor: {\n          model: CustomAureliaViewModelEditor,\n          collection: this.assignees,\n          params: {\n            viewModel: EditorSelect,\n            // aureliaUtilService: this.aureliaUtilService, // pass the aureliaUtilService here OR in the grid option params\n            // templateUrl: PLATFORM.moduleName('examples/slickgrid/editor-select') // EditorSelect,\n          }\n        },\n        onCellChange: (_e: Event, args: OnEventArgs) => {\n          console.log(args);\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\n        }\n      }, {\n        id: 'assignee2',\n        name: 'Assignee with Aurelia Component',\n        field: 'assignee',\n        minWidth: 125,\n        filterable: true,\n        sortable: true,\n        filter: {\n          model: CustomAureliaViewModelFilter,\n          collection: this.assignees,\n          params: {\n            viewModel: FilterSelect\n            // aureliaUtilService: this.aureliaUtilService, // pass the aureliaUtilService here OR in the grid option params\n            // templateUrl: PLATFORM.moduleName('examples/slickgrid/filter-select') // FilterSelect,\n          }\n        },\n        queryFieldFilter: 'assignee.id', // for a complex object it's important to tell the Filter which field to query and our CustomAureliaComponentFilter returns the \"id\" property\n        queryFieldSorter: 'assignee.name',\n\n        // loading formatter, text to display while Post Render gets processed\n        formatter: () => '...',\n\n        // to load an Aurelia Custom Element, you cannot use a Formatter since Aurelia needs at least 1 cycle to render everything\n        // you can use a PostRenderer but you will visually see the data appearing,\n        // which is why it's still better to use regular Formatter instead of Aurelia Custom Element\n        asyncPostRender: this.renderAureliaComponent.bind(this),\n        params: {\n          viewModel: CustomTitleFormatter,\n          // templateUrl: PLATFORM.moduleName('examples/slickgrid/custom-title-formatter'), // CustomTitleFormatterCustomElement,\n          complexFieldLabel: 'assignee.name' // for the exportCustomFormatter\n        },\n        exportCustomFormatter: Formatters.complexObject,\n      }, {\n        id: 'duration',\n        name: 'Duration (days)',\n        field: 'duration',\n        filterable: true,\n        minWidth: 100,\n        sortable: true,\n        type: FieldType.number,\n        filter: { model: Filters.slider, filterOptions: { hideSliderNumber: false } },\n        editor: {\n          model: Editors.slider,\n          minValue: 0,\n          maxValue: 100,\n          // editorOptions: { hideSliderNumber: true },\n        },\n        /*\n        editor: {\n          // default is 0 decimals, if no decimals is passed it will accept 0 or more decimals\n          // however if you pass the \"decimalPlaces\", it will validate with that maximum\n          model: Editors.float,\n          minValue: 0,\n          maxValue: 365,\n          // the default validation error message is in English but you can override it by using \"errorMessage\"\n          // errorMessage: this.i18n.tr('INVALID_FLOAT', { maxDecimal: 2 }),\n          params: { decimalPlaces: 2 },\n        },\n        */\n      }, {\n        id: 'complete',\n        name: '% Complete',\n        field: 'percentComplete',\n        filterable: true,\n        formatter: Formatters.multiple,\n        type: FieldType.number,\n        editor: {\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\n          enableRenderHtml: true,\n          collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, symbol: '<i class=\"mdi mdi-percent-outline\" style=\"color:cadetblue\"></i>' })),\n          customStructure: {\n            value: 'value',\n            label: 'label',\n            labelSuffix: 'symbol'\n          },\n          collectionSortBy: {\n            property: 'label',\n            sortDesc: true\n          },\n          collectionFilterBy: {\n            property: 'value',\n            value: 0,\n            operator: OperatorType.notEqual\n          },\n          model: Editors.singleSelect,\n        },\n        minWidth: 100,\n        params: {\n          formatters: [Formatters.collectionEditor, Formatters.percentCompleteBar],\n        }\n      }, {\n        id: 'start',\n        name: 'Start',\n        field: 'start',\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        sortable: true,\n        minWidth: 100,\n        type: FieldType.date,\n        editor: {\n          model: Editors.date\n        },\n      }, {\n        id: 'finish',\n        name: 'Finish',\n        field: 'finish',\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        sortable: true,\n        minWidth: 100,\n        type: FieldType.date,\n        editor: {\n          model: Editors.date\n        },\n      }\n    ];\n\n    this.gridOptions = {\n      asyncEditorLoading: false,\n      autoEdit: this.isAutoEdit,\n      autoCommitEdit: false,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      rowHeight: 45, // increase row height so that the custom elements fits in the cell\n      editable: true,\n      enableCellNavigation: true,\n      enableColumnPicker: true,\n      enableExcelCopyBuffer: true,\n      enableFiltering: true,\n      enableAsyncPostRender: true, // for the Aurelia PostRenderer, don't forget to enable it\n      asyncPostRenderDelay: 0,    // also make sure to remove any delay to render it\n      editCommandHandler: (_item, _column, editCommand) => {\n        this._commandQueue.push(editCommand);\n        editCommand.execute();\n      },\n      params: {\n        aureliaUtilService: this.aureliaUtilService // provide the service to all at once (Editor, Filter, AsyncPostRender)\n      }\n    };\n  }\n\n  mockData(itemCount: number, startingIndex = 0) {\n    // mock a dataset\n    const tempDataset: any[] = [];\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      tempDataset.push({\n        id: i,\n        title: 'Task ' + i,\n        assignee: i % 3 ? this.assignees[2] : i % 2 ? this.assignees[1] : this.assignees[0],\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        effortDriven: (i % 5 === 0),\n      });\n    }\n    return tempDataset;\n  }\n\n  onCellChanged(_e: Event, args: any) {\n    console.log('onCellChange', args);\n    this.updatedObject = { ...args.item };\n  }\n\n  onCellClicked(_e: Event, args: any) {\n    const metadata = this.aureliaGrid.gridService.getColumnFromEventArguments(args);\n    console.log(metadata);\n\n    if (metadata.columnDef.id === 'edit') {\n      this.alertWarning = `open a modal window to edit: ${metadata.dataContext.title}`;\n\n      // highlight the row, to customize the color, you can change the SASS variable $row-highlight-background-color\n      this.aureliaGrid.gridService.highlightRow(args.row, 1500);\n\n      // you could also select the row, when using \"enableCellNavigation: true\", it automatically selects the row\n      // this.aureliaGrid.gridService.setSelectedRow(args.row);\n    } else if (metadata.columnDef.id === 'delete') {\n      if (confirm('Are you sure?')) {\n        this.aureliaGrid.gridService.deleteItemById(metadata.dataContext.id);\n        this.alertWarning = `Deleted: ${metadata.dataContext.title}`;\n      }\n    }\n  }\n\n  onCellValidation(_e: Event, args: any) {\n    alert(args.validationResults.msg);\n  }\n\n  changeAutoCommit() {\n    this.gridOptions.autoCommitEdit = !this.gridOptions.autoCommitEdit;\n    this.aureliaGrid.slickGrid.setOptions({\n      autoCommitEdit: this.gridOptions.autoCommitEdit\n    });\n    return true;\n  }\n\n  renderAureliaComponent(cellNode: HTMLElement, _row: number, dataContext: any, colDef: Column) {\n    if (colDef.params.viewModel && cellNode) {\n      const bindableData = {\n        model: dataContext,\n        grid: this.aureliaGrid.slickGrid,\n      } as ViewModelBindableInputData;\n      this.aureliaUtilService.createAureliaViewModelAddToSlot(colDef.params.viewModel, bindableData, cellNode);\n    }\n  }\n\n  setAutoEdit(isAutoEdit: boolean) {\n    this.isAutoEdit = isAutoEdit;\n    this.aureliaGrid.slickGrid.setOptions({\n      autoEdit: isAutoEdit\n    });\n    return true;\n  }\n\n  undo() {\n    const command = this._commandQueue.pop();\n    if (command && SlickGlobalEditorLock.cancelCurrentEdit()) {\n      command.undo();\n      this.aureliaGrid.slickGrid.gotoCell(command.row, command.cell, false);\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","CustomAureliaViewModelEditor","args","__publicField","aureliaUtilService","_b","_a","AureliaUtilService","_d","_c","bindableData","viewModel","_g","_f","validation","item","state","itemObject","newItem","value","CustomAureliaViewModelFilter","OperatorType","emptyElement","shouldTriggerQuery","values","_Example26_decorators","_init","NB_ITEMS","customElement","__au2ViewDef","Example26","resolve","FieldType","Editors","FilterSelect","Formatters","EditorSelect","CustomTitleFormatter","Filters","k","_item","_column","editCommand","itemCount","startingIndex","tempDataset","i","randomYear","randomMonth","randomDay","randomPercent","metadata","cellNode","_row","dataContext","colDef","isAutoEdit","command","SlickGlobalEditorLock","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}