{"version":3,"file":"example3-DF9rGx7Q.js","sources":["../../src/examples/slickgrid/example3.$au.ts","../../src/examples/slickgrid/custom-inputEditor.ts","../../src/examples/slickgrid/data/collection_100_numbers.json?url","../../src/examples/slickgrid/data/country_names.json?url","../../src/examples/slickgrid/jsonp.ts","../../src/examples/slickgrid/example3.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example3\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example3.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <label>autoEdit setting</label>\\n    <br />\\n    <span id=\\\"radioAutoEdit\\\">\\n      <div class=\\\"row\\\">\\n\\n        <label class=\\\"radio-inline control-label\\\"\\n                for=\\\"radioTrue\\\">\\n          <input type=\\\"radio\\\"\\n                  name=\\\"inlineRadioOptions\\\"\\n                  id=\\\"radioTrue\\\"\\n                  checked\\n                  value.bind=\\\"isAutoEdit\\\"\\n                  click.trigger=\\\"setAutoEdit(true)\\\"> ON\\n          (single-click)\\n        </label>\\n        <label class=\\\"radio-inline control-label\\\"\\n                for=\\\"radioFalse\\\">\\n          <input type=\\\"radio\\\"\\n                  name=\\\"inlineRadioOptions\\\"\\n                  id=\\\"radioFalse\\\"\\n                  value.bind=\\\"isAutoEdit\\\"\\n                  click.trigger=\\\"setAutoEdit(false)\\\"> OFF\\n          (double-click)\\n        </label>\\n      </div>\\n      <div class=\\\"row col-sm-12\\\">\\n        <span>\\n          <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"undo()\\\" data-test=\\\"undo-btn\\\">\\n            <i class=\\\"mdi mdi-undo\\\"></i>\\n            Undo last edit(s)\\n          </button>\\n          <label class=\\\"checkbox-inline control-label\\\"\\n                  for=\\\"autoCommitEdit\\\">\\n            <input type=\\\"checkbox\\\"\\n                    id=\\\"autoCommitEdit\\\"\\n                    data-test=\\\"auto-commit\\\"\\n                    value.bind=\\\"gridOptions.autoCommitEdit\\\"\\n                    click.trigger=\\\"changeAutoCommit()\\\">\\n            Auto Commit Edit\\n          </label>\\n        </span>\\n      </div>\\n    </span>\\n    <div class=\\\"row\\\" style=\\\"margin-top: 5px\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"aureliaGrid.filterService.clearFilters()\\\">Clear\\n          Filters</button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"aureliaGrid.sortService.clearSorting()\\\">Clear\\n          Sorting</button>\\n        <button class=\\\"btn btn-outline-primary btn-sm\\\" data-test=\\\"add-item-btn\\\" click.trigger=\\\"addItem()\\\"\\n                title=\\\"Clear Filters &amp; Sorting to see it better\\\">\\n          Add item\\n        </button>\\n        <button class=\\\"btn btn-outline-danger btn-sm\\\" data-test=\\\"delete-item-btn\\\" click.trigger=\\\"deleteItem()\\\">Delete\\n          item</button>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\" style=\\\"margin-top: 5px\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"add-title-column\\\"\\n                click.trigger=\\\"dynamicallyAddTitleHeader()\\\">\\n          <i class=\\\"mdi mdi-shape-square-plus\\\"></i>\\n          Dynamically Duplicate Title Column\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"remove-title-column\\\"\\n                click.trigger=\\\"dynamicallyRemoveLastColumn()\\\">\\n          <i class=\\\"mdi mdi-minus\\\"></i>\\n          Dynamically Remove Last Column\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"col-sm-6\\\">\\n    <div class=\\\"alert alert-info\\\"\\n          show.bind=\\\"updatedObject\\\">\\n      <strong>Updated Item:</strong> ${updatedObject | stringify}\\n    </div>\\n    <div class=\\\"alert alert-warning\\\"\\n          show.bind=\\\"alertWarning\\\">\\n      ${alertWarning}\\n    </div>\\n  </div>\\n</div>\\n\\n<div id=\\\"grid-container\\\" class=\\\"col-sm-12\\\">\\n  <aurelia-slickgrid grid-id=\\\"grid3\\\"\\n                      column-definitions.bind=\\\"columnDefinitions\\\"\\n                      grid-options.bind=\\\"gridOptions\\\"\\n                      dataset.bind=\\\"dataset\\\"\\n                      instances.bind=\\\"aureliaGrid\\\"\\n                      on-cell-change.trigger=\\\"onCellChanged($event.detail.eventData, $event.detail.args)\\\"\\n                      on-click.trigger=\\\"onCellClicked($event.detail.eventData, $event.detail.args)\\\"\\n                      on-validation-error.trigger=\\\"onCellValidationError($event.detail.eventData, $event.detail.args)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import type {\n  Column,\n  ColumnEditor,\n  Editor,\n  EditorValidator,\n  EditorValidationResult,\n} from 'aurelia-slickgrid';\n\n/*\n * An example of a 'detaching' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class CustomInputEditor implements Editor {\n  private _lastInputEvent?: KeyboardEvent;\n  inputElm!: HTMLInputElement;\n  defaultValue: any;\n\n  constructor(private args: any) {\n    this.init();\n  }\n\n  /** Get Column Definition object */\n  get columnDef(): Column {\n    return this.args?.column ?? {};\n  }\n\n  /** Get Column Editor object */\n  get columnEditor(): ColumnEditor {\n    return this.columnDef?.editor ?? {};\n  }\n\n  /** Get the Validator function, can be passed in Editor property or Column Definition */\n  get validator(): EditorValidator | undefined {\n    return (this.columnEditor?.validator) || (this.columnDef?.validator);\n  }\n\n  init(): void {\n    const placeholder = this.columnEditor?.placeholder || '';\n\n    this.inputElm = document.createElement('input');\n    this.inputElm.className = 'editor-text';\n    this.inputElm.placeholder = placeholder;\n    this.args.container.appendChild(this.inputElm);\n\n    this.inputElm.addEventListener('keydown', this.handleKeydown.bind(this));\n\n    window.setTimeout(() => {\n      this.inputElm.focus();\n      this.inputElm.select();\n    }, 50);\n  }\n\n  handleKeydown(event: KeyboardEvent) {\n    this._lastInputEvent = event;\n    if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n      event.stopImmediatePropagation();\n    }\n  }\n\n  destroy() {\n    this.inputElm.removeEventListener('keydown', this.handleKeydown.bind(this));\n    this.inputElm.remove();\n  }\n\n  focus() {\n    this.inputElm.focus();\n  }\n\n  getValue() {\n    return this.inputElm.value;\n  }\n\n  setValue(val: string) {\n    this.inputElm.value = val;\n  }\n\n  loadValue(item: any) {\n    this.defaultValue = item[this.args.column.field] || '';\n    this.inputElm.value = this.defaultValue;\n    this.inputElm.defaultValue = this.defaultValue;\n    this.inputElm.select();\n  }\n\n  serializeValue() {\n    return this.inputElm.value;\n  }\n\n  applyValue(item: any, state: any) {\n    const validation = this.validate(state);\n    item[this.args.column.field] = (validation && validation.valid) ? state : '';\n  }\n\n  isValueChanged(): boolean {\n    const lastKeyEvent = this._lastInputEvent?.key;\n    if (this.columnEditor?.alwaysSaveOnEnterKey && lastKeyEvent === 'Enter') {\n      return true;\n    }\n    return (!(this.inputElm.value === '' && this.defaultValue === null)) && (this.inputElm.value !== this.defaultValue);\n  }\n\n  validate(inputValue?: any): EditorValidationResult {\n    if (this.validator) {\n      const value = (inputValue !== undefined) ? inputValue : this.inputElm?.value;\n      return this.validator(value, this.args);\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n","export default \"__VITE_ASSET__ut9jT3gs__\"","export default \"__VITE_ASSET__BKqZoVN6__\"","/*\n * copied and rewritten as ESM (just a simple rewrite as ESM to avoid loading a CJS package)\n * https://github.com/camsong/fetch-jsonp/blob/master/src/fetch-jsonp.js\n */\n\ninterface JsonpOptions {\n  timeout: number;\n  jsonpCallback: string;\n  jsonpCallbackFunction: string;\n  charset: string;\n  nonce: string;\n  referrerPolicy: string;\n  crossorigin: boolean;\n};\n\nconst defaultOptions = {\n  timeout: 5000,\n  jsonpCallback: 'callback',\n  jsonpCallbackFunction: null,\n};\nconst generateCallbackFunction = () => `jsonp_${Date.now()}_${Math.ceil(Math.random() * 100000)}`;\nconst clearFunction = (functionName: string) => delete (window as any)[functionName];\nconst removeScript = (scriptId: string) => {\n  const script = document.getElementById(scriptId);\n  if (script) {\n    document.getElementsByTagName('head')[0].removeChild(script);\n  }\n};\n\nfunction fetchJsonp<T = any>(_url: string, options: Partial<JsonpOptions> = {}): Promise<{ ok: boolean; json: () => Promise<T>; }> {\n  // to avoid param reassign\n  let url = _url;\n  const timeout = options.timeout || defaultOptions.timeout;\n  const jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;\n  let timeoutId: any;\n\n  return new Promise((resolve, reject) => {\n    const callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();\n    const scriptId = `${jsonpCallback}_${callbackFunction}`;\n\n    (window as any)[callbackFunction] = (response: T) => {\n      // keep consistent with fetch API\n      resolve({ ok: true, json: () => Promise.resolve(response) });\n      if (timeoutId) clearTimeout(timeoutId);\n      removeScript(scriptId);\n      clearFunction(callbackFunction);\n    };\n\n    // Check if the user set their own params, and if not add a ? to start a list of params\n    url += (url.indexOf('?') === -1) ? '?' : '&';\n\n    const jsonpScript = document.createElement('script');\n    jsonpScript.setAttribute('src', `${url}${jsonpCallback}=${callbackFunction}`);\n    if (options.charset) {\n      jsonpScript.setAttribute('charset', options.charset);\n    }\n    if (options.nonce) {\n      jsonpScript.setAttribute('nonce', options.nonce);\n    }\n    if (options.referrerPolicy) {\n      jsonpScript.setAttribute('referrerPolicy', options.referrerPolicy);\n    }\n    if (options.crossorigin) {\n      jsonpScript.setAttribute('crossorigin', 'true');\n    }\n    jsonpScript.id = scriptId;\n    document.getElementsByTagName('head')[0].appendChild(jsonpScript);\n\n    timeoutId = setTimeout(() => {\n      reject(new Error(`JSONP request to ${_url} timed out`));\n\n      clearFunction(callbackFunction);\n      removeScript(scriptId);\n      (window as any)[callbackFunction] = () => {\n        clearFunction(callbackFunction);\n      };\n    }, timeout);\n\n    // Caught if got 404/500\n    jsonpScript.onerror = () => {\n      reject(new Error(`JSONP request to ${_url} failed`));\n      clearFunction(callbackFunction);\n      removeScript(scriptId);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport default fetchJsonp;\n","import { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\nimport { I18N } from '@aurelia/i18n';\nimport {\n  type AureliaGridInstance,\n  type AutocompleterOption,\n  type Column,\n  type EditCommand,\n  Editors,\n  type EditorValidator,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type OnEventArgs,\n  OperatorType,\n  SlickGlobalEditorLock,\n  SortComparers,\n  type VanillaCalendarOption,\n} from 'aurelia-slickgrid';\n\nimport { CustomInputEditor } from './custom-inputEditor';\nimport { CustomInputFilter } from './custom-inputFilter';\nimport SAMPLE_COLLECTION_DATA_URL from './data/collection_100_numbers.json?url';\nimport COUNTRIES_COLLECTION_URL from './data/countries.json?url';\nimport COUNTRY_NAMES_URL from './data/country_names.json?url';\nimport fetchJsonp from './jsonp';\n\nconst NB_ITEMS = 100;\n\n// you can create custom validator to pass to an inline editor\nconst myCustomTitleValidator: EditorValidator = (value: any) => {\n  // you can get the Editor Args which can be helpful, e.g. we can get the Translate Service from it\n  // const grid = args && args.grid;\n  // const gridOptions = grid.getOptions() as GridOption;\n  // const i18n = gridOptions.i18n;\n\n  if (value === null || value === undefined || !value.length) {\n    return { valid: false, msg: 'This is a required field' };\n  } else if (!/^Task\\s\\d+$/.test(value)) {\n    return { valid: false, msg: 'Your title is invalid, it must start with \"Task\" followed by a number' };\n    // OR use the Translate Service with your custom message\n    // return { valid: false, msg: i18n.tr('YOUR_ERROR', { x: value }) };\n  }\n  return { valid: true, msg: '' };\n};\n\n// create a custom Formatter to show the Task + value\nconst taskFormatter = (_row: number, _cell: number, value: any) => {\n  if (value && Array.isArray(value)) {\n    const taskValues = value.map((val) => `Task ${val}`);\n    const values = taskValues.join(', ');\n    return `<span title=\"${values}\">${values}</span>`;\n  }\n  return '';\n};\n\nexport class Example3 {\n  title = 'Example 3: Editors / Delete';\n  subTitle = `\n  Grid with Inline Editors and onCellClick actions (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/column-functionalities/editors\" target=\"_blank\">Wiki docs</a>).\n  <ul>\n    <li>When using \"enableCellNavigation: true\", clicking on a cell will automatically make it active &amp; selected.</li>\n    <ul><li>If you don't want this behavior, then you should disable \"enableCellNavigation\"</li></ul>\n    <li>Inline Editors requires \"enableCellNavigation: true\" (not sure why though)</li>\n    <li>\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling \"enableExcelCopyBuffer\" flag.\n        Note that it will only evaluate Formatter when the \"exportWithFormatter\" flag is enabled (through \"ExcelExportOptions\" or \"TextExportOptions\" or the column definition)\n    </li>\n    <li>Support of \"collectionAsync\" is possible, click on \"Clear Filters/Sorting\" then add/delete item(s) and look at \"Prerequisites\" Select Filter</li>\n  </ul>\n  `;\n  private _commandQueue: EditCommand[] = [];\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  updatedObject: any;\n  hideSubTitle = false;\n  isAutoEdit = true;\n  alertWarning: any;\n  duplicateTitleHeaderCount = 1;\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient)), private readonly i18n: I18N = resolve(I18N)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.mockData(NB_ITEMS);\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'edit',\n        field: 'id',\n        excludeFromColumnPicker: true,\n        excludeFromGridMenu: true,\n        excludeFromHeaderMenu: true,\n        formatter: Formatters.icon,\n        params: { iconCssClass: 'mdi mdi-pencil pointer' },\n        minWidth: 30,\n        maxWidth: 30,\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\n        onCellClick: (_e: Event, args: OnEventArgs) => {\n          console.log(args);\n          this.alertWarning = `Editing: ${args.dataContext.title}`;\n          this.aureliaGrid.gridService.highlightRow(args.row, 1500);\n          this.aureliaGrid.gridService.setSelectedRow(args.row);\n        }\n      }, {\n        id: 'delete',\n        field: 'id',\n        excludeFromColumnPicker: true,\n        excludeFromGridMenu: true,\n        excludeFromHeaderMenu: true,\n        formatter: Formatters.icon,\n        params: { iconCssClass: 'mdi mdi-trash-can pointer' },\n        minWidth: 30,\n        maxWidth: 30,\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\n        /*\n        onCellClick: (e: Event, args: OnEventArgs) => {\n          console.log(args);\n          this.alertWarning = `Deleting: ${args.dataContext.title}`;\n        }\n        */\n      }, {\n        id: 'title',\n        name: 'Title',\n        field: 'title',\n        filterable: true,\n        sortable: true,\n        type: FieldType.string,\n        editor: {\n          model: Editors.longText,\n          placeholder: 'something',\n          title: 'some title',\n          validator: myCustomTitleValidator, // use a custom validator\n        },\n        minWidth: 100,\n        onCellChange: (_e: Event, args: OnEventArgs) => {\n          console.log(args);\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\n        }\n      }, {\n        id: 'title2',\n        name: 'Title, Custom Editor',\n        field: 'title',\n        filterable: true,\n        sortable: true,\n        type: FieldType.string,\n        editor: {\n          model: CustomInputEditor,\n          placeholder: 'custom',\n          validator: myCustomTitleValidator, // use a custom validator\n        },\n        filter: {\n          model: CustomInputFilter,\n          placeholder: '🔎︎ custom',\n        },\n        minWidth: 70\n      }, {\n        id: 'duration',\n        name: 'Duration (days)',\n        field: 'duration',\n        filterable: true,\n        minWidth: 100,\n        sortable: true,\n        type: FieldType.number,\n        filter: {\n          model: Filters.slider,\n          filterOptions: { hideSliderNumber: false }\n        },\n        editor: {\n          model: Editors.slider,\n          minValue: 0,\n          maxValue: 100,\n          // editorOptions: { hideSliderNumber: true },\n        },\n        /*\n        editor: {\n          // default is 0 decimals, if no decimals is passed it will accept 0 or more decimals\n          // however if you pass the \"decimalPlaces\", it will validate with that maximum\n          model: Editors.float,\n          minValue: 0,\n          maxValue: 365,\n          // the default validation error message is in English but you can override it by using \"errorMessage\"\n          // errorMessage: this.i18n.tr('INVALID_FLOAT', { maxDecimal: 2 }),\n          params: { decimalPlaces: 2 },\n        },\n        */\n      }, {\n        id: 'complete',\n        name: '% Complete',\n        field: 'percentComplete',\n        filterable: true,\n        formatter: Formatters.multiple,\n        type: FieldType.number,\n        editor: {\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\n          enableRenderHtml: true,\n          collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, symbol: '<i class=\"mdi mdi-percent-outline\" style=\"color:cadetblue\"></i>' })),\n          customStructure: {\n            value: 'value',\n            label: 'label',\n            labelSuffix: 'symbol'\n          },\n          collectionSortBy: {\n            property: 'label',\n            sortDesc: true\n          },\n          collectionFilterBy: {\n            property: 'value',\n            value: 0,\n            operator: OperatorType.notEqual\n          },\n          model: Editors.singleSelect,\n          // validator: (value, args) => {\n          //   if (value < 50) {\n          //     return { valid: false, msg: 'Please use at least 50%' };\n          //   }\n          //   return { valid: true, msg: '' };\n          // }\n        },\n        minWidth: 100,\n        params: {\n          formatters: [Formatters.collectionEditor, Formatters.percentCompleteBar],\n        }\n      }, {\n        id: 'start',\n        name: 'Start',\n        field: 'start',\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        sortable: true,\n        minWidth: 100,\n        type: FieldType.date,\n        editor: {\n          model: Editors.date\n        },\n      }, {\n        id: 'finish',\n        name: 'Finish',\n        field: 'finish',\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        sortable: true,\n        minWidth: 100,\n        type: FieldType.date,              // dataset cell input format\n        // outputType: FieldType.dateUs,   // date picker format\n        saveOutputType: FieldType.dateUtc, // save output date format\n        editor: {\n          model: Editors.date,\n          // override any of the calendar options through \"filterOptions\"\n          editorOptions: { range: { min: 'today' } } as VanillaCalendarOption\n        },\n      }, {\n        id: 'cityOfOrigin', name: 'City of Origin', field: 'cityOfOrigin',\n        filterable: true,\n        sortable: true,\n        minWidth: 100,\n        editor: {\n          model: Editors.autocompleter,\n          placeholder: '🔎︎ search city',\n\n          // We can use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\n          // use your own autocomplete options, instead of fetch-jsonp, use Aurelia HttpClient or FetchClient\n          // here we use fetch-jsonp just because I'm not sure how to configure Aurelia HttpClient with JSONP and CORS\n          editorOptions: {\n            minLength: 3,\n            forceUserInput: true,\n            fetch: (searchText: string, updateCallback: (items: false | any[]) => void) => {\n              /** with Aurelia Http, note this demo won't work because of CORS */\n              // this.http.get(`http://gd.geobytes.com/AutoCompleteCity?q=${searchText}`).subscribe(data => updateCallback(data));\n\n              /** with JSONP will work locally but not on the GitHub demo because of CORS */\n              fetchJsonp<string[]>(`http://gd.geobytes.com/AutoCompleteCity?q=${searchText}`)\n                .then((response: { json: () => Promise<any[]> }) => response.json())\n                .then((json: any[]) => updateCallback(json))\n                .catch((ex) => console.log('invalid JSONP response', ex));\n            },\n          } as AutocompleterOption,\n        },\n        filter: {\n          model: Filters.autocompleter,\n          // placeholder: '🔎︎ search city',\n\n          // We can use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\n          // collectionAsync: this.http.fetch(COUNTRIES_COLLECTION_URL),\n\n          // OR use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\n          // use your own autocomplete options, instead of fetch-jsonp, use HttpClient or FetchClient\n          filterOptions: {\n            minLength: 3,\n            fetch: (searchText: string, updateCallback: (items: false | any[]) => void) => {\n              fetchJsonp<string[]>(`http://gd.geobytes.com/AutoCompleteCity?q=${searchText}`)\n                .then((response: { json: () => Promise<any[]> }) => response.json())\n                .then((json: any[]) => updateCallback(json))\n                .catch((ex: any) => console.log('invalid JSONP response', ex));\n            },\n          } as AutocompleterOption,\n        }\n      }, {\n        id: 'countryOfOrigin', name: 'Country of Origin', field: 'countryOfOrigin',\n        formatter: Formatters.complexObject,\n        dataKey: 'code',\n        labelKey: 'name',\n        type: FieldType.object,\n        sortComparer: SortComparers.objectString,\n        filterable: true,\n        sortable: true,\n        minWidth: 100,\n        editor: {\n          model: Editors.autocompleter,\n          customStructure: { label: 'name', value: 'code' },\n          collectionAsync: this.http.fetch(COUNTRIES_COLLECTION_URL),\n        },\n        filter: {\n          model: Filters.autocompleter,\n          customStructure: { label: 'name', value: 'code' },\n          collectionAsync: this.http.fetch(COUNTRIES_COLLECTION_URL),\n        }\n      }, {\n        id: 'countryOfOriginName', name: 'Country of Origin Name', field: 'countryOfOriginName',\n        filterable: true,\n        sortable: true,\n        minWidth: 100,\n        editor: {\n          model: Editors.autocompleter,\n          collectionAsync: this.http.fetch(COUNTRY_NAMES_URL),\n        },\n        filter: {\n          model: Filters.autocompleter,\n          collectionAsync: this.http.fetch(COUNTRY_NAMES_URL),\n        }\n      }, {\n        id: 'effort-driven',\n        name: 'Effort Driven',\n        field: 'effortDriven',\n        filterable: true,\n        type: FieldType.boolean,\n        filter: {\n          model: Filters.singleSelect,\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }]\n        },\n        formatter: Formatters.checkmarkMaterial,\n        editor: {\n          model: Editors.checkbox,\n        },\n        minWidth: 70\n      }, {\n        id: 'prerequisites',\n        name: 'Prerequisites',\n        field: 'prerequisites',\n        filterable: true,\n        formatter: taskFormatter,\n        exportWithFormatter: true,\n        sanitizeDataExport: true,\n        minWidth: 100,\n        sortable: true,\n        type: FieldType.string,\n        editor: {\n          // We can load the \"collection\" asynchronously (on first load only, after that we will simply use \"collection\")\n          // 3 ways are supported (aurelia-http-client, aurelia-fetch-client OR even Promise)\n\n          // 1- USE HttpClient from \"aurelia-http-client\" to load collection asynchronously\n          // collectionAsync: this.http.createRequest(SAMPLE_COLLECTION_DATA_URL).asGet().send(),\n\n          // OR 2- use \"aurelia-fetch-client\", they are both supported\n          collectionAsync: this.http.fetch(SAMPLE_COLLECTION_DATA_URL),\n\n          // OR 3- use a Promise\n          // collectionAsync: new Promise<any>((resolve) => {\n          //   window.setTimeout(() => {\n          //     resolve(Array.from(Array(NB_ITEMS).keys()).map(k => ({ value: k, label: k, prefix: 'Task', suffix: 'days' })));\n          //   }, 500);\n          // }),\n\n          // OR a regular \"collection\" load\n          // collection: Array.from(Array(NB_ITEMS).keys()).map(k => ({ value: k, label: k, prefix: 'Task', suffix: 'days' })),\n          collectionSortBy: {\n            property: 'value',\n            sortDesc: true,\n            fieldType: FieldType.number\n          },\n          customStructure: {\n            label: 'label',\n            value: 'value',\n            labelPrefix: 'prefix',\n          },\n          collectionOptions: {\n            separatorBetweenTextLabels: ' '\n          },\n          model: Editors.multipleSelect,\n        },\n        filter: {\n          collectionAsync: this.http.fetch(SAMPLE_COLLECTION_DATA_URL),\n          // collectionAsync: new Promise((resolve) => {\n          //   window.setTimeout(() => {\n          //     resolve(Array.from(Array(this.dataset.length).keys()).map(k => ({ value: k, label: `Task ${k}` })));\n          //   });\n          // }),\n\n          // OR a regular collection load\n          // collection: Array.from(Array(NB_ITEMS).keys()).map(k => ({ value: k, label: k, prefix: 'Task', suffix: 'days' })),\n          collectionSortBy: {\n            property: 'value',\n            sortDesc: true,\n            fieldType: FieldType.number\n          },\n          customStructure: {\n            label: 'label',\n            value: 'value',\n            labelPrefix: 'prefix',\n          },\n          collectionOptions: {\n            separatorBetweenTextLabels: ' '\n          },\n          model: Filters.multipleSelect,\n          operator: OperatorType.inContains,\n        },\n      }\n    ];\n\n    this.gridOptions = {\n      autoEdit: this.isAutoEdit,\n      autoCommitEdit: false,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      editable: true,\n      enableCellNavigation: true,\n      enableExcelCopyBuffer: true,\n      enableFiltering: true,\n      editCommandHandler: (_item, _column, editCommand) => {\n        this._commandQueue.push(editCommand);\n        editCommand.execute();\n      },\n      i18n: this.i18n,\n    };\n  }\n\n  /** Add a new row to the grid and refresh the Filter collection */\n  addItem() {\n    const lastRowIndex = this.dataset.length;\n    const newRows = this.mockData(1, lastRowIndex);\n\n    // wrap into a timer to simulate a backend async call\n    window.setTimeout(() => {\n      // at any time, we can poke the \"collection\" property and modify it\n      const requisiteColumnDef = this.columnDefinitions.find((column: Column) => column.id === 'prerequisites');\n      if (requisiteColumnDef) {\n        const collectionEditor = requisiteColumnDef.editor!.collection;\n        const collectionFilter = requisiteColumnDef.filter!.collection;\n\n        if (Array.isArray(collectionEditor) && Array.isArray(collectionFilter)) {\n          // add the new row to the grid\n          this.aureliaGrid.gridService.addItem(newRows[0], { highlightRow: false });\n\n          // then refresh the Editor/Filter \"collection\", we have 2 ways of doing it\n\n          // 1- push to the \"collection\"\n          collectionEditor.push({ value: lastRowIndex, label: lastRowIndex, prefix: 'Task', suffix: 'days' });\n          collectionFilter.push({ value: lastRowIndex, label: lastRowIndex, prefix: 'Task', suffix: 'days' });\n\n          // OR 2- replace the entire \"collection\" is also supported\n          // requisiteColumnDef.filter.collection = [...collection, ...[{ value: lastRowIndex, label: lastRowIndex }]];\n          // requisiteColumnDef.editor.collection = [...collection, ...[{ value: lastRowIndex, label: lastRowIndex }]];\n        }\n      }\n    }, 250);\n  }\n\n  /** Delete last inserted row */\n  deleteItem() {\n    const requisiteColumnDef = this.columnDefinitions.find((column: Column) => column.id === 'prerequisites');\n    if (requisiteColumnDef) {\n      const collectionEditor = requisiteColumnDef.editor!.collection;\n      const collectionFilter = requisiteColumnDef.filter!.collection;\n\n      if (Array.isArray(collectionEditor) && Array.isArray(collectionFilter)) {\n        // sort collection in descending order and take out last option from the collection\n        const selectCollectionObj = this.sortCollectionDescending(collectionEditor).pop();\n        this.sortCollectionDescending(collectionFilter).pop();\n        this.aureliaGrid.gridService.deleteItemById(selectCollectionObj.value);\n      }\n    }\n  }\n\n  sortCollectionDescending(collection: any[]) {\n    return collection.sort((item1, item2) => item1.value - item2.value);\n  }\n\n  mockData(itemCount: number, startingIndex = 0) {\n    // mock a dataset\n    const tempDataset: any[] = [];\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\n      const randomYear = 2000 + this.randomBetween(4, 15);\n      const randomFinishYear = (new Date().getFullYear() - 3) + Math.floor(Math.random() * 10); // use only years not lower than 3 years ago\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n      const randomFinish = new Date(randomFinishYear, (randomMonth + 1), randomDay);\n\n      tempDataset.push({\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: randomFinish < new Date() ? '' : randomFinish, // make sure the random date is earlier than today\n        effortDriven: (i % 5 === 0),\n        prerequisites: (i % 2 === 0) && i !== 0 && i < 12 ? [i, i - 1] : [],\n        countryOfOrigin: (i % 2) ? { code: 'CA', name: 'Canada' } : { code: 'US', name: 'United States' },\n        countryOfOriginName: (i % 2) ? 'Canada' : 'United States',\n        cityOfOrigin: (i % 2) ? 'Vancouver, BC, Canada' : 'Boston, MA, United States',\n      });\n    }\n    return tempDataset;\n  }\n\n  randomBetween(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  onCellChanged(_e: Event, args: any) {\n    console.log('onCellChange', args);\n    this.updatedObject = { ...args.item };\n  }\n\n  onCellClicked(_e: Event, args: any) {\n    const metadata = this.aureliaGrid.gridService.getColumnFromEventArguments(args);\n    console.log(metadata);\n\n    if (metadata.columnDef.id === 'edit') {\n      this.alertWarning = `open a modal window to edit: ${metadata.dataContext.title}`;\n\n      // highlight the row, to customize the color, you can change the SASS variable $row-highlight-background-color\n      this.aureliaGrid.gridService.highlightRow(args.row, 1500);\n\n      // you could also select the row, when using \"enableCellNavigation: true\", it automatically selects the row\n      // this.aureliaGrid.gridService.setSelectedRow(args.row);\n    } else if (metadata.columnDef.id === 'delete') {\n      if (confirm('Are you sure?')) {\n        this.aureliaGrid.gridService.deleteItemById(metadata.dataContext.id);\n        this.alertWarning = `Deleted: ${metadata.dataContext.title}`;\n      }\n    }\n  }\n\n  onCellValidationError(_e: Event, args: any) {\n    if (args.validationResults) {\n      alert(args.validationResults.msg);\n    }\n  }\n\n  changeAutoCommit() {\n    this.gridOptions.autoCommitEdit = !this.gridOptions.autoCommitEdit;\n    this.aureliaGrid.slickGrid.setOptions({\n      autoCommitEdit: this.gridOptions.autoCommitEdit\n    });\n    return true;\n  }\n\n  dynamicallyAddTitleHeader() {\n    const newCol = {\n      id: `title${this.duplicateTitleHeaderCount++}`,\n      name: 'Title',\n      field: 'title',\n      editor: {\n        model: Editors.text,\n        required: true,\n        validator: myCustomTitleValidator, // use a custom validator\n      },\n      sortable: true, minWidth: 100, filterable: true,\n    };\n\n    // you can dynamically add your column to your column definitions\n    // and then use the spread operator [...cols] OR slice to force Aurelia to review the changes\n    this.columnDefinitions.push(newCol);\n\n    // NOTE if you use an Extensions (Checkbox Selector, Row Detail, ...) that modifies the column definitions in any way\n    // you MUST use \"getAllColumnDefinitions()\" from the GridService, using this will be ALL columns including the 1st column that is created internally\n    // for example if you use the Checkbox Selector (row selection), you MUST use the code below\n    /*\n    const allColumns = this.aureliaGrid.gridService.getAllColumnDefinitions();\n    allColumns.push(newCol);\n    this.columnDefinitions = [...allColumns]; // (or use slice) reassign to column definitions for Aurelia to do dirty checking\n    */\n  }\n\n  dynamicallyRemoveLastColumn() {\n    this.columnDefinitions.pop();\n\n    /*\n    // remove your column the full set of columns\n    // and use slice or spread [...] to trigger an Aurelia dirty change\n    allOriginalColumns.pop();\n    */\n  }\n\n  setAutoEdit(isAutoEdit: boolean) {\n    this.isAutoEdit = isAutoEdit;\n    this.aureliaGrid.slickGrid.setOptions({\n      autoEdit: isAutoEdit\n    });\n    return true;\n  }\n\n  undo() {\n    const command = this._commandQueue.pop();\n    if (command && SlickGlobalEditorLock.cancelCurrentEdit()) {\n      command.undo();\n      this.aureliaGrid.slickGrid.gotoCell(command.row, command.cell, false);\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","CustomInputEditor","args","__publicField","_a","_b","placeholder","event","val","item","state","validation","lastKeyEvent","inputValue","value","SAMPLE_COLLECTION_DATA_URL","COUNTRY_NAMES_URL","defaultOptions","generateCallbackFunction","clearFunction","functionName","removeScript","scriptId","script","fetchJsonp","_url","options","url","timeout","jsonpCallback","timeoutId","resolve","reject","callbackFunction","response","jsonpScript","_Example3_decorators","_init","NB_ITEMS","myCustomTitleValidator","taskFormatter","_row","_cell","values","customElement","__au2ViewDef","Example3","http","newInstanceOf","IHttpClient","i18n","I18N","Formatters","FieldType","Editors","CustomInputFilter","Filters","k","OperatorType","searchText","updateCallback","json","ex","SortComparers","COUNTRIES_COLLECTION_URL","_item","_column","editCommand","lastRowIndex","newRows","requisiteColumnDef","column","collectionEditor","collectionFilter","selectCollectionObj","collection","item1","item2","itemCount","startingIndex","tempDataset","i","randomYear","randomFinishYear","randomMonth","randomDay","randomPercent","randomFinish","min","max","metadata","newCol","isAutoEdit","command","SlickGlobalEditorLock","action","__decoratorStart","__decorateElement","__runInitializers"],"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"}