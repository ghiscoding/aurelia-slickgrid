{"version":3,"file":"example10-D1HRtlR1.js","sources":["../../src/examples/slickgrid/example10.$au.ts","../../src/examples/slickgrid/example10.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example10.scss\";\nexport const name = \"example10\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example10.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"hideSubTitle = !hideSubTitle\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\" hidden.bind=\\\"hideSubTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\" style=\\\"max-width: 205px;\\\">\\n    Pagination\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-first-page\\\"\\n              click.trigger=\\\"goToGrid1FirstPage()\\\">\\n        <i class=\\\"mdi mdi-page-first\\\"></i>\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-last-page\\\" click.trigger=\\\"goToGrid1LastPage()\\\">\\n        <i class=\\\"mdi mdi-page-last icon\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-8\\\">\\n    <div class=\\\"alert alert-success\\\">\\n      <strong>(single select) Selected Row:</strong>\\n      <span innerhtml.bind=\\\"selectedTitle\\\"\\n            data-test=\\\"grid1-selections\\\"></span>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"overflow-hidden\\\">\\n  <aurelia-slickgrid grid-id=\\\"grid1\\\"\\n                      column-definitions.bind=\\\"columnDefinitions1\\\"\\n                      grid-options.bind=\\\"gridOptions1\\\"\\n                      dataset.bind=\\\"dataset1\\\"\\n                      on-aurelia-grid-created.trigger=\\\"aureliaGrid1Ready($event.detail)\\\"\\n                      on-grid-state-changed.trigger=\\\"grid1StateChanged($event.detail)\\\"\\n                      on-selected-rows-changed.trigger=\\\"onGrid1SelectedRowsChanged($event.detail.eventData, $event.detail.args)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\\n<hr class=\\\"col-md-6 offset-md-1\\\">\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4 col-md-3\\\" style=\\\"max-width: 215px;\\\">\\n    <label for=\\\"enableGrid2Pagination\\\">\\n      Pagination:\\n      <input type=\\\"checkbox\\\" id=\\\"enableGrid2Pagination\\\"\\n              checked.bind=\\\"isGrid2WithPagination\\\"\\n              data-test=\\\"toggle-pagination-grid2\\\" />\\n    </label>\\n    <span style=\\\"margin-left: 5px\\\" if.bind=\\\"isGrid2WithPagination\\\">\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-first-page\\\"\\n                click.trigger=\\\"goToGrid2FirstPage()\\\">\\n          <i class=\\\"mdi mdi-page-first\\\"></i>\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-last-page\\\"\\n                click.trigger=\\\"goToGrid2LastPage()\\\">\\n          <i class=\\\"mdi mdi-page-last icon\\\"></i>\\n        </button>\\n      </div>\\n    </span>\\n  </div>\\n  <div class=\\\"col-sm-8\\\">\\n    <div class=\\\"alert alert-success\\\">\\n      <strong>(multi-select) Selected Row(s):</strong>\\n      <span innerhtml.bind=\\\"selectedTitles\\\"\\n            data-test=\\\"grid2-selections\\\"></span>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"overflow-hidden\\\">\\n  <aurelia-slickgrid grid-id=\\\"grid2\\\"\\n                      column-definitions.bind=\\\"columnDefinitions2\\\"\\n                      grid-options.bind=\\\"gridOptions2\\\"\\n                      dataset.bind=\\\"dataset2\\\"\\n                      on-aurelia-grid-created.trigger=\\\"aureliaGrid2Ready($event.detail)\\\"\\n                      on-grid-state-changed.trigger=\\\"grid2StateChanged($event.detail)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { bindable } from 'aurelia';\nimport { type AureliaGridInstance, type Column, FieldType, Filters, Formatters, type GridOption, type GridStateChange } from 'aurelia-slickgrid';\nimport './example10.scss'; // provide custom CSS/SASS styling\n\nexport class Example10 {\n  title = 'Example 10: Multiple Grids with Row Selection';\n  subTitle = `\n    Row selection, single or multi-select (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/row-selection\" target=\"_blank\">Wiki docs</a>).\n    <ul>\n      <li>Single Select, you can click on any cell to make the row active</li>\n      <li>Multiple Selections, you need to specifically click on the checkbox to make 1 or more selections</li>\n      <li>NOTE: Any Row Selection(s) will be reset when using Pagination and changing Page (you will need to set it back manually if you want it back)</li>\n    </ul>\n  `;\n  @bindable() isGrid2WithPagination = true;\n\n  aureliaGrid1!: AureliaGridInstance;\n  aureliaGrid2!: AureliaGridInstance;\n  columnDefinitions1: Column[] = [];\n  columnDefinitions2: Column[] = [];\n  gridOptions1!: GridOption;\n  gridOptions2!: GridOption;\n  dataset1: any[] = [];\n  dataset2: any[] = [];\n  hideSubTitle = false;\n  selectedTitles = '';\n  selectedTitle = '';\n  selectedGrid2IDs: number[] = [];\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrids();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset1 = this.prepareData(495);\n    this.dataset2 = this.prepareData(525);\n  }\n\n  aureliaGrid1Ready(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid1 = aureliaGrid;\n  }\n\n  aureliaGrid2Ready(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid2 = aureliaGrid;\n  }\n\n  /* Define grid Options and Columns */\n  defineGrids() {\n    this.columnDefinitions1 = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, filterable: true },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, filterable: true },\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, filterable: true, sortable: true },\n      {\n        id: 'start', name: 'Start', field: 'start',\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\n      },\n      {\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\n        formatter: Formatters.checkmarkMaterial, type: FieldType.boolean,\n        sortable: true, filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\n          model: Filters.singleSelect,\n        }\n      }\n    ];\n\n    this.columnDefinitions2 = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, filterable: true },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, filterable: true },\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, filterable: true, sortable: true },\n      {\n        id: 'start', name: 'Start', field: 'start',\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        formatter: Formatters.dateIso, exportWithFormatter: true, type: FieldType.date,\n        filterable: true, sortable: true, filter: { model: Filters.compoundDate },\n      },\n      {\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\n        formatter: Formatters.checkmarkMaterial, type: FieldType.boolean,\n        sortable: true, filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\n          model: Filters.singleSelect,\n        }\n      }\n    ];\n\n    this.gridOptions1 = {\n      enableAutoResize: false,\n      enableCellNavigation: true,\n      enableRowSelection: true,\n      enableCheckboxSelector: true,\n      enableFiltering: true,\n      checkboxSelector: {\n        // remove the unnecessary \"Select All\" checkbox in header when in single selection mode\n        hideSelectAllCheckbox: true,\n\n        // you can override the logic for showing (or not) the expand icon\n        // for example, display the expand icon only on every 2nd row\n        // selectableOverride: (row: number, dataContext: any, grid: SlickGrid) => (dataContext.id % 2 === 1)\n      },\n      multiSelect: false,\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: true,\n      },\n      columnPicker: {\n        hideForceFitButton: true\n      },\n      gridMenu: {\n        hideForceFitButton: true\n      },\n      gridHeight: 225,\n      gridWidth: 800,\n      enablePagination: true,\n      pagination: {\n        pageSizes: [5, 10, 15, 20, 25, 50, 75, 100],\n        pageSize: 5\n      },\n      // we can use some Presets, for the example Pagination\n      presets: {\n        pagination: { pageNumber: 2, pageSize: 5 },\n      },\n    };\n\n    this.gridOptions2 = {\n      enableAutoResize: false,\n      enableCellNavigation: true,\n      enableFiltering: true,\n      checkboxSelector: {\n        // optionally change the column index position of the icon (defaults to 0)\n        // columnIndexPosition: 1,\n\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true,\n        applySelectOnAllPages: true, // when clicking \"Select All\", should we apply it to all pages (defaults to true)\n      },\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: false\n      },\n      enableCheckboxSelector: true,\n      enableRowSelection: true,\n      gridHeight: 255,\n      gridWidth: 800,\n      enablePagination: true,\n      pagination: {\n        pageSizes: [5, 10, 15, 20, 25, 50, 75, 100],\n        pageSize: 5\n      },\n      // 1. pre-select some grid row indexes (less recommended, better use the Presets, see below)\n      // preselectedRows: [0, 2],\n\n      // 2. or use the Presets to pre-select some rows\n      presets: {\n        // you can presets row selection here as well, you can choose 1 of the following 2 ways of setting the selection\n        // by their index position in the grid (UI) or by the object IDs, the default is \"dataContextIds\" and if provided it will use it and disregard \"gridRowIndexes\"\n        // the RECOMMENDED is to use \"dataContextIds\" since that will always work even with Pagination, while \"gridRowIndexes\" is only good for 1 page\n        rowSelection: {\n          // gridRowIndexes: [2],           // the row position of what you see on the screen (UI)\n          dataContextIds: [3, 12, 13, 522]  // (recommended) select by your data object IDs\n        }\n      },\n    };\n  }\n\n  prepareData(count: number) {\n    // mock a dataset\n    const mockDataset: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    return mockDataset;\n  }\n\n  goToGrid1FirstPage() {\n    this.aureliaGrid1.paginationService!.goToFirstPage();\n  }\n\n  goToGrid1LastPage() {\n    this.aureliaGrid1.paginationService!.goToLastPage();\n  }\n\n  goToGrid2FirstPage() {\n    this.aureliaGrid2.paginationService!.goToFirstPage();\n  }\n\n  goToGrid2LastPage() {\n    this.aureliaGrid2.paginationService!.goToLastPage();\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  grid1StateChanged(gridStateChanges: GridStateChange) {\n    console.log('Grid State changed:: ', gridStateChanges);\n    console.log('Grid State changed:: ', gridStateChanges.change);\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  grid2StateChanged(gridStateChanges: GridStateChange) {\n    console.log('Grid State changed:: ', gridStateChanges);\n    console.log('Grid State changed:: ', gridStateChanges.change);\n\n    if (gridStateChanges.gridState!.rowSelection) {\n      this.selectedGrid2IDs = (gridStateChanges.gridState!.rowSelection.filteredDataContextIds || []) as number[];\n      this.selectedGrid2IDs = this.selectedGrid2IDs.sort((a, b) => a - b); // sort by ID\n      this.selectedTitles = this.selectedGrid2IDs.map(dataContextId => `Task ${dataContextId}`).join(',');\n      if (this.selectedTitles.length > 293) {\n        this.selectedTitles = this.selectedTitles.substring(0, 293) + '...';\n      }\n    }\n  }\n\n  // Toggle the Pagination of Grid2\n  // IMPORTANT, the Pagination MUST BE CREATED on initial page load before you can start toggling it\n  // Basically you cannot toggle a Pagination that doesn't exist (must created at the time as the grid)\n  isGrid2WithPaginationChanged() {\n    this.aureliaGrid2.paginationService!.togglePaginationVisibility(this.isGrid2WithPagination);\n  }\n\n  onGrid1SelectedRowsChanged(_e: Event, args: any) {\n    const grid = args && args.grid;\n    if (Array.isArray(args.rows)) {\n      this.selectedTitle = args.rows.map((idx: number) => {\n        const item = grid.getDataItem(idx);\n        return item && item.title || '';\n      });\n    }\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_isGrid2WithPagination_dec","_Example10_decorators","_init","customElement","__au2ViewDef","bindable","Example10","__publicField","__runInitializers","aureliaGrid","FieldType","Formatters","Filters","count","mockDataset","i","randomYear","randomMonth","randomDay","randomPercent","gridStateChanges","a","b","dataContextId","args","grid","idx","item","__decoratorStart","__decorateElement"],"mappings":"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"}