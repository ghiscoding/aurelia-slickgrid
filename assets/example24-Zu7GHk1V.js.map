{"version":3,"file":"example24-Zu7GHk1V.js","sources":["../../src/examples/slickgrid/example24.$au.ts","../../src/examples/slickgrid/example24.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example24.scss\";\nexport const name = \"example24\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example24.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleDarkMode()\\\" data-test=\\\"toggle-dark-mode\\\">\\n    <i class=\\\"mdi mdi-theme-light-dark\\\"></i>\\n    <span>Toggle Dark Mode</span>\\n  </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <span class=\\\"context-menu\\\">\\n    <strong>Context Menu:</strong>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" click.trigger=\\\"showContextCommandsAndOptions(false)\\\"\\n            data-test=\\\"context-menu-priority-only-button\\\">\\n      Show Priority Options Only\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" click.trigger=\\\"showContextCommandsAndOptions(true)\\\"\\n            data-test=\\\"context-menu-commands-and-priority-button\\\">\\n      Show Commands & Priority Options\\n    </button>\\n  </span>\\n\\n  <span class=\\\"cell-menu\\\">\\n    <strong>Cell Menu:</strong>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" click.trigger=\\\"showCellMenuCommandsAndOptions(false)\\\"\\n            data-test=\\\"cell-menu-commands-and-options-false-button\\\">\\n      Show Action Commands Only\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" click.trigger=\\\"showCellMenuCommandsAndOptions(true)\\\"\\n            data-test=\\\"cell-menu-commands-and-options-true-button\\\">\\n      Show Actions Commands & Completed Options\\n    </button>\\n  </span>\\n</div>\\n\\n<div class=\\\"row locale\\\">\\n  <div class=\\\"col-12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" click.trigger=\\\"switchLanguage()\\\" data-test=\\\"language-button\\\">\\n      <i class=\\\"mdi mdi-translate\\\"></i>\\n      Switch Language\\n    </button>\\n    <label>Locale:</label>\\n    <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\n      ${selectedLanguage + '.json'}\\n    </span>\\n  </div>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid24\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    instances.bind=\\\"aureliaGrid\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport { I18N } from '@aurelia/i18n';\n// import { TOptions as I18NOptions } from 'i18next';\n\nimport {\n  type AureliaGridInstance,\n  type Column,\n  type ContextMenu,\n  ExtensionName,\n  FieldType,\n  Filters,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\nimport './example24.scss'; // provide custom CSS/SASS styling\nimport { resolve } from 'aurelia';\n\nconst actionFormatter: Formatter = (_row, _cell, _value, _columnDef, dataContext) => {\n  if (dataContext.priority === 3) { // option 3 is High\n    return `<div class=\"cell-menu-dropdown-outline\">Action<i class=\"mdi mdi-chevron-down\"></i></div>`;\n  }\n  return `<div class=\"cell-menu-dropdown-outline disabled\">Action <i class=\"mdi mdi-chevron-down\"></i></div>`;\n};\n\nconst priorityFormatter: Formatter = (_row, _cell, value) => {\n  if (!value) {\n    return '';\n  }\n  let output = '';\n  const count = +(value >= 3 ? 3 : value);\n  const color = count === 3 ? 'red' : (count === 2 ? 'orange' : 'yellow');\n  const icon = `<i class=\"mdi mdi-star ${color}\" aria-hidden=\"true\"></i>`;\n\n  for (let i = 1; i <= count; i++) {\n    output += icon;\n  }\n  return output;\n};\n\nconst priorityExportFormatter: Formatter = (_row, _cell, value, _columnDef, _dataContext, grid) => {\n  if (!value) {\n    return '';\n  }\n  const gridOptions = grid.getOptions() as GridOption;\n  const i18n = gridOptions.i18n;\n  const count = +(value >= 3 ? 3 : value);\n  const key = count === 3 ? 'HIGH' : (count === 2 ? 'MEDIUM' : 'LOW');\n\n  return i18n?.tr(key) ?? '';\n};\n\n// create a custom translate Formatter (typically you would move that a separate file, for separation of concerns)\nconst taskTranslateFormatter: Formatter = (_row, _cell, value, _columnDef, _dataContext, grid: SlickGrid) => {\n  const gridOptions = grid.getOptions() as GridOption;\n  const i18n = gridOptions.i18n;\n\n  return i18n?.tr('TASK_X', { x: value } as any) ?? '';\n};\n\nexport class Example24 {\n  private _darkModeGrid = false;\n  title = 'Example 24: Cell Menu & Context Menu Plugins';\n  subTitle = `Add Cell Menu and Context Menu\n    <ul>\n      <li>This example demonstrates 2 SlickGrid plugins</li>\n      <ol>\n        <li>Using the <b>Slick.Plugins.CellMenu</b> plugin, often used for an Action Menu(s), 1 or more per grid\n          (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/cell-menu\" target=\"_blank\">Wiki docs</a>).\n        </li>\n        <li>Using the <b>Slick.Plugins.ContextMenu</b> plugin, shown after a mouse right+click, only 1 per grid.\n        (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/context-menu\" target=\"_blank\">Wiki docs</a>).\n        </li>\n      </ol>\n      <li>It will also \"autoAdjustDrop\" (bottom/top) and \"autoAlignSide\" (left/right) by default but could be turned off</li>\n      <li>Both plugins have 2 sections, 1st section can have an array of Options (to change value of a field) and 2nd section an array of Commands (execute a command)</li>\n      <li>There are 2 ways to execute a Command/Option</li>\n      <ol>\n        <li>via onCommand/onOptionSelected (use a switch/case to parse command/option and do something with it)</li>\n        <li>via action callback (that can be defined on each command/option)</li>\n      </ol>\n      <li>Use override callback functions to change the properties of show/hide, enable/disable the menu or certain item(s) from the list</li>\n      <ol>\n        <li>These callbacks are: \"menuUsabilityOverride\", \"itemVisibilityOverride\", \"itemUsabilityOverride\"</li>\n        <li>... e.g. in the demo, the \"Action\" Cell Menu is only available when Priority is set to \"High\" via \"menuUsabilityOverride\"</li>\n        <li>... e.g. in the demo, the Context Menu is only available on the first 20 Tasks via \"menuUsabilityOverride\"</li>\n      </ol>\n    </ul>`;\n\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  hideSubTitle = false;\n  selectedLanguage: string;\n\n  constructor(private readonly i18n: I18N = resolve(I18N)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n  }\n\n  get cellMenuInstance() {\n    return this.aureliaGrid?.extensionService.getExtensionInstanceByName(ExtensionName.cellMenu);\n  }\n\n  get contextMenuInstance() {\n    return this.aureliaGrid?.extensionService.getExtensionInstanceByName(ExtensionName.contextMenu);\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.getData(1000);\n  }\n\n  detaching() {\n    document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n    document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      { id: 'id', name: '#', field: 'id', maxWidth: 45, sortable: true, filterable: true },\n      {\n        id: 'title', name: 'Title', field: 'id', nameKey: 'TITLE', minWidth: 100,\n        formatter: taskTranslateFormatter,\n        sortable: true,\n        filterable: true,\n        params: { useFormatterOuputToFilter: true }\n      },\n      {\n        id: 'percentComplete', nameKey: 'PERCENT_COMPLETE', field: 'percentComplete', minWidth: 100,\n        exportWithFormatter: false,\n        sortable: true, filterable: true,\n        filter: { model: Filters.slider, operator: '>=' },\n        formatter: Formatters.percentCompleteBar, type: FieldType.number,\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', minWidth: 100,\n        formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date,\n        filterable: true, filter: { model: Filters.compoundDate }\n      },\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\n      {\n        id: 'priority', nameKey: 'PRIORITY', field: 'priority',\n        exportCustomFormatter: priorityExportFormatter,\n        formatter: priorityFormatter,\n        sortable: true, filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: 1, labelKey: 'LOW' }, { value: 2, labelKey: 'MEDIUM' }, { value: 3, labelKey: 'HIGH' }],\n          model: Filters.singleSelect,\n          enableTranslateLabel: true,\n        }\n      },\n      {\n        id: 'completed', nameKey: 'COMPLETED', field: 'completed',\n        exportCustomFormatter: Formatters.translateBoolean,\n        formatter: Formatters.checkmarkMaterial,\n        sortable: true, filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, labelKey: 'TRUE' }, { value: false, labelKey: 'FALSE' }],\n          model: Filters.singleSelect,\n          enableTranslateLabel: true,\n        }\n      },\n      {\n        id: 'action', name: 'Action', field: 'action', width: 100, maxWidth: 110,\n        excludeFromExport: true,\n        formatter: actionFormatter,\n        cellMenu: {\n          hideCloseButton: false,\n          // you can override the logic of when the menu is usable\n          // for example say that we want to show a menu only when then Priority is set to 'High'.\n          // Note that this ONLY overrides the usability itself NOT the text displayed in the cell,\n          // if you wish to change the cell text (or hide it)\n          // then you SHOULD use it in combination with a custom formatter (actionFormatter) and use the same logic in that formatter\n          menuUsabilityOverride: (args) => {\n            return (args.dataContext.priority === 3); // option 3 is High\n          },\n\n          // when using Translate Service, every translation will have the suffix \"Key\"\n          // else use title without the suffix, for example \"commandTitle\" (no translations) or \"commandTitleKey\" (with translations)\n          commandTitleKey: 'COMMANDS', // optional title, use \"commandTitle\" when not using I18N\n          commandItems: [\n            // array of command item objects, you can also use the \"positionOrder\" that will be used to sort the items in the list\n            {\n              command: 'command2', title: 'Command 2', positionOrder: 62,\n              // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\n              action: (_e, args) => {\n                console.log(args.dataContext, args.column);\n                // action callback.. do something\n              },\n              // only enable command when the task is not completed\n              itemUsabilityOverride: (args) => {\n                return !args.dataContext.completed;\n              }\n            },\n            { command: 'command1', title: 'Command 1', cssClass: 'orange', positionOrder: 61 },\n            {\n              command: 'delete-row', titleKey: 'DELETE_ROW', positionOrder: 64,\n              iconCssClass: 'mdi mdi-close', cssClass: 'red', textCssClass: 'bold',\n              // only show command to 'Delete Row' when the task is not completed\n              itemVisibilityOverride: (args) => {\n                return !args.dataContext.completed;\n              }\n            },\n            // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\n            // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\n            { divider: true, command: '', positionOrder: 63 },\n            // 'divider',\n\n            {\n              command: 'help',\n              titleKey: 'HELP', // use \"title\" without translation and \"titleKey\" with TranslateService\n              iconCssClass: 'mdi mdi-help-circle',\n              positionOrder: 66,\n            },\n            { command: 'something', titleKey: 'DISABLED_COMMAND', disabled: true, positionOrder: 67, },\n            { command: '', divider: true, positionOrder: 98 },\n            {\n              // we can also have multiple nested sub-menus\n              command: 'export', title: 'Exports', positionOrder: 99,\n              commandItems: [\n                { command: 'exports-txt', title: 'Text (tab delimited)' },\n                {\n                  command: 'sub-menu', title: 'Excel', cssClass: 'green', subMenuTitle: 'available formats', subMenuTitleCssClass: 'text-italic orange',\n                  commandItems: [\n                    { command: 'exports-csv', title: 'Excel (csv)' },\n                    { command: 'exports-xlsx', title: 'Excel (xlsx)' },\n                  ]\n                }\n              ]\n            },\n            {\n              command: 'feedback', title: 'Feedback', positionOrder: 100,\n              commandItems: [\n                { command: 'request-update', title: 'Request update from supplier', iconCssClass: 'mdi mdi-star', tooltip: 'this will automatically send an alert to the shipping team to contact the user for an update' },\n                'divider',\n                {\n                  command: 'sub-menu', title: 'Contact Us', iconCssClass: 'mdi mdi-account', subMenuTitle: 'contact us...', subMenuTitleCssClass: 'italic',\n                  commandItems: [\n                    { command: 'contact-email', title: 'Email us', iconCssClass: 'mdi mdi-pencil-outline' },\n                    { command: 'contact-chat', title: 'Chat with us', iconCssClass: 'mdi mdi-message-text-outline' },\n                    { command: 'contact-meeting', title: 'Book an appointment', iconCssClass: 'mdi mdi-coffee' },\n                  ]\n                }\n              ]\n            }\n          ],\n          optionTitleKey: 'CHANGE_COMPLETED_FLAG',\n          optionItems: [\n            { option: true, titleKey: 'TRUE', iconCssClass: 'mdi mdi-check-box-outline' },\n            { option: false, titleKey: 'FALSE', iconCssClass: 'mdi mdi-checkbox-blank-outline' },\n            {\n              option: null, title: 'null', cssClass: 'italic',\n              // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\n              action: () => {\n                // action callback.. do something\n              },\n              // only enable Action menu when the Priority is set to High\n              itemUsabilityOverride: (args) => {\n                return (args.dataContext.priority === 3);\n              },\n              // only show command to 'Delete Row' when the task is not completed\n              itemVisibilityOverride: (args) => {\n                return !args.dataContext.completed;\n              }\n            },\n          ]\n        }\n      },\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      darkMode: this._darkModeGrid,\n      enableCellNavigation: true,\n      enableFiltering: true,\n      enableSorting: true,\n      enableTranslate: true,\n      enableExcelExport: true,\n      excelExportOptions: {\n        exportWithFormatter: true,\n        customColumnWidth: 15,\n\n        // you can customize how the header titles will be styled (defaults to Bold)\n        columnHeaderStyle: { font: { bold: true, italic: true } }\n      },\n      externalResources: [new ExcelExportService()],\n      i18n: this.i18n,\n\n      enableContextMenu: true,\n      enableCellMenu: true,\n\n      // when using the cellMenu, you can change some of the default options and all use some of the callback methods\n      cellMenu: {\n        // all the Cell Menu callback methods (except the action callback)\n        // are available under the grid options as shown below\n        onCommand: (_e, args) => this.executeCommand(_e, args),\n        onOptionSelected: (_e, args) => {\n          // change \"Completed\" property with new option selected from the Cell Menu\n          const dataContext = args?.dataContext;\n          if (dataContext?.hasOwnProperty('completed')) {\n            dataContext.completed = args.item.option;\n            this.aureliaGrid.gridService.updateItem(dataContext);\n          }\n        },\n        onBeforeMenuShow: ((_e, args) => {\n          // for example, you could select the row that the click originated\n          // this.aureliaGrid.gridService.setSelectedRows([args.row]);\n          console.log('Before the Cell Menu is shown', args);\n        }),\n        onBeforeMenuClose: ((_e, args) => console.log('Cell Menu is closing', args)),\n      },\n\n      // load Context Menu structure\n      contextMenu: this.getContextMenuOptions(),\n    };\n  }\n\n  executeCommand(_e: any, args: any) {\n    const command = args.command;\n    const dataContext = args.dataContext;\n\n    switch (command) {\n      case 'contact-email':\n      case 'contact-chat':\n      case 'contact-meeting':\n        alert('Command: ' + args?.command);\n        break;\n      case 'exports-csv':\n      case 'exports-txt':\n      case 'exports-xlsx':\n        alert(`Exporting as ${args.item.title}`);\n        break;\n      case 'command1':\n        alert('Command 1');\n        break;\n      case 'command2':\n        alert('Command 2');\n        break;\n      case 'help':\n        alert('Please help!');\n        break;\n      case 'delete-row':\n        if (confirm(`Do you really want to delete row ${args.row + 1} with ${this.i18n.tr('TASK_X', { x: dataContext.id } as any)}`)) {\n          this.aureliaGrid.dataView.deleteItem(dataContext.id);\n        }\n        break;\n    }\n  }\n\n  getData(count: number): any[] {\n    // mock a dataset\n    const tmpData: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 30);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n\n      tmpData[i] = {\n        id: i,\n        duration: Math.floor(Math.random() * 25) + ' days',\n        percentComplete: Math.floor(Math.random() * 100),\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        priority: i % 3 ? 2 : (i % 5 ? 3 : 1),\n        completed: (i % 4 === 0),\n      };\n    }\n    return tmpData;\n  }\n\n  getContextMenuOptions(): ContextMenu {\n    return {\n      hideCloseButton: false,\n      // optionally and conditionally define when the the menu is usable,\n      // this should be used with a custom formatter to show/hide/disable the menu\n      menuUsabilityOverride: (args) => {\n        const dataContext = args && args.dataContext;\n        return (dataContext.id < 21); // say we want to display the menu only from Task 0 to 20\n      },\n      // which column to show the command list? when not defined it will be shown over all columns\n      commandShownOverColumnIds: ['id', 'title', 'percentComplete', 'start', 'finish', 'completed' /* , 'priority', 'action' */],\n      commandTitleKey: 'COMMANDS', // this title is optional, you could also use \"commandTitle\" when not using I18N\n      commandItems: [\n        { divider: true, command: '', positionOrder: 61 },\n        { command: 'delete-row', titleKey: 'DELETE_ROW', iconCssClass: 'mdi mdi-close', cssClass: 'red', textCssClass: 'bold', positionOrder: 62 },\n        // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\n        // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\n        // 'divider',\n        { divider: true, command: '', positionOrder: 63 },\n        {\n          command: 'help', titleKey: 'HELP', iconCssClass: 'mdi mdi-help-circle', positionOrder: 64,\n          // you can use the 'action' callback and/or subscribe to the 'onCallback' event, they both have the same arguments\n          action: () => {\n            // action callback.. do something\n          },\n          // only show command to 'Help' when the task is Not Completed\n          itemVisibilityOverride: (args) => {\n            const dataContext = args && args.dataContext;\n            return (!dataContext.completed);\n          }\n        },\n        { command: 'something', titleKey: 'DISABLED_COMMAND', disabled: true, positionOrder: 65 },\n        { command: '', divider: true, positionOrder: 98 },\n        {\n          // we can also have multiple nested sub-menus\n          command: 'export', title: 'Exports', positionOrder: 99,\n          commandItems: [\n            { command: 'exports-txt', title: 'Text (tab delimited)' },\n            {\n              command: 'sub-menu', title: 'Excel', cssClass: 'green', subMenuTitle: 'available formats', subMenuTitleCssClass: 'text-italic orange',\n              commandItems: [\n                { command: 'exports-csv', title: 'Excel (csv)' },\n                { command: 'exports-xlsx', title: 'Excel (xlsx)' },\n              ]\n            }\n          ]\n        },\n        {\n          command: 'feedback', title: 'Feedback', positionOrder: 100,\n          commandItems: [\n            { command: 'request-update', title: 'Request update from supplier', iconCssClass: 'mdi mdi-star', tooltip: 'this will automatically send an alert to the shipping team to contact the user for an update' },\n            'divider',\n            {\n              command: 'sub-menu', title: 'Contact Us', iconCssClass: 'mdi mdi-account', subMenuTitle: 'contact us...', subMenuTitleCssClass: 'italic',\n              commandItems: [\n                { command: 'contact-email', title: 'Email us', iconCssClass: 'mdi mdi-pencil-outline' },\n                { command: 'contact-chat', title: 'Chat with us', iconCssClass: 'mdi mdi-message-text-outline' },\n                { command: 'contact-meeting', title: 'Book an appointment', iconCssClass: 'mdi mdi-coffee' },\n              ]\n            }\n          ]\n        }\n      ],\n\n      // Options allows you to edit a column from an option chose a list\n      // for example, changing the Priority value\n      // you can also optionally define an array of column ids that you wish to display this option list (when not defined it will show over all columns)\n      optionTitleKey: 'CHANGE_PRIORITY',\n      optionShownOverColumnIds: ['priority'], // optional, when defined it will only show over the columns (column id) defined in the array\n      optionItems: [\n        {\n          option: 0, title: 'n/a', textCssClass: 'italic',\n          // only enable this option when the task is Not Completed\n          itemUsabilityOverride: (args) => {\n            const dataContext = args && args.dataContext;\n            return (!dataContext.completed);\n          },\n          // you can use the 'action' callback and/or subscribe to the 'onCallback' event, they both have the same arguments\n          action: () => {\n            // action callback.. do something\n          },\n        },\n        { option: 1, iconCssClass: 'mdi mdi-star-outline yellow', titleKey: 'LOW' },\n        { option: 2, iconCssClass: 'mdi mdi-star orange', titleKey: 'MEDIUM' },\n        { option: 3, iconCssClass: 'mdi mdi-star red', titleKey: 'HIGH' },\n        // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\n        // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\n        'divider',\n        // { divider: true, option: '', positionOrder: 3 },\n        {\n          option: 4, title: 'Extreme', iconCssClass: 'mdi mdi-fire', disabled: true,\n          // only shown when the task is Not Completed\n          itemVisibilityOverride: (args) => {\n            const dataContext = args && args.dataContext;\n            return (!dataContext.completed);\n          }\n        },\n        {\n          // we can also have multiple nested sub-menus\n          option: null, title: 'Sub-Options (demo)', subMenuTitleKey: 'CHANGE_PRIORITY', optionItems: [\n            { option: 1, iconCssClass: 'mdi mdi-star-outline yellow', titleKey: 'LOW' },\n            { option: 2, iconCssClass: 'mdi mdi-star orange', titleKey: 'MEDIUM' },\n            { option: 3, iconCssClass: 'mdi mdi-star red', titleKey: 'HIGH' },\n          ]\n        }\n      ],\n      // subscribe to Context Menu\n      onBeforeMenuShow: ((_e, args) => {\n        // for example, you could select the row it was clicked with\n        // grid.setSelectedRows([args.row]); // select the entire row\n        this.aureliaGrid.slickGrid.setActiveCell(args.row, args.cell, false); // select the cell that the click originated\n        console.log('Before the global Context Menu is shown', args);\n      }),\n      onBeforeMenuClose: ((_e, args) => console.log('Global Context Menu is closing', args)),\n\n      // subscribe to Context Menu onCommand event (or use the action callback on each command)\n      onCommand: ((_e, args) => this.executeCommand(_e, args)),\n\n      // subscribe to Context Menu onOptionSelected event (or use the action callback on each option)\n      onOptionSelected: ((_e: any, args: any) => {\n        // change Priority\n        const dataContext = args && args.dataContext;\n        if (dataContext?.hasOwnProperty('priority')) {\n          dataContext.priority = args.item.option;\n          this.aureliaGrid.gridService.updateItem(dataContext);\n        }\n      }),\n    };\n  }\n\n  showContextCommandsAndOptions(showBothList: boolean) {\n    // when showing both Commands/Options, we can just pass an empty array to show over all columns\n    // else show on all columns except Priority\n    const showOverColumnIds = showBothList ? [] : ['id', 'title', 'complete', 'start', 'finish', 'completed', 'action'];\n    this.contextMenuInstance?.setOptions({\n      commandShownOverColumnIds: showOverColumnIds,\n      // hideCommandSection: !showBothList\n    });\n  }\n\n  showCellMenuCommandsAndOptions(showBothList: boolean) {\n    // change via the plugin setOptions\n    this.cellMenuInstance?.setOptions({\n      hideOptionSection: !showBothList\n    });\n\n    // OR find the column, then change the same hide property\n    // var actionColumn = columns.find(function (column) { return column.id === 'action' });\n    // actionColumn.cellMenu.hideOptionSection = !showBothList;\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  toggleDarkMode() {\n    this._darkModeGrid = !this._darkModeGrid;\n    if (this._darkModeGrid) {\n      document.querySelector<HTMLDivElement>('.panel-wm-content')!.classList.add('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'dark';\n    } else {\n      document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n    }\n    this.aureliaGrid.slickGrid?.setOptions({ darkMode: this._darkModeGrid });\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example24_decorators","_init","actionFormatter","_row","_cell","_value","_columnDef","dataContext","priorityFormatter","value","output","count","icon","i","priorityExportFormatter","_dataContext","grid","i18n","key","taskTranslateFormatter","customElement","__au2ViewDef","Example24","resolve","I18N","__publicField","defaultLang","_a","ExtensionName","Filters","Formatters","FieldType","args","ExcelExportService","command","tmpData","randomYear","randomMonth","randomDay","showBothList","showOverColumnIds","nextLanguage","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}