{"version":3,"file":"editors.index-CmyHd4IA.js","sources":["../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editorValidators/textValidator.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/autocompleterEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/checkboxEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/dateEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editorValidators/floatValidator.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editorValidators/integerValidator.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editorValidators/sliderValidator.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/dualInputEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/inputEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/floatEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/integerEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/longTextEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/selectEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/multipleSelectEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/singleSelectEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/sliderEditor.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/editors/editors.index.js"],"sourcesContent":["import { Constants } from '../constants.js';\nexport function textValidator(inputValue, options) {\n    const errorMsg = options.errorMessage;\n    const isRequired = options.required;\n    const minLength = options.minLength;\n    const maxLength = options.maxLength;\n    const operatorConditionalType = options.operatorConditionalType || 'inclusive';\n    const mapValidation = {\n        '{{minLength}}': minLength,\n        '{{maxLength}}': maxLength,\n    };\n    let isValid = true;\n    let outputMsg = '';\n    const inputValueLength = inputValue?.length ?? 0;\n    if (options.validator) {\n        return options.validator(inputValue, options.editorArgs);\n    }\n    // by default the editor is almost always valid (except when it's required but not provided)\n    if (isRequired && inputValue === '') {\n        isValid = false;\n        outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;\n    }\n    else if (minLength !== undefined &&\n        maxLength !== undefined &&\n        ((operatorConditionalType === 'exclusive' && (inputValueLength <= minLength || inputValueLength >= maxLength)) ||\n            (operatorConditionalType === 'inclusive' && (inputValueLength < minLength || inputValueLength > maxLength)))) {\n        // MIN & MAX Length provided\n        // make sure text length is between minLength and maxLength\n        isValid = false;\n        outputMsg =\n            errorMsg ||\n                Constants.VALIDATION_EDITOR_TEXT_LENGTH_BETWEEN.replace(/{{minLength}}|{{maxLength}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (minLength !== undefined &&\n        inputValueLength !== null &&\n        ((operatorConditionalType === 'exclusive' && inputValueLength <= minLength) ||\n            (operatorConditionalType === 'inclusive' && inputValueLength !== null && inputValueLength < minLength))) {\n        // MIN Length ONLY\n        // when text length is shorter than minLength\n        isValid = false;\n        const defaultErrorMsg = operatorConditionalType === 'inclusive'\n            ? Constants.VALIDATION_EDITOR_TEXT_MIN_LENGTH_INCLUSIVE\n            : Constants.VALIDATION_EDITOR_TEXT_MIN_LENGTH;\n        outputMsg = errorMsg || defaultErrorMsg.replace(/{{minLength}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (maxLength !== undefined &&\n        inputValueLength !== null &&\n        ((operatorConditionalType === 'exclusive' && inputValueLength >= maxLength) ||\n            (operatorConditionalType === 'inclusive' && inputValueLength !== null && inputValueLength > maxLength))) {\n        // MAX Length ONLY\n        // when text length is longer than minLength\n        isValid = false;\n        const defaultErrorMsg = operatorConditionalType === 'inclusive'\n            ? Constants.VALIDATION_EDITOR_TEXT_MAX_LENGTH_INCLUSIVE\n            : Constants.VALIDATION_EDITOR_TEXT_MAX_LENGTH;\n        outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxLength}}/gi, (matched) => mapValidation[matched]);\n    }\n    return { valid: isValid, msg: outputMsg };\n}\n//# sourceMappingURL=textValidator.js.map","import autocompleter from 'autocompleter';\nimport { BindingEventService } from '@slickgrid-universal/binding';\nimport { classNameToList, createDomElement, isObject, isPrimitiveValue, setDeepValue, toKebabCase } from '@slickgrid-universal/utils';\nimport { Constants } from './../constants.js';\nimport { FieldType } from '../enums/index.js';\nimport { textValidator } from '../editorValidators/textValidator.js';\nimport { addAutocompleteLoadingByOverridingFetch } from '../commonEditorFilter/commonEditorFilterUtils.js';\nimport { findOrDefault, getDescendantProperty } from '../services/utilities.js';\nimport { SlickEventData } from '../core/index.js';\n// minimum length of chars to type before starting to start querying\nconst MIN_LENGTH = 3;\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class AutocompleterEditor {\n    constructor(args) {\n        this.args = args;\n        this._isValueTouched = false;\n        this._lastTriggeredByClearInput = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        this.forceUserInput = false;\n        /** Final collection displayed in the UI, that is after processing filter/sort/override */\n        this.finalCollection = [];\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this._bindEventService = new BindingEventService();\n        if (this.gridOptions?.translater) {\n            this._translater = this.gridOptions.translater;\n        }\n        // get locales provided by user in forRoot or else use default English locales via the Constants\n        this._locales = this.gridOptions?.locales || Constants.locales;\n        this.init();\n    }\n    /** Getter for the Autocomplete Option */\n    get autocompleterOptions() {\n        return this._autocompleterOptions || {};\n    }\n    /** Getter of the Collection */\n    get collection() {\n        return this.columnEditor?.collection ?? [];\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return this._inputElm;\n    }\n    /** Getter for the Final Collection used in the AutoCompleted Source (this may vary from the \"collection\" especially when providing a customStructure) */\n    get elementCollection() {\n        return this._elementCollection;\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor || {};\n    }\n    /** Getter for the Custom Structure if exist */\n    get customStructure() {\n        let customStructure = this.columnEditor?.customStructure;\n        const columnType = this.columnEditor?.type ?? this.columnDef?.type;\n        if (!customStructure && columnType === FieldType.object && this.columnDef?.dataKey && this.columnDef?.labelKey) {\n            customStructure = {\n                label: this.columnDef.labelKey,\n                value: this.columnDef.dataKey,\n            };\n        }\n        return customStructure;\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    get editorOptions() {\n        return { ...this.gridOptions.defaultEditorOptions?.autocompleter, ...this.columnEditor?.editorOptions };\n    }\n    /** Getter for the Grid Options pulled through the Grid Object */\n    get gridOptions() {\n        return this.grid?.getOptions() ?? {};\n    }\n    /** Kraaden AutoComplete instance */\n    get instance() {\n        return this._instance;\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        this.labelName = this.customStructure?.label ?? 'label';\n        this.valueName = this.customStructure?.value ?? 'value';\n        this.labelPrefixName = this.customStructure?.labelPrefix ?? 'labelPrefix';\n        this.labelSuffixName = this.customStructure?.labelSuffix ?? 'labelSuffix';\n        // always render the DOM element, even if user passed a \"collectionAsync\",\n        let newCollection = this.columnEditor.collection;\n        if (this.columnEditor?.collectionAsync && !newCollection) {\n            newCollection = [];\n        }\n        // const newCollection = this.columnEditor.collection;\n        this.renderDomElement(newCollection);\n        // when having a collectionAsync and a collection that is empty, we'll toggle the Editor to disabled,\n        // it will be re-enabled when we get the collection filled (in slick-vanilla-bundle on method \"updateEditorCollection()\")\n        if (this.disabled || (this.columnEditor?.collectionAsync && Array.isArray(newCollection) && newCollection.length === 0)) {\n            this.disable(true);\n        }\n    }\n    destroy() {\n        this._bindEventService.unbindAll();\n        if (typeof this._instance?.destroy === 'function') {\n            this._instance.destroy();\n        }\n        this._inputElm?.remove?.();\n        this._elementCollection = null;\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._inputElm) {\n            if (isDisabled) {\n                this._inputElm.disabled = true;\n                // clear value when it's newly disabled and not empty\n                const currentValue = this.getValue();\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions && currentValue !== '') {\n                    this.clear(true);\n                }\n            }\n            else {\n                this._inputElm.disabled = false;\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        if (this._inputElm) {\n            this._inputElm.focus();\n            this._inputElm.select();\n        }\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    getValue() {\n        return this._inputElm.value;\n    }\n    setValue(inputValue, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        // if user provided a custom structure, we will serialize the value returned from the object with custom structure\n        this._inputElm.value = inputValue?.hasOwnProperty(this.labelName) ? inputValue[this.labelName] : inputValue;\n        if (isApplyingValue) {\n            this._currentValue = inputValue;\n            this._defaultTextValue = typeof inputValue === 'string' ? inputValue : (inputValue?.[this.labelName] ?? '');\n            this.applyValue(this.args.item, this.serializeValue());\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'system');\n            }\n        }\n    }\n    applyValue(item, state) {\n        let newValue = state;\n        const fieldName = this.columnDef?.field;\n        if (fieldName !== undefined) {\n            // if we have a collection defined, we will try to find the string within the collection and return it\n            if (Array.isArray(this.collection) && this.collection.length > 0) {\n                newValue = findOrDefault(this.collection, (collectionItem) => {\n                    if (collectionItem && isObject(state) && collectionItem.hasOwnProperty(this.valueName)) {\n                        return (collectionItem[this.valueName].toString() ===\n                            (state.hasOwnProperty(this.valueName) && state[this.valueName].toString()));\n                    }\n                    else if (collectionItem && typeof state === 'string' && collectionItem.hasOwnProperty(this.valueName)) {\n                        return collectionItem[this.valueName].toString() === state;\n                    }\n                    return collectionItem?.toString() === state;\n                }, '');\n            }\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const validation = this.validate(null, newValue);\n            newValue = validation?.valid ? newValue : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    isValueChanged() {\n        const elmValue = this._inputElm.value;\n        const lastEventKey = this._lastInputKeyEvent?.key;\n        if (this.columnEditor?.alwaysSaveOnEnterKey && lastEventKey === 'Enter') {\n            return true;\n        }\n        const isValueChanged = !(elmValue === '' && (this._defaultTextValue === null || this._defaultTextValue === undefined)) &&\n            elmValue !== this._defaultTextValue;\n        return this._lastTriggeredByClearInput || isValueChanged;\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (item && fieldName !== undefined) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const data = isComplexObject ? getDescendantProperty(item, fieldName) : item[fieldName];\n            this._currentValue = data;\n            this._originalValue = data;\n            this._defaultTextValue = typeof data === 'string' ? data : (data?.[this.labelName] ?? '');\n            this._inputElm.value = this._defaultTextValue;\n            this._inputElm.select();\n        }\n    }\n    clear(clearByDisableCommand = false) {\n        if (this._inputElm) {\n            this._currentValue = '';\n            this._defaultTextValue = '';\n            this.setValue('', true); // set the input value and also apply the change to the datacontext item\n        }\n        this._isValueTouched = true;\n        this._lastTriggeredByClearInput = true;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n        else {\n            this.save();\n        }\n    }\n    /**\n     * You can reset the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this._originalValue ?? '';\n        if (this._inputElm) {\n            this._currentValue = inputValue;\n            this._defaultTextValue = typeof inputValue === 'string' ? inputValue : (inputValue?.[this.labelName] ?? '');\n            this._inputElm.value = this._defaultTextValue;\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = validation?.valid ?? false;\n        if (this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            const navigateDown = this._lastInputKeyEvent?.key !== 'Enter';\n            this.args.commitChanges(navigateDown);\n        }\n    }\n    serializeValue() {\n        // if you want to add the autocomplete functionality but want the user to be able to input a new option\n        if (this._inputElm && this.editorOptions.forceUserInput) {\n            const minLength = this.editorOptions?.minLength ?? MIN_LENGTH;\n            this._currentValue = this._inputElm.value.length > minLength ? this._inputElm.value : this._currentValue;\n        }\n        // if user provided a custom structure, we will serialize the value returned from the object with custom structure\n        if (this.customStructure &&\n            this._currentValue &&\n            this._currentValue.hasOwnProperty(this.valueName) &&\n            this.columnDef?.type !== FieldType.object &&\n            this.columnEditor?.type !== FieldType.object) {\n            return this._currentValue[this.valueName];\n        }\n        else if (this._currentValue && this._currentValue.value !== undefined) {\n            // when object has a \"value\" property and its column is set as an Object type, we'll return an object with optional custom structure\n            if (this.columnDef?.type === FieldType.object || this.columnEditor?.type === FieldType.object) {\n                return {\n                    [this.labelName]: this._currentValue.label,\n                    [this.valueName]: this._currentValue.value,\n                };\n            }\n            return this._currentValue.value;\n        }\n        // if it falls here it might be that the user provided its own custom item with something else than the regular label/value pair\n        // at this point it's only available when user provide a custom template for the autocomplete renderItem callback\n        return this._currentValue;\n    }\n    validate(_targetElm, inputValue) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        const val = inputValue !== undefined ? inputValue : this._inputElm?.value;\n        return textValidator(val, {\n            editorArgs: this.args,\n            errorMessage: this.columnEditor.errorMessage,\n            minLength: this.columnEditor.minLength,\n            maxLength: this.columnEditor.maxLength,\n            operatorConditionalType: this.columnEditor.operatorConditionalType,\n            required: this.args?.compositeEditorOptions ? false : this.columnEditor.required,\n            validator: this.validator,\n        });\n    }\n    //\n    // protected functions\n    // ------------------\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValue = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValue);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValue);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData(event));\n    }\n    // this function should be protected but for unit tests purposes we'll make it public until a better solution is found\n    // a better solution would be to get the autocomplete DOM element to work with selection but I couldn't find how to do that in Vitest\n    handleSelect(item) {\n        if (item !== undefined) {\n            const selectedItem = item;\n            this._currentValue = selectedItem;\n            this._isValueTouched = true;\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            // when the user defines a \"renderItem\" template, then we assume the user defines his own custom structure of label/value pair\n            // otherwise we know that the autocomplete lib always require a label/value pair, we can pull them directly\n            const hasCustomRenderItemCallback = this.editorOptions?.renderItem ?? false;\n            // prettier-ignore\n            const itemLabel = typeof selectedItem === 'string' ? selectedItem : (hasCustomRenderItemCallback ? selectedItem[this.labelName] : selectedItem.label);\n            this.setValue(itemLabel);\n            if (compositeEditorOptions) {\n                this.handleChangeOnCompositeEditor(null, compositeEditorOptions);\n            }\n            else {\n                this.save();\n            }\n            // if user wants to hook to the \"select\", he can do via this \"onSelect\"\n            // its signature is purposely similar to the \"onSelect\" callback + some extra arguments (row, cell, column, dataContext)\n            if (typeof this.editorOptions.onSelectItem === 'function') {\n                const { row, cell } = this.grid.getActiveCell() || {};\n                this.editorOptions.onSelectItem(item, row, cell, this.args.column, this.args.item);\n            }\n            window.setTimeout(() => (this._lastTriggeredByClearInput = false)); // reset flag after a cycle\n        }\n        return false;\n    }\n    renderRegularItem(item) {\n        const itemLabel = (typeof item === 'string' ? item : (item?.label ?? ''));\n        return createDomElement('div', { textContent: itemLabel || '' });\n    }\n    renderCustomItem(item) {\n        const templateString = this._autocompleterOptions?.renderItem?.templateCallback(item) ?? '';\n        // sanitize any unauthorized html tags like script and others\n        const tmpElm = document.createElement('div');\n        this.grid.applyHtmlCode(tmpElm, templateString);\n        return tmpElm;\n    }\n    renderCollectionItem(item) {\n        const isRenderHtmlEnabled = this.columnEditor?.enableRenderHtml ?? false;\n        const prefixText = item.labelPrefix || '';\n        const labelText = item.label || '';\n        const suffixText = item.labelSuffix || '';\n        const finalText = prefixText + labelText + suffixText;\n        // sanitize any unauthorized html tags like script and others\n        // for the remaining allowed tags we'll permit all attributes\n        const sanitizedText = this.grid.sanitizeHtmlString(finalText) || '';\n        const div = document.createElement('div');\n        div[isRenderHtmlEnabled ? 'innerHTML' : 'textContent'] = sanitizedText;\n        return div;\n    }\n    renderDomElement(collection) {\n        const columnId = this.columnDef?.id ?? '';\n        const placeholder = this.columnEditor?.placeholder ?? '';\n        const title = this.columnEditor?.title ?? '';\n        this._editorInputGroupElm = createDomElement('div', { className: 'autocomplete-container input-group' });\n        const closeButtonGroupElm = createDomElement('span', {\n            className: 'input-group-btn input-group-append',\n            dataset: { clear: '' },\n        });\n        this._clearButtonElm = createDomElement('button', { type: 'button', className: 'btn btn-default btn-clear' });\n        this._clearButtonElm.appendChild(createDomElement('i', { className: 'icon-clear' }));\n        this._inputElm = createDomElement('input', {\n            type: 'text',\n            placeholder,\n            title,\n            autocomplete: 'off',\n            ariaAutoComplete: 'none',\n            className: `autocomplete form-control editor-text input-group-editor editor-${columnId}`,\n            dataset: { input: '' },\n        }, this._editorInputGroupElm);\n        // add an empty <span> in order to add loading spinner styling\n        this._editorInputGroupElm.appendChild(document.createElement('span'));\n        // show clear date button (unless user specifically doesn't want it)\n        if (!this.editorOptions?.hideClearButton) {\n            closeButtonGroupElm.appendChild(this._clearButtonElm);\n            this._editorInputGroupElm.appendChild(closeButtonGroupElm);\n            this._bindEventService.bind(this._clearButtonElm, 'click', () => this.clear());\n        }\n        this._bindEventService.bind(this._inputElm, 'focus', () => this._inputElm?.select());\n        this._bindEventService.bind(this._inputElm, 'keydown', ((event) => {\n            this._lastInputKeyEvent = event;\n            if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'Home' || event.key === 'End') {\n                event.stopImmediatePropagation();\n            }\n            // in case the user wants to save even an empty value,\n            // we need to subscribe to the onKeyDown event for that use case and clear the current value\n            if (event.key === 'Enter' && event.target.value === '' && this.columnEditor.alwaysSaveOnEnterKey) {\n                this._currentValue = null;\n            }\n        }));\n        // assign the collection to a temp variable before filtering/sorting the collection\n        let finalCollection = collection;\n        // user could also override the collection\n        if (finalCollection && this.columnEditor?.collectionOverride) {\n            const overrideArgs = {\n                column: this.columnDef,\n                dataContext: this.dataContext,\n                grid: this.grid,\n                originalCollections: this.collection,\n            };\n            if (this.args.compositeEditorOptions) {\n                const { formValues, modalType } = this.args.compositeEditorOptions;\n                overrideArgs.compositeEditorOptions = { formValues, modalType };\n            }\n            finalCollection = this.columnEditor.collectionOverride(finalCollection, overrideArgs);\n        }\n        // keep reference of the final collection displayed in the UI\n        if (finalCollection) {\n            this.finalCollection = finalCollection;\n        }\n        // the kradeen autocomplete lib only works with label/value pair, make sure that our array is in accordance\n        if (Array.isArray(finalCollection)) {\n            if (this.collection.every((x) => isPrimitiveValue(x))) {\n                // when detecting an array of primitives, we have to remap it to an array of value/pair objects\n                finalCollection = finalCollection.map((c) => ({ label: c, value: c }));\n            }\n            else {\n                // user might provide its own custom structures, if so remap them as the new label/value pair\n                finalCollection = finalCollection.map((item) => ({\n                    label: item?.[this.labelName],\n                    value: item?.[this.valueName],\n                    labelPrefix: item?.[this.labelPrefixName] ?? '',\n                    labelSuffix: item?.[this.labelSuffixName] ?? '',\n                }));\n            }\n            // keep the final source collection used in the AutoComplete as reference\n            this._elementCollection = finalCollection;\n        }\n        // merge custom autocomplete options with default basic options\n        this._autocompleterOptions = {\n            input: this._inputElm,\n            debounceWaitMs: 200,\n            className: `slick-autocomplete ${this.editorOptions?.className ?? ''}`.trim(),\n            emptyMsg: this.gridOptions.enableTranslate && this._translater?.translate\n                ? this._translater.translate('NO_ELEMENTS_FOUND')\n                : (this._locales?.TEXT_NO_ELEMENTS_FOUND ?? 'No elements found'),\n            customize: (_input, _inputRect, container) => {\n                container.style.width = ''; // unset width that was set internally by the Autopleter lib\n            },\n            onSelect: this.handleSelect.bind(this),\n            ...this.editorOptions,\n        };\n        // add dark mode CSS class when enabled\n        if (this.gridOptions?.darkMode) {\n            this._autocompleterOptions.className += ' slick-dark-mode';\n        }\n        this.autocompleterOptions.className = classNameToList(this.autocompleterOptions.className).join(' ');\n        // \"render\" callback overriding\n        if (this._autocompleterOptions.renderItem?.layout) {\n            // when \"renderItem\" is defined, we need to add our custom style CSS classes & custom item renderer\n            this._autocompleterOptions.className += ` autocomplete-custom-${toKebabCase(this._autocompleterOptions.renderItem.layout)}`;\n            this._autocompleterOptions.render = this.renderCustomItem.bind(this);\n        }\n        else if (Array.isArray(collection)) {\n            // we'll use our own renderer so that it works with label prefix/suffix and also with html rendering when enabled\n            this._autocompleterOptions.render = this._autocompleterOptions.render?.bind(this) ?? this.renderCollectionItem.bind(this);\n        }\n        else if (!this._autocompleterOptions.render) {\n            // when no render callback is defined, we still need to define our own renderer for regular item\n            // because we accept string array but the Kraaden autocomplete doesn't by default and we can change that\n            this._autocompleterOptions.render = this.renderRegularItem.bind(this);\n        }\n        // when user passes it's own autocomplete options\n        // we still need to provide our own \"select\" callback implementation\n        if (this._autocompleterOptions?.fetch) {\n            // add loading class by overriding user's fetch method\n            addAutocompleteLoadingByOverridingFetch(this._inputElm, this._autocompleterOptions);\n            // create the Kraaden AutoComplete\n            this._instance = autocompleter(this._autocompleterOptions);\n        }\n        else {\n            this._instance = autocompleter({\n                ...this._autocompleterOptions,\n                fetch: (searchTerm, updateCallback) => {\n                    if (finalCollection) {\n                        // you can also use AJAX requests instead of preloaded data\n                        // also at this point our collection was already modified, by the previous map, to have the \"label\" property (unless it's a string)\n                        updateCallback(finalCollection.filter((c) => {\n                            const label = (typeof c === 'string' ? c : c?.label) || '';\n                            return label.toLowerCase().includes(searchTerm.toLowerCase());\n                        }));\n                    }\n                },\n            });\n        }\n        this.args.container.appendChild(this._editorInputGroupElm);\n        if (!this.args.compositeEditorOptions) {\n            window.setTimeout(() => this.focus(), 50);\n        }\n    }\n}\n//# sourceMappingURL=autocompleterEditor.js.map","import { BindingEventService } from '@slickgrid-universal/binding';\nimport { createDomElement, setDeepValue, toSentenceCase } from '@slickgrid-universal/utils';\nimport { Constants } from './../constants.js';\nimport { getDescendantProperty } from '../services/utilities.js';\nimport { SlickEventData } from '../core/index.js';\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class CheckboxEditor {\n    constructor(args) {\n        this.args = args;\n        this._isValueTouched = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = (this.grid.getOptions() || {});\n        this._bindEventService = new BindingEventService();\n        this.init();\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor || {};\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return this._input;\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        const columnId = this.columnDef?.id ?? '';\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        this._checkboxContainerElm = createDomElement('div', { className: `checkbox-editor-container editor-${columnId}` });\n        this._input = createDomElement('input', {\n            type: 'checkbox',\n            value: 'true',\n            ariaLabel: this.columnEditor?.ariaLabel ?? `${toSentenceCase(columnId + '')} Checkbox Editor`,\n            className: `editor-checkbox editor-${columnId}`,\n            title: this.columnEditor?.title ?? '',\n        });\n        const cellContainer = this.args?.container;\n        if (cellContainer && typeof cellContainer.appendChild === 'function') {\n            if (compositeEditorOptions) {\n                this._checkboxContainerElm.appendChild(this._input);\n                cellContainer.appendChild(this._checkboxContainerElm);\n            }\n            else {\n                cellContainer.appendChild(this._input);\n            }\n        }\n        // make the checkbox editor act like a regular checkbox that commit the value on click\n        if (this.hasAutoCommitEdit && !compositeEditorOptions) {\n            this._bindEventService.bind(this._input, 'click', () => {\n                this._isValueTouched = true;\n                this.save();\n            });\n        }\n        if (compositeEditorOptions) {\n            this._bindEventService.bind(this._input, 'change', ((event) => {\n                this._isValueTouched = true;\n                this.handleChangeOnCompositeEditor(event, compositeEditorOptions);\n            }));\n        }\n        else {\n            this.focus();\n        }\n    }\n    destroy() {\n        this._bindEventService.unbindAll();\n        this._input?.remove?.();\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._input) {\n            if (isDisabled) {\n                this._input.setAttribute('disabled', 'disabled');\n                this._checkboxContainerElm.classList.add('disabled');\n                // clear checkbox when it's newly disabled and not empty\n                const currentValue = this.getValue();\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions && currentValue !== false) {\n                    this.reset(false, true, true);\n                }\n            }\n            else {\n                this._input.removeAttribute('disabled');\n                this._checkboxContainerElm.classList.remove('disabled');\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        this._input?.focus();\n    }\n    /** pre-click, when enabled, will simply toggle the checkbox without requiring to double-click */\n    preClick() {\n        if (this._input) {\n            this._input.checked = !this._input.checked;\n        }\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    getValue() {\n        return this._input?.checked ?? false;\n    }\n    setValue(val, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        const isChecked = val ? true : false;\n        if (this._input) {\n            this._input.checked = isChecked;\n        }\n        if (isApplyingValue) {\n            this.applyValue(this.args.item, this.serializeValue());\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'system');\n            }\n        }\n    }\n    applyValue(item, state) {\n        const fieldName = this.columnDef?.field;\n        if (fieldName !== undefined) {\n            const isComplexObject = fieldName?.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const validation = this.validate(null, state);\n            const newValue = validation && validation.valid ? state : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    isValueChanged() {\n        return this.serializeValue() !== this._originalValue;\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (item && fieldName !== undefined && this._input) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const value = isComplexObject ? getDescendantProperty(item, fieldName) : item[fieldName];\n            this._originalValue = value;\n            this._input.checked = !!this._originalValue;\n        }\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this._originalValue ?? false;\n        if (this._input) {\n            this._originalValue = inputValue;\n            this._input.checked = !!inputValue;\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = (validation && validation.valid) || false;\n        if (this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            this.args.commitChanges();\n        }\n    }\n    serializeValue() {\n        return this._input?.checked ?? false;\n    }\n    validate(_targetElm, inputValue) {\n        const isRequired = this.args?.compositeEditorOptions ? false : this.columnEditor.required;\n        const isChecked = inputValue !== undefined ? inputValue : this._input?.checked;\n        const errorMsg = this.columnEditor.errorMessage;\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        if (this.validator) {\n            return this.validator(isChecked, this.args);\n        }\n        // by default the editor is almost always valid (except when it's required but not provided)\n        if (isRequired && !isChecked) {\n            return {\n                valid: false,\n                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD,\n            };\n        }\n        return {\n            valid: true,\n            msg: null,\n        };\n    }\n    // --\n    // protected functions\n    // ------------------\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValue = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValue);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValue);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData(event));\n    }\n}\n//# sourceMappingURL=checkboxEditor.js.map","import { parse } from '@formkit/tempo';\nimport { BindingEventService } from '@slickgrid-universal/binding';\nimport { createDomElement, emptyElement, extend, setDeepValue } from '@slickgrid-universal/utils';\nimport VanillaCalendar from 'vanilla-calendar-pro';\nimport { Constants } from './../constants.js';\nimport { FieldType } from '../enums/index.js';\nimport { getDescendantProperty } from './../services/utilities.js';\nimport { SlickEventData } from '../core/index.js';\nimport { resetDatePicker, setPickerDates } from '../commonEditorFilter/commonEditorFilterUtils.js';\nimport { formatDateByFieldType, mapTempoDateFormatWithFieldType } from '../services/dateUtils.js';\n/*\n * An example of a date picker editor using Vanilla-Calendar-Pro\n */\nexport class DateEditor {\n    constructor(args) {\n        this.args = args;\n        this._isValueTouched = false;\n        this._lastClickIsDate = false;\n        this._lastTriggeredByClearDate = false;\n        this.hasTimePicker = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = (this.grid.getOptions() || {});\n        if (this.gridOptions?.translater) {\n            this._translaterService = this.gridOptions.translater;\n        }\n        this._bindEventService = new BindingEventService();\n        this.init();\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor || {};\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return this._inputElm;\n    }\n    /** Get options passed to the editor by the user */\n    get editorOptions() {\n        return { ...this.gridOptions.defaultEditorOptions?.date, ...this.columnEditor?.editorOptions };\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    get pickerOptions() {\n        return this._pickerMergedOptions;\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    async init() {\n        if (this.args && this.columnDef) {\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            const columnId = this.columnDef?.id ?? '';\n            const gridOptions = this.args.grid.getOptions() || {};\n            this.defaultDate = this.args.item?.[this.columnDef.field];\n            const outputFieldType = this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateUtc;\n            const outputFormat = mapTempoDateFormatWithFieldType(outputFieldType);\n            const currentLocale = this._translaterService?.getCurrentLanguage?.() || gridOptions.locale || 'en';\n            // add the time picker when format is UTC (TZ - ISO8601) or has the 'h' (meaning hours)\n            if (outputFormat && (outputFormat === 'ISO8601' || outputFormat.toLowerCase().includes('h'))) {\n                this.hasTimePicker = true;\n            }\n            const pickerFormat = mapTempoDateFormatWithFieldType(this.hasTimePicker ? FieldType.dateTimeIsoAM_PM : FieldType.dateIso);\n            const pickerOptions = {\n                input: true,\n                jumpToSelectedDate: true,\n                sanitizer: (dirtyHtml) => this.grid.sanitizeHtmlString(dirtyHtml),\n                toggleSelected: false,\n                actions: {\n                    clickDay: () => {\n                        this._lastClickIsDate = true;\n                    },\n                    changeToInput: (_e, self) => {\n                        if (self.HTMLInputElement) {\n                            let selectedDate = '';\n                            if (self.selectedDates[0]) {\n                                selectedDate = self.selectedDates[0];\n                                self.HTMLInputElement.value = formatDateByFieldType(self.selectedDates[0], undefined, outputFieldType);\n                            }\n                            else {\n                                self.HTMLInputElement.value = '';\n                            }\n                            if (selectedDate && this.hasTimePicker) {\n                                const tempoDate = parse(selectedDate, pickerFormat);\n                                tempoDate.setHours(+(self.selectedHours || 0));\n                                tempoDate.setMinutes(+(self.selectedMinutes || 0));\n                                self.HTMLInputElement.value = formatDateByFieldType(tempoDate, undefined, outputFieldType);\n                            }\n                            if (this._lastClickIsDate) {\n                                this.handleOnDateChange();\n                                self.hide();\n                            }\n                        }\n                    },\n                },\n                settings: {\n                    lang: currentLocale,\n                    iso8601: false,\n                    visibility: {\n                        theme: this.gridOptions?.darkMode ? 'dark' : 'light',\n                        positionToInput: 'auto',\n                        weekend: false,\n                    },\n                },\n            };\n            // add the time picker when format includes time (hours/minutes)\n            if (this.hasTimePicker) {\n                pickerOptions.settings.selection = {\n                    time: 24,\n                };\n            }\n            // merge options with optional user's custom options\n            this._pickerMergedOptions = extend(true, {}, pickerOptions, { settings: this.editorOptions, type: 'default' });\n            const inputCssClasses = `.editor-text.date-picker.editor-${columnId}.form-control.input-group-editor`;\n            this._editorInputGroupElm = createDomElement('div', { className: 'vanilla-picker input-group' });\n            const closeButtonGroupElm = createDomElement('span', {\n                className: 'input-group-btn input-group-append',\n                dataset: { clear: '' },\n            });\n            this._clearButtonElm = createDomElement('button', { type: 'button', className: 'btn btn-default btn-clear' });\n            this._clearButtonElm.appendChild(createDomElement('i', { className: 'icon-clear' }));\n            this._inputElm = createDomElement('input', {\n                placeholder: this.columnEditor?.placeholder ?? '',\n                title: (this.columnEditor && this.columnEditor.title) || '',\n                className: inputCssClasses.replace(/\\./g, ' '),\n                dataset: { input: '', defaultdate: this.defaultDate },\n                readOnly: this.columnEditor.editorOptions?.allowInput === true ? false : true,\n            }, this._editorInputGroupElm);\n            this.args.container.appendChild(this._editorInputGroupElm);\n            // show clear date button (unless user specifically doesn't want it)\n            if (!this.columnEditor.editorOptions?.hideClearButton) {\n                closeButtonGroupElm.appendChild(this._clearButtonElm);\n                this._editorInputGroupElm.appendChild(closeButtonGroupElm);\n                this._bindEventService.bind(this._clearButtonElm, 'click', () => {\n                    this.clear();\n                    this.handleOnDateChange();\n                });\n            }\n            this._bindEventService.bind(this._inputElm, 'keydown', ((event) => {\n                if (this.columnEditor.editorOptions?.allowInput !== true) {\n                    return;\n                }\n                this._isValueTouched = true;\n                this._lastInputKeyEvent = event;\n                if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'Home' || event.key === 'End') {\n                    event.stopImmediatePropagation();\n                }\n            }));\n            queueMicrotask(() => {\n                this.calendarInstance = new VanillaCalendar(this._inputElm, this._pickerMergedOptions);\n                this.calendarInstance.init();\n                if (!compositeEditorOptions) {\n                    this.show();\n                    this.focus();\n                }\n                if (this.calendarInstance) {\n                    setPickerDates(this.columnEditor, this._inputElm, this.calendarInstance, {\n                        columnDef: this.columnDef,\n                        newVal: this.defaultDate,\n                        updatePickerUI: true,\n                    });\n                }\n            });\n        }\n    }\n    destroy() {\n        queueMicrotask(() => {\n            this.hide();\n            this.calendarInstance?.destroy();\n            emptyElement(this._editorInputGroupElm);\n            emptyElement(this._inputElm);\n            this._editorInputGroupElm?.remove();\n            this._inputElm?.remove();\n        });\n        this._bindEventService.unbindAll();\n    }\n    clear() {\n        this._lastTriggeredByClearDate = true;\n        if (this.calendarInstance) {\n            resetDatePicker(this.calendarInstance);\n        }\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._inputElm) {\n            if (isDisabled) {\n                this._inputElm.setAttribute('disabled', 'disabled');\n                this._clearButtonElm.disabled = true;\n                // clear picker when it's newly disabled and not empty\n                const currentValue = this.getValue();\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions && currentValue !== '') {\n                    this.reset('', true, true);\n                }\n            }\n            else {\n                this._inputElm.removeAttribute('disabled');\n                this._clearButtonElm.disabled = false;\n            }\n        }\n    }\n    /**\n     * Dynamically change an Editor option, this is especially useful with Composite Editor\n     * since this is the only way to change option after the Editor is created (for example dynamically change \"minDate\" or another Editor)\n     * @param {string} optionName\n     * @param {newValue} newValue\n     */\n    changeEditorOption(optionName, newValue) {\n        if (!this.columnEditor.editorOptions) {\n            this.columnEditor.editorOptions = {};\n        }\n        this.columnEditor.editorOptions[optionName] = newValue;\n        this._pickerMergedOptions = extend(true, {}, this._pickerMergedOptions, { settings: { [optionName]: newValue } });\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        this.show();\n        this._inputElm?.focus();\n    }\n    hide() {\n        this.calendarInstance?.hide();\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (!isCompositeEditor && this.calendarInstance) {\n            this.calendarInstance.show();\n        }\n        else if (isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    getValue() {\n        return this._inputElm.value;\n    }\n    setValue(val, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        if (this.calendarInstance) {\n            setPickerDates(this.columnEditor, this._inputElm, this.calendarInstance, {\n                columnDef: this.columnDef,\n                newVal: val,\n                updatePickerUI: true,\n            });\n        }\n        if (isApplyingValue) {\n            this.applyValue(this.args.item, this.serializeValue());\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                this.handleChangeOnCompositeEditor(compositeEditorOptions, 'system');\n            }\n        }\n    }\n    applyValue(item, state) {\n        const fieldName = this.columnDef?.field;\n        if (this.columnDef && fieldName !== undefined) {\n            const saveFieldType = this.columnDef.saveOutputType || this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateUtc;\n            const outputFieldType = this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateUtc;\n            const isComplexObject = fieldName.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const validation = this.validate(null, state);\n            const newValue = state && validation?.valid ? formatDateByFieldType(state, outputFieldType, saveFieldType) : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName;\n                setDeepValue(item, objectPath, newValue);\n            }\n            else {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    isValueChanged() {\n        let isChanged = false;\n        const elmDateStr = this.getValue();\n        const lastEventKey = this._lastInputKeyEvent?.key;\n        if (this.columnEditor.editorOptions?.allowInput === true && this.columnEditor?.alwaysSaveOnEnterKey && lastEventKey === 'Enter') {\n            return true;\n        }\n        if (this.columnDef) {\n            isChanged =\n                this._lastTriggeredByClearDate || (!(elmDateStr === '' && this._originalDate === '') && elmDateStr !== this._originalDate);\n        }\n        return isChanged;\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (item && this.columnDef && fieldName !== undefined) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const value = isComplexObject ? getDescendantProperty(item, fieldName) : item[fieldName];\n            const inputFieldType = this.columnEditor.type || this.columnDef?.type || FieldType.dateIso;\n            const outputFieldType = this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateIso;\n            const formattedDate = formatDateByFieldType(value, inputFieldType, outputFieldType);\n            this._originalDate = formattedDate !== '' ? value : '';\n            this._inputElm.value = formattedDate;\n        }\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this._originalDate ?? '';\n        if (this.calendarInstance) {\n            this._originalDate = inputValue;\n            this.calendarInstance.settings.selected.dates = [inputValue];\n            if (inputValue) {\n                setPickerDates(this.columnEditor, this._inputElm, this.calendarInstance, {\n                    columnDef: this.columnDef,\n                    newVal: inputValue,\n                });\n            }\n            else {\n                resetDatePicker(this.calendarInstance);\n            }\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = validation?.valid ?? false;\n        if (this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            this.args.commitChanges();\n        }\n    }\n    serializeValue() {\n        const domValue = this.getValue();\n        if (!domValue) {\n            return '';\n        }\n        return domValue;\n    }\n    validate(_targetElm, inputValue) {\n        const isRequired = this.args?.compositeEditorOptions ? false : this.columnEditor.required;\n        const elmValue = inputValue ?? this._inputElm?.value;\n        const errorMsg = this.columnEditor.errorMessage;\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        if (this.validator) {\n            return this.validator(elmValue, this.args);\n        }\n        // by default the editor is almost always valid (except when it's required but not provided)\n        if (isRequired && elmValue === '') {\n            return { valid: false, msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD };\n        }\n        return { valid: true, msg: null };\n    }\n    //\n    // protected functions\n    // ------------------\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleOnDateChange() {\n        this._isValueTouched = true;\n        if (this.args) {\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions) {\n                this.handleChangeOnCompositeEditor(compositeEditorOptions);\n            }\n            else {\n                this.save();\n            }\n        }\n        window.setTimeout(() => (this._lastTriggeredByClearDate = false)); // reset flag after a cycle\n    }\n    handleChangeOnCompositeEditor(compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValue = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValue);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValue);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData());\n    }\n}\n//# sourceMappingURL=dateEditor.js.map","import { Constants } from '../constants.js';\nexport function floatValidator(inputValue, options) {\n    const floatNumber = !isNaN(inputValue) ? parseFloat(inputValue) : null;\n    const decPlaces = options.decimal || 0;\n    const isRequired = options.required;\n    const minValue = options.minValue;\n    const maxValue = options.maxValue;\n    const operatorConditionalType = options.operatorConditionalType || 'inclusive';\n    const errorMsg = options.errorMessage;\n    const mapValidation = {\n        '{{minValue}}': minValue,\n        '{{maxValue}}': maxValue,\n        '{{minDecimal}}': 0,\n        '{{maxDecimal}}': decPlaces,\n    };\n    let isValid = true;\n    let outputMsg = '';\n    if (typeof options.validator === 'function') {\n        return options.validator(inputValue, options.editorArgs);\n    }\n    else if (isRequired && inputValue === '') {\n        isValid = false;\n        outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;\n    }\n    else if (inputValue !== '' && (isNaN(inputValue) || (decPlaces === 0 && !/^[-+]?(\\d*(\\.)?(\\d)*)$/.test(inputValue)))) {\n        // when decimal value is 0 (which is the default), we accept 0 or more decimal values\n        isValid = false;\n        outputMsg = errorMsg || Constants.VALIDATION_EDITOR_VALID_NUMBER;\n    }\n    else if (minValue !== undefined &&\n        maxValue !== undefined &&\n        floatNumber !== null &&\n        ((operatorConditionalType === 'exclusive' && (floatNumber <= +minValue || floatNumber >= +maxValue)) ||\n            (operatorConditionalType === 'inclusive' && (floatNumber < +minValue || floatNumber > +maxValue)))) {\n        // MIN & MAX Values provided\n        // when decimal value is bigger than 0, we only accept the decimal values as that value set\n        // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n        isValid = false;\n        outputMsg =\n            errorMsg ||\n                Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (minValue !== undefined &&\n        floatNumber !== null &&\n        ((operatorConditionalType === 'exclusive' && floatNumber <= +minValue) ||\n            (operatorConditionalType === 'inclusive' && floatNumber < +minValue))) {\n        // MIN VALUE ONLY\n        // when decimal value is bigger than 0, we only accept the decimal values as that value set\n        // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n        isValid = false;\n        const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_NUMBER_MIN_INCLUSIVE : Constants.VALIDATION_EDITOR_NUMBER_MIN;\n        outputMsg = errorMsg || defaultErrorMsg.replace(/{{minValue}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (maxValue !== undefined &&\n        floatNumber !== null &&\n        ((operatorConditionalType === 'exclusive' && floatNumber >= +maxValue) ||\n            (operatorConditionalType === 'inclusive' && floatNumber > +maxValue))) {\n        // MAX VALUE ONLY\n        // when decimal value is bigger than 0, we only accept the decimal values as that value set\n        // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n        isValid = false;\n        const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_NUMBER_MAX_INCLUSIVE : Constants.VALIDATION_EDITOR_NUMBER_MAX;\n        outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxValue}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (decPlaces > 0 && !new RegExp(`^[-+]?(\\\\d*(\\\\.)?(\\\\d){0,${decPlaces}})$`).test(inputValue)) {\n        // when decimal value is bigger than 0, we only accept the decimal values as that value set\n        // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n        isValid = false;\n        outputMsg =\n            errorMsg ||\n                Constants.VALIDATION_EDITOR_DECIMAL_BETWEEN.replace(/{{minDecimal}}|{{maxDecimal}}/gi, (matched) => mapValidation[matched]);\n    }\n    return { valid: isValid, msg: outputMsg };\n}\n//# sourceMappingURL=floatValidator.js.map","import { Constants } from '../constants.js';\nexport function integerValidator(inputValue, options) {\n    let intNumber = !isNaN(inputValue) ? parseInt(inputValue, 10) : null;\n    if (intNumber !== null && isNaN(intNumber)) {\n        intNumber = null;\n    }\n    const errorMsg = options.errorMessage;\n    const isRequired = options.required;\n    const minValue = options.minValue;\n    const maxValue = options.maxValue;\n    const operatorConditionalType = options.operatorConditionalType || 'inclusive';\n    const mapValidation = {\n        '{{minValue}}': minValue,\n        '{{maxValue}}': maxValue,\n    };\n    let isValid = true;\n    let outputMsg = '';\n    if (options.validator) {\n        return options.validator(inputValue, options.editorArgs);\n    }\n    else if (isRequired && inputValue === '') {\n        isValid = false;\n        outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;\n    }\n    else if (inputValue !== '' && (isNaN(inputValue) || !/^[+-]?\\d+$/.test(inputValue))) {\n        isValid = false;\n        outputMsg = errorMsg || Constants.VALIDATION_EDITOR_VALID_INTEGER;\n    }\n    else if (minValue !== undefined &&\n        maxValue !== undefined &&\n        intNumber !== null &&\n        ((operatorConditionalType === 'exclusive' && (intNumber <= +minValue || intNumber >= +maxValue)) ||\n            (operatorConditionalType === 'inclusive' && (intNumber < +minValue || intNumber > +maxValue)))) {\n        // MIN & MAX Values provided (between)\n        // when decimal value is bigger than 0, we only accept the decimal values as that value set\n        // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n        isValid = false;\n        outputMsg =\n            errorMsg ||\n                Constants.VALIDATION_EDITOR_INTEGER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (minValue !== undefined &&\n        intNumber !== null &&\n        ((operatorConditionalType === 'exclusive' && intNumber <= +minValue) ||\n            (operatorConditionalType === 'inclusive' && intNumber !== null && intNumber < +minValue))) {\n        // MIN VALUE ONLY\n        // when decimal value has to be higher then provided minValue\n        isValid = false;\n        const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_INTEGER_MIN_INCLUSIVE : Constants.VALIDATION_EDITOR_INTEGER_MIN;\n        outputMsg = errorMsg || defaultErrorMsg.replace(/{{minValue}}/gi, (matched) => mapValidation[matched]);\n    }\n    else if (maxValue !== undefined &&\n        intNumber !== null &&\n        ((operatorConditionalType === 'exclusive' && intNumber >= +maxValue) ||\n            (operatorConditionalType === 'inclusive' && intNumber !== null && intNumber > +maxValue))) {\n        // MAX VALUE ONLY\n        // when decimal value has to be lower then provided maxValue\n        isValid = false;\n        const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_INTEGER_MAX_INCLUSIVE : Constants.VALIDATION_EDITOR_INTEGER_MAX;\n        outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxValue}}/gi, (matched) => mapValidation[matched]);\n    }\n    return { valid: isValid, msg: outputMsg };\n}\n//# sourceMappingURL=integerValidator.js.map","import { Constants } from '../constants.js';\nexport function sliderValidator(inputValue, options) {\n    const isRequired = options.required;\n    const minValue = options.minValue;\n    const maxValue = options.maxValue;\n    const errorMsg = options.errorMessage;\n    const mapValidation = {\n        '{{minValue}}': minValue,\n        '{{maxValue}}': maxValue,\n    };\n    if (options.validator) {\n        return options.validator(inputValue, options.editorArgs);\n    }\n    else if (isRequired && inputValue === '') {\n        return {\n            valid: false,\n            msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD,\n        };\n    }\n    else if (minValue !== undefined && maxValue !== undefined && inputValue !== null && (inputValue < minValue || inputValue > maxValue)) {\n        // when decimal value is bigger than 0, we only accept the decimal values as that value set\n        // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals\n        return {\n            valid: false,\n            msg: errorMsg ||\n                Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, (matched) => {\n                    return mapValidation[matched];\n                }),\n        };\n    }\n    return { valid: true, msg: null };\n}\n//# sourceMappingURL=sliderValidator.js.map","import { BindingEventService } from '@slickgrid-universal/binding';\nimport { createDomElement, setDeepValue, toSentenceCase } from '@slickgrid-universal/utils';\nimport { getDescendantProperty } from '../services/utilities.js';\nimport { floatValidator, integerValidator, textValidator } from '../editorValidators/index.js';\nimport { SlickEventData, SlickEventHandler } from '../core/index.js';\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class DualInputEditor {\n    constructor(args) {\n        this.args = args;\n        this._isValueSaveCalled = false;\n        this._isLeftValueTouched = false;\n        this._isRightValueTouched = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = (this.grid.getOptions() || {});\n        this._eventHandler = new SlickEventHandler();\n        this._bindEventService = new BindingEventService();\n        this.init();\n        this._eventHandler.subscribe(this.grid.onValidationError, () => (this._isValueSaveCalled = true));\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor || {};\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return { leftInput: this._leftInput, rightInput: this._rightInput };\n    }\n    get editorParams() {\n        return this.columnEditor.params || {};\n    }\n    get eventHandler() {\n        return this._eventHandler;\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    get isValueSaveCalled() {\n        return this._isValueSaveCalled;\n    }\n    /** Get the Shared Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        if (!this.editorParams ||\n            !this.editorParams.leftInput ||\n            !this.editorParams.leftInput.field ||\n            !this.editorParams.rightInput ||\n            !this.editorParams.rightInput.field) {\n            throw new Error(`[Slickgrid-Universal] Please make sure that your Combo Input Editor has params defined with \"leftInput\" and \"rightInput\" (example: { editor: { model: Editors.comboInput, params: { leftInput: { field: 'firstName' }, { rightSide: { field: 'lastName' } }}}`);\n        }\n        this._leftFieldName = this.editorParams.leftInput?.field;\n        this._rightFieldName = this.editorParams.rightInput?.field;\n        this._leftInput = this.createInput('leftInput');\n        this._rightInput = this.createInput('rightInput');\n        const containerElm = this.args?.container;\n        if (containerElm && typeof containerElm.appendChild === 'function') {\n            containerElm.appendChild(this._leftInput);\n            containerElm.appendChild(this._rightInput);\n        }\n        this._bindEventService.bind(this._leftInput, 'keydown', ((event) => this.handleKeyDown(event, 'leftInput')));\n        this._bindEventService.bind(this._rightInput, 'keydown', ((event) => this.handleKeyDown(event, 'rightInput')));\n        // the lib does not get the focus out event for some reason, so register it here\n        if (this.hasAutoCommitEdit) {\n            this._bindEventService.bind(this._leftInput, 'focusout', ((event) => this.handleFocusOut(event, 'leftInput')));\n            this._bindEventService.bind(this._rightInput, 'focusout', ((event) => this.handleFocusOut(event, 'rightInput')));\n        }\n        const compositeEditorOptions = this.args?.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            this._bindEventService.bind(this._leftInput, 'input', this.handleChangeOnCompositeEditorDebounce.bind(this));\n            this._bindEventService.bind(this._rightInput, 'input', this.handleChangeOnCompositeEditorDebounce.bind(this));\n        }\n        else {\n            window.setTimeout(() => this._leftInput.select(), 50);\n        }\n    }\n    handleFocusOut(event, position) {\n        // when clicking outside the editable cell OR when focusing out of it\n        const targetClassNames = event.relatedTarget?.className || '';\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (!compositeEditorOptions && targetClassNames.indexOf('dual-editor') === -1 && this._lastEventType !== 'focusout-right') {\n            if (position === 'rightInput' || (position === 'leftInput' && this._lastEventType !== 'focusout-left')) {\n                if (position === 'leftInput') {\n                    this._isLeftValueTouched = true;\n                }\n                else {\n                    this._isRightValueTouched = true;\n                }\n                this.save();\n            }\n        }\n        const side = position === 'leftInput' ? 'left' : 'right';\n        this._lastEventType = `${event?.type}-${side}`;\n    }\n    handleKeyDown(event, position) {\n        if (position === 'leftInput') {\n            this._isLeftValueTouched = true;\n        }\n        else {\n            this._isRightValueTouched = true;\n        }\n        this._lastInputKeyEvent = event;\n        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'Home' || event.key === 'End' || event.key === 'Tab') {\n            event.stopImmediatePropagation();\n        }\n    }\n    destroy() {\n        // unsubscribe all SlickGrid events\n        this._eventHandler.unsubscribeAll();\n        this._bindEventService.unbindAll();\n        this._leftInput?.remove?.();\n        this._rightInput?.remove?.();\n    }\n    createInput(position) {\n        const editorSideParams = this.editorParams[position];\n        const columnId = this.columnDef?.id ?? '';\n        const idPropName = this.gridOptions.datasetIdPropertyName || 'id';\n        const itemId = this.args?.item?.[idPropName] ?? '';\n        let fieldType = editorSideParams.type || 'text';\n        if (fieldType === 'float' || fieldType === 'integer') {\n            fieldType = 'number';\n        }\n        const input = createDomElement('input', {\n            type: fieldType || 'text',\n            id: `item-${itemId}-${position}`,\n            ariaLabel: this.columnEditor?.ariaLabel ?? `${toSentenceCase(columnId + '')} Input Editor`,\n            className: `dual-editor-text editor-${columnId} ${position.replace(/input/gi, '')}`,\n            autocomplete: 'off',\n            ariaAutoComplete: 'none',\n            placeholder: editorSideParams.placeholder || '',\n            title: editorSideParams.title || '',\n        });\n        if (fieldType === 'readonly') {\n            // when the custom type is defined as readonly, we'll make a readonly text input\n            input.readOnly = true;\n            fieldType = 'text';\n        }\n        if (fieldType === 'number') {\n            input.step = this.getInputDecimalSteps(position);\n        }\n        return input;\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._leftInput && this._rightInput) {\n            if (isDisabled) {\n                this._leftInput.setAttribute('disabled', 'disabled');\n                this._rightInput.setAttribute('disabled', 'disabled');\n                // clear the checkbox when it's newly disabled\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions) {\n                    this.reset('', true, true);\n                }\n            }\n            else {\n                this._leftInput.removeAttribute('disabled');\n                this._rightInput.removeAttribute('disabled');\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first, then do nothing since we have 2 inputs and we might focus on left/right depending on which is invalid and/or new\n        this.grid.focus();\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    getValues() {\n        const obj = {};\n        const leftInputValue = this._leftInput.value;\n        const rightInputValue = this._rightInput.value;\n        const isLeftInputTypeNumber = this.editorParams.leftInput && (this.editorParams.leftInput.type === 'float' || this.editorParams.leftInput.type === 'integer');\n        const isRightInputTypeNumber = this.editorParams.rightInput && (this.editorParams.rightInput.type === 'float' || this.editorParams.rightInput.type === 'integer');\n        const resultLeftValue = leftInputValue !== '' && isLeftInputTypeNumber ? +this._leftInput.value : leftInputValue || '';\n        const resultRightValue = rightInputValue !== '' && isRightInputTypeNumber ? +this._rightInput.value : rightInputValue || '';\n        setDeepValue(obj, this._leftFieldName, resultLeftValue);\n        setDeepValue(obj, this._rightFieldName, resultRightValue);\n        return obj;\n    }\n    setValues(values) {\n        if (Array.isArray(values) && values.length === 2) {\n            this._leftInput.value = `${values[0]}`;\n            this._rightInput.value = `${values[1]}`;\n        }\n    }\n    applyValue(item, state) {\n        this.applyValueByPosition(item, state, 'leftInput');\n        this.applyValueByPosition(item, state, 'rightInput');\n    }\n    applyValueByPosition(item, state, position) {\n        const fieldName = position === 'leftInput' ? this._leftFieldName : this._rightFieldName;\n        if (fieldName !== undefined) {\n            const isComplexObject = fieldName?.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\n            let fieldNameToUse = fieldName;\n            if (isComplexObject) {\n                const complexFieldNames = fieldName.split(/\\.(.*)/);\n                fieldNameToUse = (complexFieldNames.length > 1 ? complexFieldNames[1] : complexFieldNames);\n            }\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const stateValue = isComplexObject ? getDescendantProperty(state, fieldNameToUse) : state[fieldName];\n            const validation = this.validate(null, { position, inputValue: stateValue });\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                const newValueFromComplex = getDescendantProperty(state, fieldNameToUse);\n                const newValue = validation && validation.valid ? newValueFromComplex : '';\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else if (fieldName) {\n                item[fieldName] = validation && validation.valid ? state[fieldName] : '';\n            }\n        }\n    }\n    isValueChanged() {\n        const leftElmValue = this._leftInput.value;\n        const rightElmValue = this._rightInput.value;\n        const leftEditorParams = this.editorParams?.leftInput;\n        const rightEditorParams = this.editorParams?.rightInput;\n        const lastEventKey = this._lastInputKeyEvent?.key;\n        if (((leftEditorParams && leftEditorParams.alwaysSaveOnEnterKey) || (rightEditorParams && rightEditorParams.alwaysSaveOnEnterKey)) &&\n            lastEventKey === 'Enter') {\n            return true;\n        }\n        const leftResult = !(leftElmValue === '' && (this._originalLeftValue === null || this._originalLeftValue === undefined)) &&\n            leftElmValue !== this._originalLeftValue;\n        const rightResult = !(rightElmValue === '' && (this._originalRightValue === null || this._originalRightValue === undefined)) &&\n            rightElmValue !== this._originalRightValue;\n        return leftResult || rightResult;\n    }\n    isValueTouched() {\n        return this._isLeftValueTouched || this._isRightValueTouched;\n    }\n    loadValue(item) {\n        this.loadValueByPosition(item, 'leftInput');\n        this.loadValueByPosition(item, 'rightInput');\n        this._leftInput.select();\n    }\n    loadValueByPosition(item, position) {\n        // is the field a complex object, \"address.streetNumber\"\n        const fieldName = position === 'leftInput' ? this._leftFieldName : this._rightFieldName;\n        const originalValuePosition = position === 'leftInput' ? '_originalLeftValue' : '_originalRightValue';\n        const inputVarPosition = position === 'leftInput' ? '_leftInput' : '_rightInput';\n        if (item && fieldName !== undefined) {\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            // prettier-ignore\n            const itemValue = (isComplexObject) ? getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) ? item[fieldName] : '');\n            this[originalValuePosition] = itemValue;\n            if (this.editorParams[position].type === 'float') {\n                const decimalPlaces = this.getDecimalPlaces(position);\n                if (decimalPlaces !== null &&\n                    (this[originalValuePosition] || this[originalValuePosition] === 0) &&\n                    this[originalValuePosition] !== undefined) {\n                    this[originalValuePosition] = (+this[originalValuePosition]).toFixed(decimalPlaces);\n                }\n            }\n            if (this[inputVarPosition]) {\n                this[inputVarPosition].value = `${this[originalValuePosition]}`;\n            }\n        }\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputLeftValue = value ?? this._originalLeftValue ?? '';\n        const inputRightValue = value ?? this._originalRightValue ?? '';\n        if (this._leftInput && this._rightInput) {\n            this._originalLeftValue = inputLeftValue;\n            this._originalRightValue = inputRightValue;\n            this._leftInput.value = `${inputLeftValue}`;\n            this._rightInput.value = `${inputRightValue}`;\n        }\n        this._isLeftValueTouched = false;\n        this._isRightValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = (validation && validation.valid) || false;\n        if (!this._isValueSaveCalled) {\n            if (this.hasAutoCommitEdit && isValid) {\n                this.grid.getEditorLock().commitCurrentEdit();\n            }\n            else {\n                this.args.commitChanges();\n            }\n            this._isValueSaveCalled = true;\n        }\n    }\n    serializeValue() {\n        const obj = {};\n        const leftValue = this.serializeValueByPosition('leftInput');\n        const rightValue = this.serializeValueByPosition('rightInput');\n        setDeepValue(obj, this._leftFieldName, leftValue);\n        setDeepValue(obj, this._rightFieldName, rightValue);\n        return obj;\n    }\n    serializeValueByPosition(position) {\n        const elmValue = position === 'leftInput' ? this._leftInput.value : this._rightInput.value;\n        if (elmValue === '' || isNaN(+elmValue)) {\n            return elmValue;\n        }\n        let rtn = parseFloat(elmValue);\n        const decPlaces = this.getDecimalPlaces(position);\n        if (decPlaces !== null && (rtn || rtn === 0) && rtn.toFixed) {\n            rtn = parseFloat(rtn.toFixed(decPlaces));\n        }\n        return rtn;\n    }\n    getDecimalPlaces(position) {\n        const defaultDecimalPlaces = 0;\n        // returns the number of fixed decimal places or null\n        const positionSide = position === 'leftInput' ? 'leftInput' : 'rightInput';\n        const sideParams = this.editorParams[positionSide];\n        const rtn = sideParams?.decimal;\n        if (rtn === undefined) {\n            return defaultDecimalPlaces;\n        }\n        return rtn;\n    }\n    getInputDecimalSteps(position) {\n        const decimals = this.getDecimalPlaces(position);\n        let zeroString = '';\n        for (let i = 1; i < decimals; i++) {\n            zeroString += '0';\n        }\n        if (decimals > 0) {\n            return `0.${zeroString}1`;\n        }\n        return '1';\n    }\n    validate(_targetElm, inputValidation) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        if (inputValidation) {\n            const posValidation = this.validateByPosition(inputValidation.position, inputValidation.inputValue);\n            if (!posValidation.valid) {\n                inputValidation.position === 'leftInput' ? this._leftInput.select() : this._rightInput.select();\n                return posValidation;\n            }\n        }\n        else {\n            const leftValidation = this.validateByPosition('leftInput');\n            const rightValidation = this.validateByPosition('rightInput');\n            if (!leftValidation.valid) {\n                this._leftInput.select();\n                return leftValidation;\n            }\n            if (!rightValidation.valid) {\n                this._rightInput.select();\n                return rightValidation;\n            }\n        }\n        return { valid: true, msg: '' };\n    }\n    validateByPosition(position, inputValue) {\n        const positionEditorParams = this.editorParams[position];\n        let currentVal = '';\n        if (inputValue) {\n            currentVal = inputValue;\n        }\n        else {\n            const input = position === 'leftInput' ? this._leftInput : this._rightInput;\n            currentVal = input && input.value;\n        }\n        // there are 2 ways of passing a Validator, 1-independent validator on each side, 2-shared validator\n        const commonValidator = this.validator;\n        currentVal = typeof commonValidator === 'function' ? this.getValues() : currentVal;\n        const baseValidatorOptions = {\n            editorArgs: this.args,\n            errorMessage: positionEditorParams.errorMessage,\n            required: this.args?.compositeEditorOptions ? false : positionEditorParams.required,\n            validator: typeof commonValidator === 'function' ? commonValidator : positionEditorParams.validator,\n        };\n        switch (positionEditorParams.type) {\n            case 'float':\n                return floatValidator(currentVal, {\n                    ...baseValidatorOptions,\n                    decimal: this.getDecimalPlaces(position),\n                    minValue: positionEditorParams.minValue,\n                    maxValue: positionEditorParams.maxValue,\n                    operatorConditionalType: positionEditorParams.operatorConditionalType,\n                });\n            case 'integer':\n                return integerValidator(currentVal, {\n                    ...baseValidatorOptions,\n                    minValue: positionEditorParams.minValue,\n                    maxValue: positionEditorParams.maxValue,\n                    operatorConditionalType: positionEditorParams.operatorConditionalType,\n                });\n            case 'text':\n            case 'password':\n            default:\n                return textValidator(currentVal, baseValidatorOptions);\n        }\n    }\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const leftInputId = this.columnEditor.params?.leftInput?.field ?? '';\n        const rightInputId = this.columnEditor.params?.rightInput?.field ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValues = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValues);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValues);\n        // when the input is disabled we won't include it in the form result object\n        // we'll check with both left/right inputs\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(leftInputId))) {\n            delete compositeEditorOptions.formValues[leftInputId];\n        }\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(rightInputId))) {\n            delete compositeEditorOptions.formValues[rightInputId];\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData(event));\n    }\n    handleChangeOnCompositeEditorDebounce(event) {\n        const compositeEditorOptions = this.args?.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            const typingDelay = this.gridOptions?.editorTypingDebounce ?? 500;\n            window.clearTimeout(this._timer);\n            this._timer = window.setTimeout(() => this.handleChangeOnCompositeEditor(event, compositeEditorOptions), typingDelay);\n        }\n    }\n}\n//# sourceMappingURL=dualInputEditor.js.map","import { BindingEventService } from '@slickgrid-universal/binding';\nimport { createDomElement, setDeepValue, toSentenceCase } from '@slickgrid-universal/utils';\nimport { getDescendantProperty } from '../services/utilities.js';\nimport { textValidator } from '../editorValidators/textValidator.js';\nimport { SlickEventData } from '../core/index.js';\nconst DEFAULT_DECIMAL_PLACES = 0;\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class InputEditor {\n    constructor(args, inputType = 'text') {\n        this.args = args;\n        this._inputType = 'text';\n        this._isValueTouched = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = args.grid?.getOptions();\n        this._bindEventService = new BindingEventService();\n        this.inputType = inputType;\n        this.init();\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor || {};\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return this._input;\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    /** Getter of input type (text, number, password) */\n    get inputType() {\n        return this._inputType;\n    }\n    /** Setter of input type (text, number, password) */\n    set inputType(type) {\n        this._inputType = type;\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        const columnId = this.columnDef?.id ?? '';\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        this._input = createDomElement('input', {\n            type: this._inputType || 'text',\n            autocomplete: 'off',\n            ariaAutoComplete: 'none',\n            ariaLabel: this.columnEditor?.ariaLabel ?? `${toSentenceCase(columnId + '')} Input Editor`,\n            className: `editor-text editor-${columnId}`,\n            placeholder: this.columnEditor?.placeholder ?? '',\n            title: this.columnEditor?.title ?? '',\n        });\n        // add \"step\" attribute when editor type is integer/float\n        if (this.inputType === 'number') {\n            this._input.step = `${this.columnEditor.valueStep !== undefined ? this.columnEditor.valueStep : this.getInputDecimalSteps()}`;\n        }\n        const cellContainer = this.args.container;\n        if (cellContainer && typeof cellContainer.appendChild === 'function') {\n            cellContainer.appendChild(this._input);\n        }\n        this._bindEventService.bind(this._input, 'focus', () => this._input?.select());\n        this._bindEventService.bind(this._input, 'keydown', ((event) => {\n            this._isValueTouched = true;\n            this._lastInputKeyEvent = event;\n            if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'Home' || event.key === 'End') {\n                event.stopImmediatePropagation();\n            }\n        }));\n        // listen to focusout or blur to automatically call a save\n        if (this.hasAutoCommitEdit && !compositeEditorOptions) {\n            this._bindEventService.bind(this._input, ['focusout', 'blur'], () => {\n                this._isValueTouched = true;\n                this.save();\n            });\n        }\n        if (compositeEditorOptions) {\n            this._bindEventService.bind(this._input, ['input', 'paste'], this.handleOnInputChange.bind(this));\n            // add an extra mousewheel listener when editor type is integer/float\n            if (this.inputType === 'number') {\n                this._bindEventService.bind(this._input, 'wheel', this.handleOnMouseWheel.bind(this), { passive: true });\n            }\n        }\n    }\n    destroy() {\n        this._bindEventService.unbindAll();\n        this._input?.remove?.();\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._input) {\n            if (isDisabled) {\n                this._input.setAttribute('disabled', 'disabled');\n                // clear value when it's newly disabled and not empty\n                const currentValue = this.getValue();\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions && currentValue !== '') {\n                    this.reset('', true, true);\n                }\n            }\n            else {\n                this._input.removeAttribute('disabled');\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        this._input?.focus();\n    }\n    getDecimalPlaces() {\n        // returns the number of fixed decimal places or null\n        let rtn = this.columnEditor?.decimal ?? this.columnEditor?.params?.decimalPlaces ?? undefined;\n        if (rtn === undefined) {\n            rtn = DEFAULT_DECIMAL_PLACES;\n        }\n        return !rtn && rtn !== 0 ? 0 : rtn;\n    }\n    /** when editor is a float input editor, we'll want to know how many decimals to show */\n    getInputDecimalSteps() {\n        const decimals = this.getDecimalPlaces();\n        let zeroString = '';\n        for (let i = 1; i < decimals; i++) {\n            zeroString += '0';\n        }\n        if (decimals > 0) {\n            return `0.${zeroString}1`;\n        }\n        return '1';\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    getValue() {\n        return this._input?.value || '';\n    }\n    setValue(value, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        if (this._input) {\n            this._input.value = `${value}`;\n            if (isApplyingValue) {\n                this.applyValue(this.args.item, this.serializeValue());\n                // if it's set by a Composite Editor, then also trigger a change for it\n                const compositeEditorOptions = this.args.compositeEditorOptions;\n                if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                    this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'system');\n                }\n            }\n        }\n    }\n    applyValue(item, state) {\n        const fieldName = this.columnDef?.field;\n        if (fieldName !== undefined) {\n            const isComplexObject = fieldName?.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const validation = this.validate(null, state);\n            const newValue = validation?.valid ? state : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else if (fieldName) {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    isValueChanged() {\n        const elmValue = this._input?.value;\n        const lastEventKey = this._lastInputKeyEvent?.key;\n        if (this.columnEditor?.alwaysSaveOnEnterKey && lastEventKey === 'Enter') {\n            return true;\n        }\n        return !(elmValue === '' && (this._originalValue === null || this._originalValue === undefined)) && elmValue !== this._originalValue;\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (item && fieldName !== undefined && this._input) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const value = isComplexObject ? getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) && item[fieldName]) || '';\n            this._originalValue = value;\n            this._input.value = this._originalValue;\n            this._input.select();\n        }\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this._originalValue ?? '';\n        if (this._input) {\n            this._originalValue = inputValue;\n            this._input.value = `${inputValue}`;\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = (validation && validation.valid) || false;\n        if (this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            this.args.commitChanges();\n        }\n    }\n    serializeValue() {\n        return this._input?.value ?? '';\n    }\n    validate(_targetElm, inputValue) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        const elmValue = inputValue !== undefined ? inputValue : this._input && this._input.value;\n        return textValidator(elmValue, {\n            editorArgs: this.args,\n            errorMessage: this.columnEditor.errorMessage,\n            minLength: this.columnEditor.minLength,\n            maxLength: this.columnEditor.maxLength,\n            operatorConditionalType: this.columnEditor.operatorConditionalType,\n            required: this.args?.compositeEditorOptions ? false : this.columnEditor.required,\n            validator: this.validator,\n        });\n    }\n    // --\n    // protected functions\n    // ------------------\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValue = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValue);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValue);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData(event));\n    }\n    handleOnInputChange(event) {\n        this._isValueTouched = true;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            const typingDelay = this.gridOptions?.editorTypingDebounce ?? 500;\n            window.clearTimeout(this._timer);\n            this._timer = window.setTimeout(() => this.handleChangeOnCompositeEditor(event, compositeEditorOptions), typingDelay);\n        }\n    }\n    /** When the input value changes (this will cover the input spinner arrows on the right) */\n    handleOnMouseWheel(event) {\n        this._isValueTouched = true;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            this.handleChangeOnCompositeEditor(event, compositeEditorOptions);\n        }\n    }\n}\n//# sourceMappingURL=inputEditor.js.map","import { floatValidator } from '../editorValidators/floatValidator.js';\nimport { InputEditor } from './inputEditor.js';\nimport { getDescendantProperty } from '../services/utilities.js';\nexport class FloatEditor extends InputEditor {\n    constructor(args) {\n        super(args, 'number');\n        this.args = args;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (fieldName !== undefined) {\n            if (item && fieldName !== undefined && this._input) {\n                // is the field a complex object, \"address.streetNumber\"\n                const isComplexObject = fieldName?.indexOf('.') > 0;\n                const value = isComplexObject ? getDescendantProperty(item, fieldName) : item[fieldName];\n                this._originalValue = value;\n                const decPlaces = this.getDecimalPlaces();\n                if (decPlaces !== null && (this._originalValue || this._originalValue === 0) && this._originalValue !== undefined) {\n                    this._originalValue = (+this._originalValue).toFixed(decPlaces);\n                }\n                this._input.value = `${this._originalValue}`;\n                this._input.select();\n            }\n        }\n    }\n    serializeValue() {\n        const elmValue = this._input?.value;\n        if (elmValue === undefined || elmValue === '' || isNaN(+elmValue)) {\n            return elmValue;\n        }\n        let rtn = parseFloat(elmValue);\n        const decPlaces = this.getDecimalPlaces();\n        if (decPlaces !== null && (rtn || rtn === 0) && rtn.toFixed) {\n            rtn = parseFloat(rtn.toFixed(decPlaces));\n        }\n        return rtn;\n    }\n    validate(_targetElm, inputValue) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        const elmValue = inputValue !== undefined ? inputValue : this._input?.value;\n        return floatValidator(elmValue, {\n            editorArgs: this.args,\n            errorMessage: this.columnEditor.errorMessage,\n            decimal: this.getDecimalPlaces(),\n            minValue: this.columnEditor.minValue,\n            maxValue: this.columnEditor.maxValue,\n            operatorConditionalType: this.columnEditor.operatorConditionalType,\n            required: this.args?.compositeEditorOptions ? false : this.columnEditor.required,\n            validator: this.validator,\n        });\n    }\n}\n//# sourceMappingURL=floatEditor.js.map","import { integerValidator } from '../editorValidators/integerValidator.js';\nimport { InputEditor } from './inputEditor.js';\nimport { getDescendantProperty } from '../services/utilities.js';\nexport class IntegerEditor extends InputEditor {\n    constructor(args) {\n        super(args, 'number');\n        this.args = args;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (item && fieldName !== undefined && this._input) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const value = isComplexObject ? getDescendantProperty(item, fieldName) : item[fieldName];\n            this._originalValue = isNaN(value) || value === null || value === undefined ? value : `${value}`;\n            this._input.value = `${this._originalValue}`;\n            this._input.select();\n        }\n    }\n    serializeValue() {\n        const elmValue = this._input?.value;\n        if (elmValue === undefined || elmValue === '' || isNaN(+elmValue)) {\n            return elmValue;\n        }\n        const output = isNaN(+elmValue) ? elmValue : parseInt(elmValue, 10);\n        return isNaN(+output) ? elmValue : output;\n    }\n    validate(_targetElm, inputValue) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        const elmValue = inputValue !== undefined ? inputValue : this.getValue();\n        return integerValidator(elmValue, {\n            editorArgs: this.args,\n            errorMessage: this.columnEditor.errorMessage,\n            minValue: this.columnEditor.minValue,\n            maxValue: this.columnEditor.maxValue,\n            operatorConditionalType: this.columnEditor.operatorConditionalType,\n            required: this.args?.compositeEditorOptions ? false : this.columnEditor.required,\n            validator: this.validator,\n        });\n    }\n    // --\n    // protected functions\n    // ------------------\n    /** When the input value changes (this will cover the input spinner arrows on the right) */\n    handleOnMouseWheel(event) {\n        this._isValueTouched = true;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            this.handleChangeOnCompositeEditor(event, compositeEditorOptions);\n        }\n    }\n}\n//# sourceMappingURL=integerEditor.js.map","import { BindingEventService } from '@slickgrid-universal/binding';\nimport { createDomElement, getOffset, setDeepValue, toSentenceCase } from '@slickgrid-universal/utils';\nimport { Constants } from './../constants.js';\nimport { getDescendantProperty, getTranslationPrefix } from '../services/utilities.js';\nimport { textValidator } from '../editorValidators/textValidator.js';\nimport { SlickEventData } from '../core/index.js';\n/*\n * An example of a 'detached' editor.\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class LongTextEditor {\n    constructor(args) {\n        this.args = args;\n        this._isValueTouched = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = args.grid?.getOptions();\n        const options = this.gridOptions || this.args.column.params || {};\n        if (options?.translater) {\n            this._translater = options.translater;\n        }\n        // get locales provided by user in forRoot or else use default English locales via the Constants\n        this._locales = this.gridOptions?.locales || Constants.locales;\n        this._bindEventService = new BindingEventService();\n        this.init();\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor ?? {};\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return this._textareaElm;\n    }\n    get editorOptions() {\n        return { ...this.gridOptions.defaultEditorOptions?.longText, ...this.columnEditor?.editorOptions };\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions?.autoCommitEdit ?? false;\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        let cancelText = '';\n        let saveText = '';\n        if (this._translater && this._translater.translate && this.gridOptions.enableTranslate) {\n            const translationPrefix = getTranslationPrefix(this.gridOptions);\n            const cancelKey = this.editorOptions.buttonTexts?.cancelKey ?? `${translationPrefix}CANCEL`;\n            const saveKey = this.editorOptions.buttonTexts?.saveKey ?? `${translationPrefix}SAVE`;\n            cancelText = this._translater.translate(`${translationPrefix}${cancelKey}`);\n            saveText = this._translater.translate(`${translationPrefix}${saveKey}`);\n        }\n        else {\n            cancelText = this.editorOptions.buttonTexts?.cancel ?? this._locales?.TEXT_CANCEL ?? 'Cancel';\n            saveText = this.editorOptions.buttonTexts?.save ?? this._locales?.TEXT_SAVE ?? 'Save';\n        }\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        const columnId = this.columnDef?.id ?? '';\n        const maxLength = this.columnEditor?.maxLength;\n        const textAreaRows = this.editorOptions?.rows ?? 4;\n        const containerElm = compositeEditorOptions ? this.args.container : document.body;\n        this._wrapperElm = createDomElement('div', {\n            className: `slick-large-editor-text editor-${columnId}`,\n            style: { position: compositeEditorOptions ? 'relative' : 'absolute' },\n        });\n        // add dark mode CSS class when enabled\n        if (this.gridOptions?.darkMode) {\n            this._wrapperElm.classList.add('slick-dark-mode');\n        }\n        containerElm.appendChild(this._wrapperElm);\n        // use textarea row if defined but don't go over 3 rows with composite editor modal\n        this._textareaElm = createDomElement('textarea', {\n            ariaLabel: this.columnEditor?.ariaLabel ?? `${toSentenceCase(columnId + '')} Text Editor`,\n            cols: this.editorOptions?.cols ?? 40,\n            rows: compositeEditorOptions && textAreaRows > 3 ? 3 : textAreaRows,\n            placeholder: this.columnEditor?.placeholder ?? '',\n            title: this.columnEditor?.title ?? '',\n        }, this._wrapperElm);\n        const editorFooterElm = createDomElement('div', { className: 'editor-footer' });\n        const countContainerElm = createDomElement('span', { className: 'counter' });\n        this._currentLengthElm = createDomElement('span', { className: 'text-length', textContent: '0' });\n        countContainerElm.appendChild(this._currentLengthElm);\n        if (maxLength !== undefined) {\n            countContainerElm.appendChild(createDomElement('span', { className: 'separator', textContent: '/' }));\n            countContainerElm.appendChild(createDomElement('span', { className: 'max-length', textContent: `${maxLength}` }));\n        }\n        editorFooterElm.appendChild(countContainerElm);\n        if (!compositeEditorOptions) {\n            const cancelBtnElm = createDomElement('button', { className: 'btn btn-cancel btn-default btn-xs', textContent: cancelText });\n            const saveBtnElm = createDomElement('button', { className: 'btn btn-save btn-primary btn-xs', textContent: saveText });\n            if (this.editorOptions.saveButtonPosition === 'left') {\n                editorFooterElm.appendChild(saveBtnElm);\n                editorFooterElm.appendChild(cancelBtnElm);\n            }\n            else {\n                editorFooterElm.appendChild(cancelBtnElm);\n                editorFooterElm.appendChild(saveBtnElm);\n            }\n            this._bindEventService.bind(cancelBtnElm, 'click', this.cancel.bind(this));\n            this._bindEventService.bind(saveBtnElm, 'click', this.save.bind(this));\n            this.position(this.args?.position);\n            this._textareaElm.focus();\n            this._textareaElm.select();\n        }\n        this._wrapperElm.appendChild(editorFooterElm);\n        this._bindEventService.bind(this._textareaElm, 'keydown', this.handleKeyDown.bind(this));\n        this._bindEventService.bind(this._textareaElm, 'input', this.handleOnInputChange.bind(this));\n        this._bindEventService.bind(this._textareaElm, 'paste', this.handleOnInputChange.bind(this));\n    }\n    cancel() {\n        const value = this._defaultTextValue || '';\n        this._textareaElm.value = value;\n        this._currentLengthElm.textContent = `${value.length}`;\n        if (this.args?.cancelChanges) {\n            this.args.cancelChanges();\n        }\n    }\n    hide() {\n        this._wrapperElm.style.display = 'none';\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (!isCompositeEditor) {\n            this._wrapperElm.style.display = 'block';\n        }\n        else {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    destroy() {\n        this._bindEventService.unbindAll();\n        this._wrapperElm?.remove?.();\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._textareaElm && this._wrapperElm) {\n            if (isDisabled) {\n                this._textareaElm.disabled = true;\n                this._wrapperElm.classList.add('disabled');\n                // clear value when it's newly disabled and not empty\n                const currentValue = this.getValue();\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions && currentValue !== '') {\n                    this.reset('', true, true);\n                }\n            }\n            else {\n                this._textareaElm.disabled = false;\n                this._wrapperElm.classList.remove('disabled');\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        if (this._textareaElm) {\n            this._textareaElm.focus();\n            this._textareaElm.select();\n        }\n    }\n    getValue() {\n        return this._textareaElm.value;\n    }\n    setValue(val, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        this._textareaElm.value = val;\n        this._currentLengthElm.textContent = `${val.length}`;\n        if (isApplyingValue) {\n            this.applyValue(this.args.item, this.serializeValue());\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'system');\n            }\n        }\n    }\n    applyValue(item, state) {\n        const fieldName = this.columnDef?.field;\n        if (fieldName !== undefined) {\n            const isComplexObject = fieldName?.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const validation = this.validate(undefined, state);\n            const newValue = validation?.valid ? state : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    isValueChanged() {\n        const elmValue = this._textareaElm.value;\n        return (!(elmValue === '' && (this._defaultTextValue === null || this._defaultTextValue === undefined)) && elmValue !== this._defaultTextValue);\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        if (item && fieldName !== undefined) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const value = isComplexObject ? getDescendantProperty(item, fieldName) : item[fieldName];\n            this._defaultTextValue = value || '';\n            this._textareaElm.value = this._defaultTextValue;\n            this._currentLengthElm.textContent = this._defaultTextValue.length;\n            this._textareaElm.defaultValue = this._defaultTextValue;\n            this._textareaElm.select();\n        }\n    }\n    /**\n     * Reposition the LongText Editor to be right over the cell, so that it looks like we opened the editor on top of the cell when in reality we just reposition (absolute) over the cell.\n     * By default we use an \"auto\" mode which will allow to position the LongText Editor to the best logical position in the window, also when we say position, we are talking about the relative position against the grid cell.\n     * We can assume that in 80% of the time the default position is bottom right, the default is \"auto\" but we can also override this and use a specific position.\n     * Most of the time positioning of the editor will be to the \"right\" of the cell is ok but if our column is completely on the right side then we'll want to change the position to \"left\" align.\n     * Same goes for the top/bottom position, Most of the time positioning the editor to the \"bottom\" but we are clicking on a cell at the bottom of the grid then we might need to reposition to \"top\" instead.\n     * NOTE: this only applies to Inline Editing and will not have any effect when using the Composite Editor modal window.\n     */\n    position(parentPosition) {\n        const containerOffset = getOffset(this.args.container);\n        const containerHeight = this.args.container.offsetHeight;\n        const containerWidth = this.args.container.offsetWidth;\n        const calculatedEditorHeight = this._wrapperElm.getBoundingClientRect().height || this.args.position.height;\n        const calculatedEditorWidth = this._wrapperElm.getBoundingClientRect().width || this.args.position.width;\n        const calculatedBodyHeight = document.body.offsetHeight || window.innerHeight; // body height/width might be 0 if so use the window height/width\n        const calculatedBodyWidth = document.body.offsetWidth || window.innerWidth;\n        // first defined position will be bottom/right (which will position the editor completely over the cell)\n        let newPositionTop = this.args.container ? containerOffset.top : (parentPosition.top ?? 0);\n        let newPositionLeft = this.args.container ? containerOffset.left : (parentPosition.left ?? 0);\n        // user could explicitely use a \"left\" position (when user knows his column is completely on the right)\n        // or when using \"auto\" and we detect not enough available space then we'll position to the \"left\" of the cell\n        const position = this.editorOptions?.position ?? 'auto';\n        if (position === 'left' || (position === 'auto' && newPositionLeft + calculatedEditorWidth > calculatedBodyWidth)) {\n            const marginRightAdjustment = this.editorOptions?.marginRight ?? 0;\n            newPositionLeft -= calculatedEditorWidth - containerWidth + marginRightAdjustment;\n        }\n        // do the same calculation/reposition with top/bottom (default is bottom of the cell or in other word starting from the cell going down)\n        if (position === 'top' || (position === 'auto' && newPositionTop + calculatedEditorHeight > calculatedBodyHeight)) {\n            newPositionTop -= calculatedEditorHeight - containerHeight;\n        }\n        // reposition the editor over the cell (90% of the time this will end up using a position on the \"right\" of the cell)\n        this._wrapperElm.style.top = `${newPositionTop}px`;\n        this._wrapperElm.style.left = `${newPositionLeft}px`;\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this._defaultTextValue ?? '';\n        if (this._textareaElm) {\n            this._defaultTextValue = inputValue;\n            this._textareaElm.value = inputValue;\n            this._currentLengthElm.textContent = inputValue.length;\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = validation?.valid ?? false;\n        if (this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            this.args.commitChanges();\n        }\n    }\n    serializeValue() {\n        return this._textareaElm.value;\n    }\n    validate(_targetElm, inputValue) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        const elmValue = inputValue !== undefined ? inputValue : this._textareaElm?.value;\n        return textValidator(elmValue, {\n            editorArgs: this.args,\n            errorMessage: this.columnEditor.errorMessage,\n            minLength: this.columnEditor.minLength,\n            maxLength: this.columnEditor.maxLength,\n            operatorConditionalType: this.columnEditor.operatorConditionalType,\n            required: this.args?.compositeEditorOptions ? false : this.columnEditor.required,\n            validator: this.validator,\n        });\n    }\n    // --\n    // protected functions\n    // ------------------\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleKeyDown(e) {\n        const key = e.key;\n        this._isValueTouched = true;\n        if (!this.args.compositeEditorOptions) {\n            if ((key === 'Enter' && e.ctrlKey) || (e.ctrlKey && e.key.toUpperCase() === 'S')) {\n                e.preventDefault();\n                this.save();\n            }\n            else if (key === 'Escape') {\n                e.preventDefault();\n                this.cancel();\n            }\n            else if (key === 'Tab' && e.shiftKey) {\n                e.preventDefault();\n                if (this.args && this.grid) {\n                    this.grid.navigatePrev();\n                }\n            }\n            else if (key === 'Tab') {\n                e.preventDefault();\n                if (this.args && this.grid) {\n                    this.grid.navigateNext();\n                }\n            }\n        }\n    }\n    /** On every input change event, we'll update the current text length counter */\n    handleOnInputChange(event) {\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        const maxLength = this.columnEditor?.maxLength;\n        // when user defines a maxLength, we'll make sure that it doesn't go over this limit if so then truncate the text (disregard the extra text)\n        let isTruncated = false;\n        if (maxLength) {\n            isTruncated = this.truncateText(this._textareaElm, maxLength);\n        }\n        // if the text get truncated then update text length as maxLength, else update text length with actual\n        if (isTruncated) {\n            this._currentLengthElm.textContent = `${maxLength}`;\n        }\n        else {\n            const newText = event.type === 'paste' ? event.clipboardData.getData('text') : event.target.value;\n            this._currentLengthElm.textContent = `${newText.length}`;\n        }\n        // when using a Composite Editor, we'll want to add a debounce delay to avoid perf issue since Composite could affect other editors in the same form\n        if (compositeEditorOptions) {\n            const typingDelay = this.gridOptions?.editorTypingDebounce ?? 500;\n            window.clearTimeout(this._timer);\n            this._timer = window.setTimeout(() => this.handleChangeOnCompositeEditor(event, compositeEditorOptions), typingDelay);\n        }\n    }\n    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValue = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValue);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValue);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData(event));\n    }\n    /**\n     * Truncate text if the value is longer than the acceptable max length\n     * @param inputElm - textarea html element\n     * @param maxLength - max acceptable length\n     * @returns truncated - returns True if it truncated or False otherwise\n     */\n    truncateText(inputElm, maxLength) {\n        const text = inputElm.value + '';\n        if (text.length > maxLength) {\n            inputElm.value = text.substring(0, maxLength);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=longTextEditor.js.map","import { emptyElement, setDeepValue } from '@slickgrid-universal/utils';\nimport { dequal } from 'dequal/lite';\nimport { multipleSelect } from 'multiple-select-vanilla';\nimport { Constants } from '../constants.js';\nimport { FieldType } from './../enums/index.js';\nimport { buildMsSelectCollectionList, CollectionService, findOrDefault } from '../services/index.js';\nimport { getDescendantProperty, getTranslationPrefix } from '../services/utilities.js';\nimport { SlickEventData } from '../core/index.js';\n/**\n * Slickgrid editor class for multiple/single select lists\n */\nexport class SelectEditor {\n    constructor(args, isMultipleSelect, delayOpening = -1) {\n        this.args = args;\n        this.isMultipleSelect = isMultipleSelect;\n        this.delayOpening = delayOpening;\n        this._isValueTouched = false;\n        // flag to signal that the editor is destroying itself, helps prevent\n        // commit changes from being called twice and erroring\n        this._isDisposingOrCallingSave = false;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        /** Do we translate the label? */\n        this.enableTranslateLabel = false;\n        /** Final collection displayed in the UI, that is after processing filter/sort/override */\n        this.finalCollection = [];\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = (this.grid.getOptions() || {});\n        if (this.gridOptions?.translater) {\n            this._translaterService = this.gridOptions.translater;\n        }\n        // get locales provided by user in main file or else use default English locales via the Constants\n        this._locales = this.gridOptions.locales || Constants.locales;\n        // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)\n        const columnId = this.columnDef?.id ?? '';\n        this.elementName = `editor-${columnId}`;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        const libOptions = {\n            autoAdjustDropHeight: true,\n            autoAdjustDropPosition: true,\n            autoAdjustDropWidthByTextSize: true,\n            container: 'body',\n            darkMode: !!this.gridOptions.darkMode,\n            filter: false,\n            maxHeight: 275,\n            minHeight: 25,\n            name: this.elementName,\n            single: true,\n            singleRadio: true,\n            renderOptionLabelAsHtml: this.columnEditor?.enableRenderHtml ?? false,\n            sanitizer: (dirtyHtml) => this.grid.sanitizeHtmlString(dirtyHtml),\n            onClick: () => (this._isValueTouched = true),\n            onCheckAll: () => (this._isValueTouched = true),\n            onUncheckAll: () => (this._isValueTouched = true),\n            onClose: (reason) => {\n                if (reason === 'key.escape' || reason === 'body.click' || (!this.hasAutoCommitEdit && !this.isValueChanged())) {\n                    if (reason === 'key.escape') {\n                        this.cancel();\n                    }\n                    return;\n                }\n                if (compositeEditorOptions) {\n                    this.handleChangeOnCompositeEditor(compositeEditorOptions);\n                }\n                else {\n                    this._isDisposingOrCallingSave = true;\n                    this.save(this.hasAutoCommitEdit);\n                }\n            },\n        };\n        if (isMultipleSelect) {\n            libOptions.single = false;\n            libOptions.singleRadio = false;\n            libOptions.displayTitle = true;\n            libOptions.showOkButton = true;\n            if (this._translaterService?.getCurrentLanguage()) {\n                const translationPrefix = getTranslationPrefix(this.gridOptions);\n                libOptions.countSelectedText = this._translaterService.translate(`${translationPrefix}X_OF_Y_SELECTED`);\n                libOptions.allSelectedText = this._translaterService.translate(`${translationPrefix}ALL_SELECTED`);\n                libOptions.selectAllText = this._translaterService.translate(`${translationPrefix}SELECT_ALL`);\n                libOptions.okButtonText = this._translaterService.translate(`${translationPrefix}OK`);\n                libOptions.noMatchesFoundText = this._translaterService.translate(`${translationPrefix}NO_MATCHES_FOUND`);\n            }\n            else {\n                libOptions.countSelectedText = this._locales?.TEXT_X_OF_Y_SELECTED;\n                libOptions.allSelectedText = this._locales?.TEXT_ALL_SELECTED;\n                libOptions.selectAllText = this._locales?.TEXT_SELECT_ALL;\n                libOptions.okButtonText = this._locales?.TEXT_OK;\n                libOptions.noMatchesFoundText = this._locales?.TEXT_NO_MATCHES_FOUND;\n            }\n        }\n        // assign the multiple select lib options\n        this.defaultOptions = libOptions;\n        this.init();\n    }\n    /** Get the Collection */\n    get collection() {\n        return this.columnEditor?.collection ?? [];\n    }\n    /** Getter for the Collection Options */\n    get collectionOptions() {\n        return this.columnEditor?.collectionOptions;\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor ?? {};\n    }\n    /** Getter for item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    get editorOptions() {\n        return { ...this.gridOptions.defaultEditorOptions?.select, ...this.columnEditor?.editorOptions };\n    }\n    get isCompositeEditor() {\n        return !!this.args?.compositeEditorOptions;\n    }\n    /** Getter for the Custom Structure if exist */\n    get customStructure() {\n        return this.columnDef?.editor?.customStructure;\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    get msInstance() {\n        return this._msInstance;\n    }\n    get selectOptions() {\n        return this.defaultOptions;\n    }\n    /**\n     * The current selected values (multiple select) from the collection\n     */\n    get currentValues() {\n        const selectedValuesSet = new Set();\n        (this._msInstance?.getSelects('value') ?? []).forEach((x) => selectedValuesSet.add(x.toString()));\n        // collection of strings, just return the filtered string that are equals\n        if (this.collection.every((x) => typeof x === 'number' || typeof x === 'string')) {\n            return this.collection.filter((c) => selectedValuesSet.has(c?.toString()));\n        }\n        // collection of label/value pair\n        const separatorBetweenLabels = this.collectionOptions?.separatorBetweenTextLabels ?? '';\n        const isIncludingPrefixSuffix = this.collectionOptions?.includePrefixSuffixToSelectedValues ?? false;\n        return this.collection\n            .filter((c) => selectedValuesSet.has(c?.[this.valueName]?.toString()))\n            .map((c) => {\n            const labelText = c[this.valueName];\n            let prefixText = c[this.labelPrefixName] || '';\n            let suffixText = c[this.labelSuffixName] || '';\n            // when it's a complex object, then pull the object name only, e.g.: \"user.firstName\" => \"user\"\n            const fieldName = this.columnDef?.field ?? '';\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const serializeComplexValueFormat = this.columnEditor?.serializeComplexValueFormat ?? 'object';\n            if (isComplexObject && typeof c === 'object' && serializeComplexValueFormat === 'object') {\n                return c;\n            }\n            // also translate prefix/suffix if enableTranslateLabel is true and text is a string\n            // prettier-ignore\n            prefixText = (this.enableTranslateLabel && this._translaterService && prefixText && typeof prefixText === 'string') ? this._translaterService.translate(prefixText || ' ') : prefixText;\n            // prettier-ignore\n            suffixText = (this.enableTranslateLabel && this._translaterService && suffixText && typeof suffixText === 'string') ? this._translaterService.translate(suffixText || ' ') : suffixText;\n            if (isIncludingPrefixSuffix) {\n                const tmpOptionArray = [prefixText, labelText, suffixText].filter((text) => text); // add to a temp array for joining purpose and filter out empty text\n                return tmpOptionArray.join(separatorBetweenLabels);\n            }\n            return labelText;\n        });\n    }\n    /**\n     * The current selected values (single select) from the collection\n     */\n    get currentValue() {\n        const selectedValues = this._msInstance?.getSelects() ?? [];\n        const selectedValue = selectedValues.length ? selectedValues[0] : '';\n        const fieldName = this.columnDef?.field;\n        if (fieldName !== undefined) {\n            // collection of strings, just return the filtered string that are equals\n            if (this.collection.every((x) => typeof x === 'number' || typeof x === 'string')) {\n                return findOrDefault(this.collection, (c) => c?.toString?.() === `${selectedValue}`);\n            }\n            // collection of label/value pair\n            const separatorBetweenLabels = this.collectionOptions?.separatorBetweenTextLabels ?? '';\n            const isIncludingPrefixSuffix = this.collectionOptions?.includePrefixSuffixToSelectedValues ?? false;\n            const itemFound = findOrDefault(this.collection, (c) => c.hasOwnProperty(this.valueName) && c[this.valueName]?.toString() === `${selectedValue}`);\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            const serializeComplexValueFormat = this.columnEditor?.serializeComplexValueFormat ?? 'object';\n            if (isComplexObject && typeof itemFound === 'object' && serializeComplexValueFormat === 'object') {\n                return itemFound;\n            }\n            else if (itemFound && itemFound.hasOwnProperty(this.valueName)) {\n                const labelText = itemFound[this.valueName];\n                if (isIncludingPrefixSuffix) {\n                    let prefixText = itemFound[this.labelPrefixName] || '';\n                    let suffixText = itemFound[this.labelSuffixName] || '';\n                    // also translate prefix/suffix if enableTranslateLabel is true and text is a string\n                    // prettier-ignore\n                    prefixText = (this.enableTranslateLabel && this._translaterService && prefixText && typeof prefixText === 'string') ? this._translaterService.translate(prefixText || ' ') : prefixText;\n                    // prettier-ignore\n                    suffixText = (this.enableTranslateLabel && this._translaterService && suffixText && typeof suffixText === 'string') ? this._translaterService.translate(suffixText || ' ') : suffixText;\n                    // add to a temp array for joining purpose and filter out empty text\n                    const tmpOptionArray = [prefixText, labelText, suffixText].filter((text) => text);\n                    return tmpOptionArray.join(separatorBetweenLabels);\n                }\n                return labelText;\n            }\n        }\n        return '';\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor?.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        if (!this.columnDef || !this.columnDef.editor || (!this.columnDef.editor.collection && !this.columnDef.editor.collectionAsync)) {\n            throw new Error(`[Slickgrid-Universal] You need to pass a \"collection\" (or \"collectionAsync\") inside Column Definition Editor for the MultipleSelect/SingleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);\n        }\n        this._collectionService = new CollectionService(this._translaterService);\n        this.enableTranslateLabel = this.columnEditor?.enableTranslateLabel ?? false;\n        this.labelName = this.customStructure?.label ?? 'label';\n        this.labelPrefixName = this.customStructure?.labelPrefix ?? 'labelPrefix';\n        this.labelSuffixName = this.customStructure?.labelSuffix ?? 'labelSuffix';\n        this.optionLabel = this.customStructure?.optionLabel ?? 'value';\n        this.valueName = this.customStructure?.value ?? 'value';\n        if (this.enableTranslateLabel && (!this._translaterService || typeof this._translaterService.translate !== 'function')) {\n            throw new Error('[Slickgrid-Universal] requires a Translate Service to be installed and configured when the grid option \"enableTranslate\" is enabled.');\n        }\n        // always render the Select (dropdown) DOM element, even if user passed a \"collectionAsync\",\n        // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)\n        this.renderDomElement(this.collection);\n        // when having a collectionAsync and a collection that is empty, we'll toggle the Editor to disabled,\n        // it will be re-enabled when we get the collection filled (in slick-vanilla-bundle on method \"updateEditorCollection()\")\n        if (this.disabled || (this.columnEditor?.collectionAsync && Array.isArray(this.collection) && this.collection.length === 0)) {\n            this.disable(true);\n        }\n    }\n    getValue() {\n        return this.isMultipleSelect ? this.currentValues : this.currentValue;\n    }\n    setValue(value, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        if (this.isMultipleSelect && Array.isArray(value)) {\n            this.loadMultipleValues(value);\n        }\n        else {\n            this.loadSingleValue(value);\n        }\n        if (isApplyingValue) {\n            this.applyValue(this.args.item, this.serializeValue());\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                this.handleChangeOnCompositeEditor(compositeEditorOptions, 'system');\n            }\n        }\n    }\n    cancel() {\n        if (this.args?.cancelChanges) {\n            this.args.cancelChanges();\n        }\n    }\n    hide() {\n        if (this._msInstance) {\n            this._msInstance.close();\n        }\n    }\n    show(openDelay) {\n        if (!this.isCompositeEditor && this._msInstance) {\n            this._msInstance.open(openDelay);\n        }\n        else if (this.isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    applyValue(item, state) {\n        const fieldName = this.columnDef?.field;\n        const fieldType = this.columnDef?.type;\n        let newValue = state;\n        if (fieldName !== undefined) {\n            // when the provided user defined the column field type as a possible number then try parsing the state value as that\n            if ((fieldType === FieldType.number || fieldType === FieldType.integer || fieldType === FieldType.boolean) &&\n                !isNaN(parseFloat(state))) {\n                newValue = parseFloat(state);\n            }\n            // when set as a multiple selection, we can assume that the 3rd party lib multiple-select will return a CSV string\n            // we need to re-split that into an array to be the same as the original column\n            if (this.isMultipleSelect && typeof state === 'string' && state.indexOf(',') >= 0) {\n                newValue = state.split(',');\n            }\n            // is the field a complex object, \"user.address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            // validate the value before applying it (if not valid we'll set an empty string)\n            const validation = this.validate(null, newValue);\n            newValue = validation?.valid ? newValue : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor?.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    destroy() {\n        // when autoCommitEdit is enabled, we might end up leaving an editor without it being saved, if so do call a save before destroying\n        // this mainly happens doing a blur or focusing on another cell in the grid (it won't come here if we click outside the grid, in the body)\n        if (this._msInstance && this.hasAutoCommitEdit && this.isValueChanged() && !this._isDisposingOrCallingSave && !this.isCompositeEditor) {\n            this._isDisposingOrCallingSave = true; // change destroying flag to avoid infinite loop\n            this.save(true);\n        }\n        this._isDisposingOrCallingSave = true;\n        if (typeof this._msInstance?.destroy === 'function') {\n            this._msInstance.destroy();\n        }\n        this.editorElm?.remove();\n        this._msInstance = undefined;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field;\n        // is the field a complex object, \"address.streetNumber\"\n        const isComplexObject = fieldName !== undefined && fieldName?.indexOf('.') > 0;\n        if (item && fieldName !== undefined) {\n            // when it's a complex object, user could override the object path (where the editable object is located)\n            // else we use the path provided in the Field Column Definition\n            const objectPath = this.columnEditor?.complexObjectPath ?? fieldName;\n            const currentValue = isComplexObject\n                ? getDescendantProperty(item, objectPath)\n                : item.hasOwnProperty(fieldName) && item[fieldName];\n            const value = isComplexObject && currentValue?.hasOwnProperty(this.valueName) ? currentValue[this.valueName] : currentValue;\n            if (this.isMultipleSelect && Array.isArray(value)) {\n                this.loadMultipleValues(value);\n            }\n            else {\n                this.loadSingleValue(value);\n            }\n        }\n    }\n    loadMultipleValues(currentValues) {\n        // convert to string because that is how the DOM will return these values\n        if (Array.isArray(currentValues)) {\n            // keep the default values in memory for references\n            this.originalValue = currentValues.map((i) => (typeof i === 'number' || typeof i === 'boolean' ? `${i}` : i));\n            this._msInstance?.setSelects(this.originalValue);\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions) {\n                this.handleChangeOnCompositeEditor(compositeEditorOptions);\n            }\n        }\n    }\n    loadSingleValue(currentValue) {\n        // keep the default value in memory for references\n        this.originalValue = typeof currentValue === 'number' || typeof currentValue === 'boolean' ? `${currentValue}` : currentValue;\n        this._msInstance?.setSelects([this.originalValue]);\n    }\n    serializeValue() {\n        return this.isMultipleSelect ? this.currentValues : this.currentValue;\n    }\n    /**\n     * Dynamically change an Editor option, this is especially useful with Composite Editor\n     * since this is the only way to change option after the Editor is created (for example dynamically change \"minDate\" or another Editor)\n     * @param {string} optionName - MultipleSelect option name\n     * @param {newValue} newValue - MultipleSelect new option value\n     */\n    changeEditorOption(optionName, newValue) {\n        if (this.columnEditor) {\n            if (!this.columnEditor.editorOptions) {\n                this.columnEditor.editorOptions = {};\n            }\n            this.columnEditor.editorOptions[optionName] = newValue;\n            this.editorElmOptions = { ...this.editorElmOptions, [optionName]: newValue };\n            this._msInstance?.refreshOptions(this.editorElmOptions);\n        }\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._msInstance) {\n            if (isDisabled) {\n                this._msInstance.disable();\n                // clear select when it's newly disabled and not yet empty\n                const currentValues = this.getValue();\n                const isValueBlank = Array.isArray(currentValues) && this.isMultipleSelect ? currentValues?.[0] === '' : currentValues === '';\n                if (prevIsDisabled !== isDisabled && this.isCompositeEditor && !isValueBlank) {\n                    this.reset('', true, true);\n                }\n            }\n            else {\n                this._msInstance.enable();\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        this._msInstance?.focus();\n    }\n    isValueChanged() {\n        const valueSelection = this._msInstance?.getSelects();\n        if (this.isMultipleSelect) {\n            const isEqual = dequal(valueSelection, this.originalValue);\n            return !isEqual;\n        }\n        const value = Array.isArray(valueSelection) && valueSelection.length > 0 ? valueSelection[0] : undefined;\n        return value !== undefined && value !== this.originalValue;\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this.originalValue;\n        if (this._msInstance) {\n            this.originalValue = this.isMultipleSelect ? (inputValue !== undefined ? [inputValue] : []) : inputValue;\n            const selection = this.originalValue === undefined ? [] : [this.originalValue];\n            this._msInstance.setSelects(selection);\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save(forceCommitCurrentEdit = false) {\n        const validation = this.validate();\n        const isValid = validation?.valid ?? false;\n        if ((!this._isDisposingOrCallingSave || forceCommitCurrentEdit) && this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            this.args.commitChanges();\n        }\n    }\n    validate(_targetElm, inputValue) {\n        const isRequired = this.isCompositeEditor ? false : this.columnEditor?.required;\n        const elmValue = inputValue !== undefined ? inputValue : this._msInstance?.getSelects(); // && this.$editorElm.val && this.$editorElm.val();\n        const errorMsg = this.columnEditor && this.columnEditor.errorMessage;\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.isCompositeEditor) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        if (this.validator) {\n            const value = inputValue !== undefined ? inputValue : this.isMultipleSelect ? this.currentValues : this.currentValue;\n            return this.validator(value, this.args);\n        }\n        // by default the editor is almost always valid (except when it's required but not provided)\n        if (isRequired && (elmValue === '' || (Array.isArray(elmValue) && elmValue.length === 0))) {\n            return {\n                valid: false,\n                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD,\n            };\n        }\n        return {\n            valid: true,\n            msg: null,\n        };\n    }\n    //\n    // protected functions\n    // ------------------\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    /**\n     * user might want to filter certain items of the collection\n     * @param inputCollection\n     * @return outputCollection filtered and/or sorted collection\n     */\n    filterCollection(inputCollection) {\n        let outputCollection = inputCollection;\n        // user might want to filter certain items of the collection\n        if (this.columnEditor && this.columnEditor.collectionFilterBy) {\n            const filterBy = this.columnEditor.collectionFilterBy;\n            const filterCollectionBy = this.columnEditor.collectionOptions?.filterResultAfterEachPass ?? null;\n            outputCollection = this._collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);\n        }\n        return outputCollection;\n    }\n    /**\n     * user might want to sort the collection in a certain way\n     * @param inputCollection\n     * @return outputCollection filtered and/or sorted collection\n     */\n    sortCollection(inputCollection) {\n        let outputCollection = inputCollection;\n        // user might want to sort the collection\n        if (this.columnDef && this.columnEditor && this.columnEditor.collectionSortBy) {\n            const sortBy = this.columnEditor.collectionSortBy;\n            outputCollection = this._collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);\n        }\n        return outputCollection;\n    }\n    renderDomElement(inputCollection) {\n        if (!Array.isArray(inputCollection) && this.collectionOptions?.collectionInsideObjectProperty) {\n            const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty;\n            inputCollection = getDescendantProperty(inputCollection, collectionInsideObjectProperty);\n        }\n        if (!Array.isArray(inputCollection)) {\n            throw new Error('The \"collection\" passed to the Select Editor is not a valid array.');\n        }\n        // make a copy of the collection so that we don't impact SelectFilter, this could happen when calling \"addBlankEntry\" or \"addCustomFirstEntry\"\n        let collection = [];\n        if (inputCollection.length > 0) {\n            collection = [...inputCollection];\n        }\n        // user can optionally add a blank entry at the beginning of the collection\n        // make sure however that it wasn't added more than once\n        if (this.collectionOptions?.addBlankEntry &&\n            Array.isArray(collection) &&\n            collection.length > 0 &&\n            collection[0][this.valueName] !== '') {\n            collection.unshift(this.createBlankEntry());\n            this.collection.unshift(this.createBlankEntry()); // also make the change on the original collection\n        }\n        // user can optionally add his own custom entry at the beginning of the collection\n        if (this.collectionOptions?.addCustomFirstEntry &&\n            Array.isArray(collection) &&\n            collection.length > 0 &&\n            collection[0][this.valueName] !== this.collectionOptions.addCustomFirstEntry[this.valueName]) {\n            collection.unshift(this.collectionOptions.addCustomFirstEntry);\n            this.collection.unshift(this.collectionOptions.addCustomFirstEntry); // also make the change on the original collection\n        }\n        // user can optionally add his own custom entry at the end of the collection\n        if (this.collectionOptions?.addCustomLastEntry && Array.isArray(collection) && collection.length > 0) {\n            const lastCollectionIndex = collection.length - 1;\n            if (collection[lastCollectionIndex][this.valueName] !== this.collectionOptions.addCustomLastEntry[this.valueName]) {\n                collection.push(this.collectionOptions.addCustomLastEntry);\n            }\n        }\n        // assign the collection to a temp variable before filtering/sorting the collection\n        let finalCollection = collection;\n        // user might want to filter and/or sort certain items of the collection\n        finalCollection = this.filterCollection(finalCollection);\n        finalCollection = this.sortCollection(finalCollection);\n        // user could also override the collection\n        if (this.columnEditor?.collectionOverride) {\n            const overrideArgs = {\n                column: this.columnDef,\n                dataContext: this.dataContext,\n                grid: this.grid,\n                originalCollections: this.collection,\n            };\n            if (this.args.compositeEditorOptions) {\n                const { formValues, modalType } = this.args.compositeEditorOptions;\n                overrideArgs.compositeEditorOptions = { formValues, modalType };\n            }\n            finalCollection = this.columnEditor.collectionOverride(finalCollection, overrideArgs);\n        }\n        // keep reference of the final collection displayed in the UI\n        this.finalCollection = finalCollection;\n        // step 1, create HTML string template\n        const selectBuildResult = buildMsSelectCollectionList('editor', finalCollection, this.columnDef, this.grid, this.isMultipleSelect, this._translaterService);\n        // step 2, create the DOM Element of the editor\n        // we will later also subscribe to the onClose event to save the Editor whenever that event is triggered\n        this.createDomElement(selectBuildResult.selectElement, selectBuildResult.dataCollection);\n    }\n    /** Create a blank entry that can be added to the collection. It will also reuse the same collection structure provided by the user */\n    createBlankEntry() {\n        const blankEntry = {\n            [this.labelName]: '',\n            [this.valueName]: '',\n        };\n        if (this.labelPrefixName) {\n            blankEntry[this.labelPrefixName] = '';\n        }\n        if (this.labelSuffixName) {\n            blankEntry[this.labelSuffixName] = '';\n        }\n        return blankEntry;\n    }\n    /**\n     * From the Select DOM Element created earlier, create a Multiple/Single Select Editor using the multiple-select-vanilla.js lib\n     * @param {Object} selectElement\n     */\n    createDomElement(selectElement, dataCollection) {\n        const cellContainer = this.args.container;\n        if (selectElement && cellContainer && typeof cellContainer.appendChild === 'function') {\n            emptyElement(cellContainer);\n            cellContainer.appendChild(selectElement);\n        }\n        // add placeholder when found\n        const placeholder = this.columnEditor?.placeholder ?? '';\n        this.defaultOptions.placeholder = placeholder || '';\n        this.editorElmOptions = { ...this.defaultOptions, ...this.editorOptions, data: dataCollection };\n        this._msInstance = multipleSelect(selectElement, this.editorElmOptions);\n        this.editorElm = this._msInstance.getParentElement();\n        if (!this.isCompositeEditor) {\n            this.show(this.delayOpening);\n        }\n    }\n    handleChangeOnCompositeEditor(compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValues = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValues);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValues);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData());\n    }\n}\n//# sourceMappingURL=selectEditor.js.map","import { SelectEditor } from './selectEditor.js';\nexport class MultipleSelectEditor extends SelectEditor {\n    /**\n     * Initialize the Editor\n     */\n    constructor(args, delayOpening = 0) {\n        super(args, true, delayOpening);\n        this.args = args;\n        this.delayOpening = delayOpening;\n    }\n}\n//# sourceMappingURL=multipleSelectEditor.js.map","import { SelectEditor } from './selectEditor.js';\nexport class SingleSelectEditor extends SelectEditor {\n    /**\n     * Initialize the Editor\n     */\n    constructor(args, delayOpening = 0) {\n        super(args, false, delayOpening);\n        this.args = args;\n        this.delayOpening = delayOpening;\n    }\n}\n//# sourceMappingURL=singleSelectEditor.js.map","import { BindingEventService } from '@slickgrid-universal/binding';\nimport { createDomElement, setDeepValue, toSentenceCase } from '@slickgrid-universal/utils';\nimport { Constants } from '../constants.js';\nimport { getDescendantProperty } from '../services/utilities.js';\nimport { sliderValidator } from '../editorValidators/sliderValidator.js';\nimport { SlickEventData } from '../core/index.js';\n/*\n * An example of a 'detached' editor.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class SliderEditor {\n    constructor(args) {\n        this.args = args;\n        this._defaultValue = 0;\n        this._isValueTouched = false;\n        this._sliderNumberElm = null;\n        /** is the Editor disabled? */\n        this.disabled = false;\n        if (!args) {\n            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');\n        }\n        this.grid = args.grid;\n        this.gridOptions = (this.grid.getOptions() || {});\n        this._bindEventService = new BindingEventService();\n        this.init();\n    }\n    /** Get Column Definition object */\n    get columnDef() {\n        return this.args.column;\n    }\n    /** Get Column Editor object */\n    get columnEditor() {\n        return this.columnDef?.editor ?? {};\n    }\n    /** Getter for the item data context object */\n    get dataContext() {\n        return this.args.item;\n    }\n    /** Getter for the Editor DOM Element */\n    get editorDomElement() {\n        return this._editorElm;\n    }\n    /** Getter for the Editor Input DOM Element */\n    get editorInputDomElement() {\n        return this._inputElm;\n    }\n    get editorOptions() {\n        return { ...this.gridOptions.defaultEditorOptions?.slider, ...this.columnEditor?.editorOptions };\n    }\n    get hasAutoCommitEdit() {\n        return this.gridOptions.autoCommitEdit ?? false;\n    }\n    /** Getter for the current Slider Options */\n    get sliderOptions() {\n        return this._sliderOptions;\n    }\n    /** Get the Validator function, can be passed in Editor property or Column Definition */\n    get validator() {\n        return this.columnEditor.validator ?? this.columnDef?.validator;\n    }\n    init() {\n        this._cellContainerElm = this.args?.container;\n        if (this._cellContainerElm && this.columnDef) {\n            // define the input & slider number IDs\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            // create HTML string template\n            this._editorElm = this.buildDomElement();\n            if (!compositeEditorOptions) {\n                this.focus();\n            }\n            // watch on change event\n            this._cellContainerElm.appendChild(this._editorElm);\n            this._bindEventService.bind(this._sliderTrackElm, ['click', 'mouseup'], this.sliderTrackClicked.bind(this));\n            this._bindEventService.bind(this._inputElm, ['change', 'mouseup', 'touchend'], this.handleChangeEvent.bind(this));\n            // if user chose to display the slider number on the right side, then update it every time it changes\n            // we need to use both \"input\" and \"change\" event to be all cross-browser\n            this._bindEventService.bind(this._inputElm, ['input', 'change'], this.handleChangeSliderNumber.bind(this));\n        }\n    }\n    cancel() {\n        if (this._inputElm) {\n            this._inputElm.value = `${this._originalValue}`;\n        }\n        this.args.cancelChanges();\n    }\n    destroy() {\n        this._bindEventService.unbindAll();\n        this._inputElm?.remove();\n        this._editorElm?.remove();\n        this._sliderTrackElm?.remove();\n    }\n    disable(isDisabled = true) {\n        const prevIsDisabled = this.disabled;\n        this.disabled = isDisabled;\n        if (this._inputElm) {\n            if (isDisabled) {\n                this._inputElm.disabled = true;\n                // clear value when it's newly disabled and not empty\n                const currentValue = this.getValue();\n                if (prevIsDisabled !== isDisabled && this.args?.compositeEditorOptions && currentValue !== '') {\n                    this.reset(0, true, true);\n                }\n            }\n            else {\n                this._inputElm.disabled = false;\n            }\n        }\n    }\n    focus() {\n        // always set focus on grid first so that plugin to copy range (SlickCellExternalCopyManager) would still be able to paste at that position\n        this.grid.focus();\n        this._inputElm?.focus();\n    }\n    show() {\n        const isCompositeEditor = !!this.args?.compositeEditorOptions;\n        if (isCompositeEditor) {\n            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor\n            this.applyInputUsabilityState();\n        }\n    }\n    getValue() {\n        return this._inputElm?.value ?? '';\n    }\n    setValue(value, isApplyingValue = false, triggerOnCompositeEditorChange = true) {\n        if (this._inputElm) {\n            this._inputElm.value = `${value}`;\n        }\n        if (this._sliderNumberElm) {\n            this._sliderNumberElm.textContent = `${value}`;\n        }\n        if (isApplyingValue) {\n            this.applyValue(this.args.item, this.serializeValue());\n            // if it's set by a Composite Editor, then also trigger a change for it\n            const compositeEditorOptions = this.args.compositeEditorOptions;\n            if (compositeEditorOptions && triggerOnCompositeEditorChange) {\n                this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'system');\n            }\n        }\n    }\n    applyValue(item, state) {\n        const fieldName = this.columnDef?.field ?? '';\n        if (fieldName !== undefined) {\n            const isComplexObject = fieldName?.indexOf('.') > 0; // is the field a complex object, \"address.streetNumber\"\n            const validation = this.validate(undefined, state);\n            const newValue = validation && validation.valid ? state : '';\n            // set the new value to the item datacontext\n            if (isComplexObject) {\n                // when it's a complex object, user could override the object path (where the editable object is located)\n                // else we use the path provided in the Field Column Definition\n                const objectPath = this.columnEditor.complexObjectPath ?? fieldName ?? '';\n                setDeepValue(item, objectPath, newValue);\n            }\n            else if (item) {\n                item[fieldName] = newValue;\n            }\n        }\n    }\n    /**\n     * Dynamically change an Editor option, this is especially useful with Composite Editor\n     * since this is the only way to change option after the Editor is created (for example dynamically change \"minDate\" or another Editor)\n     * @param {string} optionName - Slider editor option name\n     * @param {newValue} newValue - Slider editor new option value\n     */\n    changeEditorOption(optionName, newValue) {\n        if (this.columnEditor) {\n            this.columnEditor.editorOptions ??= {};\n            this.columnEditor.editorOptions[optionName] = newValue;\n            this._sliderOptions[optionName] = newValue;\n            switch (optionName) {\n                case 'hideSliderNumber':\n                    this.renderSliderNumber(this._editorElm, 0);\n                    break;\n                case 'sliderStartValue':\n                    this._inputElm.value = `${newValue}`;\n                    this._inputElm.defaultValue = `${newValue}`;\n                    break;\n                case 'maxValue':\n                case 'minValue':\n                case 'step':\n                    this._inputElm[optionName.replace('Value', '')] = `${newValue}`;\n                    break;\n            }\n        }\n    }\n    isValueChanged() {\n        const elmValue = this._inputElm?.value ?? '';\n        return !(elmValue === '' && this._originalValue === undefined) && +elmValue !== this._originalValue;\n    }\n    isValueTouched() {\n        return this._isValueTouched;\n    }\n    loadValue(item) {\n        const fieldName = this.columnDef?.field ?? '';\n        if (item && fieldName !== undefined) {\n            // is the field a complex object, \"address.streetNumber\"\n            const isComplexObject = fieldName?.indexOf('.') > 0;\n            // prettier-ignore\n            let value = (isComplexObject) ? getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) ? item[fieldName] : this._defaultValue);\n            if (value === '' || value === null || value === undefined) {\n                value = this._defaultValue; // load default value when item doesn't have any value\n            }\n            this._originalValue = +value;\n            if (this._inputElm) {\n                this._inputElm.value = `${value}`;\n                this._inputElm.title = `${value}`;\n            }\n            if (this._sliderNumberElm) {\n                this._sliderNumberElm.textContent = `${value}`;\n            }\n        }\n        this.updateTrackFilledColorWhenEnabled();\n    }\n    /**\n     * You can reset or clear the input value,\n     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)\n     */\n    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {\n        const inputValue = value ?? this._originalValue ?? 0;\n        if (this._inputElm) {\n            this._inputElm.value = `${inputValue}`;\n        }\n        if (this._sliderNumberElm) {\n            this._sliderNumberElm.textContent = `${inputValue}`;\n        }\n        this._isValueTouched = false;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions && triggerCompositeEventWhenExist) {\n            const shouldDeleteFormValue = !clearByDisableCommand;\n            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);\n        }\n    }\n    save() {\n        const validation = this.validate();\n        const isValid = (validation && validation.valid) || false;\n        if (this.hasAutoCommitEdit && isValid) {\n            // do not use args.commitChanges() as this sets the focus to the next row.\n            // also the select list will stay shown when clicking off the grid\n            this.grid.getEditorLock().commitCurrentEdit();\n        }\n        else {\n            this.args.commitChanges();\n        }\n    }\n    serializeValue() {\n        const elmValue = this._inputElm?.value ?? '';\n        return elmValue !== '' ? parseInt(elmValue, 10) : this._originalValue;\n    }\n    validate(_targetElm, inputValue) {\n        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form\n        if (this.args.compositeEditorOptions) {\n            this.applyInputUsabilityState();\n        }\n        // when field is disabled, we can assume it's valid\n        if (this.disabled) {\n            return { valid: true, msg: '' };\n        }\n        const elmValue = inputValue !== undefined ? inputValue : this._inputElm?.value;\n        return sliderValidator(elmValue, {\n            editorArgs: this.args,\n            errorMessage: this.columnEditor.errorMessage,\n            minValue: this.columnEditor.minValue,\n            maxValue: this.columnEditor.maxValue,\n            required: this.args?.compositeEditorOptions ? false : this.columnEditor.required,\n            validator: this.validator,\n        });\n    }\n    //\n    // protected functions\n    // ------------------\n    /**\n     * Create the HTML template as a string\n     */\n    buildDomElement() {\n        const columnId = this.columnDef?.id ?? '';\n        const title = this.columnEditor.title ?? '';\n        const minValue = +(this.columnEditor.minValue ?? Constants.SLIDER_DEFAULT_MIN_VALUE);\n        const maxValue = +(this.columnEditor.maxValue ?? Constants.SLIDER_DEFAULT_MAX_VALUE);\n        const step = +(this.columnEditor.valueStep ?? Constants.SLIDER_DEFAULT_STEP);\n        const defaultValue = this.editorOptions.sliderStartValue ?? minValue;\n        this._defaultValue = +defaultValue;\n        this._sliderTrackElm = createDomElement('div', { className: 'slider-track' });\n        this._inputElm = createDomElement('input', {\n            type: 'range',\n            title,\n            defaultValue: `${defaultValue}`,\n            value: `${defaultValue}`,\n            min: `${minValue}`,\n            max: `${maxValue}`,\n            step: `${this.columnEditor.valueStep ?? Constants.SLIDER_DEFAULT_STEP}`,\n            ariaLabel: this.columnEditor.ariaLabel ?? `${toSentenceCase(columnId + '')} Slider Editor`,\n            className: `slider-editor-input editor-${columnId}`,\n        });\n        const divContainerElm = createDomElement('div', { className: 'slider-container slider-editor' });\n        const sliderInputContainerElm = createDomElement('div', { className: 'slider-input-container slider-editor' });\n        sliderInputContainerElm.appendChild(this._sliderTrackElm);\n        sliderInputContainerElm.appendChild(this._inputElm);\n        divContainerElm.appendChild(sliderInputContainerElm);\n        this.renderSliderNumber(divContainerElm, defaultValue);\n        // merge options with optional user's custom options\n        this._sliderOptions = { minValue, maxValue, step };\n        return divContainerElm;\n    }\n    renderSliderNumber(divContainerElm, defaultValue) {\n        if (!this.editorOptions.hideSliderNumber) {\n            divContainerElm.classList.add('input-group');\n            const divGroupAddonElm = createDomElement('div', { className: 'input-group-addon input-group-append slider-value' });\n            this._sliderNumberElm = createDomElement('span', { className: `input-group-text`, textContent: `${defaultValue}` });\n            divGroupAddonElm.appendChild(this._sliderNumberElm);\n            divContainerElm.appendChild(divGroupAddonElm);\n        }\n        else {\n            divContainerElm.querySelector('.slider-value')?.remove();\n        }\n    }\n    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */\n    applyInputUsabilityState() {\n        const activeCell = this.grid.getActiveCell();\n        const isCellEditable = this.grid.onBeforeEditCell\n            .notify({\n            ...activeCell,\n            item: this.dataContext,\n            column: this.args.column,\n            grid: this.grid,\n            target: 'composite',\n            compositeEditorOptions: this.args.compositeEditorOptions,\n        })\n            .getReturnValue();\n        this.disable(isCellEditable === false);\n    }\n    handleChangeEvent(event) {\n        this._isValueTouched = true;\n        const compositeEditorOptions = this.args.compositeEditorOptions;\n        if (compositeEditorOptions) {\n            this.handleChangeOnCompositeEditor(event, compositeEditorOptions);\n        }\n        else {\n            this.save();\n        }\n    }\n    handleChangeSliderNumber(event) {\n        const value = event.target?.value ?? '';\n        if (value !== '') {\n            if (!this.editorOptions.hideSliderNumber && this._sliderNumberElm) {\n                this._sliderNumberElm.textContent = value;\n            }\n            this._inputElm.title = value;\n            // trigger mouse enter event on the editor for optionally hooked SlickCustomTooltip\n            if (!this.args?.compositeEditorOptions) {\n                this.grid.onMouseEnter.notify({ column: this.columnDef, grid: this.grid }, new SlickEventData(event));\n            }\n        }\n        this.updateTrackFilledColorWhenEnabled();\n    }\n    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {\n        const activeCell = this.grid.getActiveCell();\n        const column = this.args.column;\n        const columnId = this.columnDef?.id ?? '';\n        const item = this.dataContext;\n        const grid = this.grid;\n        const newValue = this.serializeValue();\n        // when valid, we'll also apply the new value to the dataContext item object\n        if (this.validate().valid) {\n            this.applyValue(this.dataContext, newValue);\n        }\n        this.applyValue(compositeEditorOptions.formValues, newValue);\n        const isExcludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n        if (isCalledByClearValue ||\n            (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {\n            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object\n        }\n        grid.onCompositeEditorChange.notify({\n            ...activeCell,\n            item,\n            grid,\n            column,\n            formValues: compositeEditorOptions.formValues,\n            editors: compositeEditorOptions.editors,\n            triggeredBy,\n        }, new SlickEventData(event));\n    }\n    sliderTrackClicked(e) {\n        e.preventDefault();\n        const sliderTrackX = e.offsetX;\n        const sliderTrackWidth = this._sliderTrackElm.offsetWidth;\n        const trackPercentPosition = ((sliderTrackX + 0) * 100) / sliderTrackWidth;\n        if (this._inputElm) {\n            // automatically move to calculated clicked percentage\n            // dispatch a change event to update its value & number when shown\n            this._inputElm.value = `${trackPercentPosition}`;\n            this._inputElm.dispatchEvent(new Event('change'));\n        }\n    }\n    updateTrackFilledColorWhenEnabled() {\n        if (this.editorOptions.enableSliderTrackColoring && this._inputElm) {\n            const percent1 = 0;\n            const percent2 = ((+this.getValue() - +this._inputElm.min) / (this.sliderOptions?.maxValue ?? 0 - +this._inputElm.min)) * 100;\n            const bg = 'linear-gradient(to right, %b %p1, %c %p1, %c %p2, %b %p2)'\n                .replace(/%b/g, '#eee')\n                .replace(/%c/g, (this.editorOptions?.sliderTrackFilledColor ?? 'var(--slick-slider-filter-thumb-color, #86bff8)'))\n                .replace(/%p1/g, `${percent1}%`)\n                .replace(/%p2/g, `${percent2}%`);\n            this._sliderTrackElm.style.background = bg;\n            this._sliderOptions.sliderTrackBackground = bg;\n        }\n    }\n}\n//# sourceMappingURL=sliderEditor.js.map","import { AutocompleterEditor } from './autocompleterEditor.js';\nimport { CheckboxEditor } from './checkboxEditor.js';\nimport { DateEditor } from './dateEditor.js';\nimport { DualInputEditor } from './dualInputEditor.js';\nimport { FloatEditor } from './floatEditor.js';\nimport { InputEditor } from './inputEditor.js';\nimport { InputPasswordEditor } from './inputPasswordEditor.js';\nimport { IntegerEditor } from './integerEditor.js';\nimport { LongTextEditor } from './longTextEditor.js';\nimport { MultipleSelectEditor } from './multipleSelectEditor.js';\nimport { SingleSelectEditor } from './singleSelectEditor.js';\nimport { SliderEditor } from './sliderEditor.js';\nexport const Editors = {\n    /** Autocompleter Editor (using https://github.com/kraaden/autocomplete) */\n    autocompleter: AutocompleterEditor,\n    /** Checkbox Editor (uses native checkbox DOM element) */\n    checkbox: CheckboxEditor,\n    /** Date Picker Editor (which uses 3rd party lib \"vanilla-calendar-pro\") */\n    date: DateEditor,\n    /** Dual Input Editor, default input type is text but it could be (integer/float/number/password/text) */\n    dualInput: DualInputEditor,\n    /** Float Number Editor using an input of type \"number\" */\n    float: FloatEditor,\n    /** Integer Number Editor using an input of type \"number\" */\n    integer: IntegerEditor,\n    /**\n     * Long Text Editor (uses a textarea) for longer text (you can also optionally configure its size).\n     * When ready to Save you can click on the \"Save\" and/or use shortcuts (Ctrl+ENTER or Ctrl+s).\n     */\n    longText: LongTextEditor,\n    /** Multiple Select editor (which uses 3rd party lib \"multiple-select.js\") */\n    multipleSelect: MultipleSelectEditor,\n    /** Editor with an input of type Password (note that only the text shown in the UI will be masked, the editor value is still plain text) */\n    password: InputPasswordEditor,\n    /** Single Select editor (which uses 3rd party lib \"multiple-select.js\") */\n    singleSelect: SingleSelectEditor,\n    /** Slider Editor using an input of type \"range\" */\n    slider: SliderEditor,\n    /** text Editor using an input of type \"text\" (this is the default editor when no type is provided) */\n    text: InputEditor,\n};\n//# sourceMappingURL=editors.index.js.map"],"names":["textValidator","inputValue","options","errorMsg","isRequired","minLength","maxLength","operatorConditionalType","mapValidation","isValid","outputMsg","inputValueLength","Constants","matched","defaultErrorMsg","MIN_LENGTH","AutocompleterEditor","args","BindingEventService","_a","_b","customStructure","columnType","_c","FieldType","_d","_e","newCollection","_f","isDisabled","prevIsDisabled","currentValue","isApplyingValue","triggerOnCompositeEditorChange","compositeEditorOptions","item","state","newValue","fieldName","findOrDefault","collectionItem","isObject","isComplexObject","validation","objectPath","setDeepValue","elmValue","lastEventKey","isValueChanged","data","getDescendantProperty","clearByDisableCommand","shouldDeleteFormValue","value","triggerCompositeEventWhenExist","navigateDown","_targetElm","val","activeCell","isCellEditable","event","triggeredBy","isCalledByClearValue","column","columnId","grid","isExcludeDisabledFieldFormValues","SlickEventData","selectedItem","hasCustomRenderItemCallback","itemLabel","row","cell","createDomElement","templateString","tmpElm","isRenderHtmlEnabled","prefixText","labelText","suffixText","finalText","sanitizedText","div","collection","placeholder","title","closeButtonGroupElm","finalCollection","overrideArgs","formValues","modalType","x","isPrimitiveValue","c","_g","_h","_input","_inputRect","container","_i","classNameToList","_j","toKebabCase","_k","_l","addAutocompleteLoadingByOverridingFetch","autocompleter","searchTerm","updateCallback","CheckboxEditor","toSentenceCase","cellContainer","isChecked","DateEditor","gridOptions","outputFieldType","outputFormat","mapTempoDateFormatWithFieldType","currentLocale","pickerFormat","pickerOptions","dirtyHtml","self","selectedDate","formatDateByFieldType","tempoDate","parse","extend","inputCssClasses","VanillaCalendar","setPickerDates","emptyElement","resetDatePicker","optionName","isCompositeEditor","saveFieldType","isChanged","elmDateStr","inputFieldType","formattedDate","domValue","floatValidator","floatNumber","decPlaces","minValue","maxValue","integerValidator","intNumber","sliderValidator","DualInputEditor","SlickEventHandler","containerElm","position","targetClassNames","side","editorSideParams","idPropName","itemId","fieldType","input","obj","leftInputValue","rightInputValue","isLeftInputTypeNumber","isRightInputTypeNumber","resultLeftValue","resultRightValue","values","fieldNameToUse","complexFieldNames","stateValue","newValueFromComplex","leftElmValue","rightElmValue","leftEditorParams","rightEditorParams","leftResult","rightResult","originalValuePosition","inputVarPosition","itemValue","decimalPlaces","inputLeftValue","inputRightValue","leftValue","rightValue","rtn","positionSide","sideParams","decimals","zeroString","i","inputValidation","posValidation","leftValidation","rightValidation","positionEditorParams","currentVal","commonValidator","baseValidatorOptions","leftInputId","rightInputId","newValues","typingDelay","DEFAULT_DECIMAL_PLACES","InputEditor","inputType","type","FloatEditor","IntegerEditor","output","LongTextEditor","cancelText","saveText","translationPrefix","getTranslationPrefix","cancelKey","saveKey","textAreaRows","_m","_n","editorFooterElm","countContainerElm","cancelBtnElm","saveBtnElm","_o","parentPosition","containerOffset","getOffset","containerHeight","containerWidth","calculatedEditorHeight","calculatedEditorWidth","calculatedBodyHeight","calculatedBodyWidth","newPositionTop","newPositionLeft","marginRightAdjustment","e","key","isTruncated","newText","inputElm","text","SelectEditor","isMultipleSelect","delayOpening","libOptions","reason","selectedValuesSet","separatorBetweenLabels","isIncludingPrefixSuffix","serializeComplexValueFormat","selectedValues","selectedValue","itemFound","CollectionService","openDelay","currentValues","isValueBlank","valueSelection","dequal","selection","forceCommitCurrentEdit","inputCollection","outputCollection","filterBy","filterCollectionBy","sortBy","collectionInsideObjectProperty","lastCollectionIndex","selectBuildResult","buildMsSelectCollectionList","blankEntry","selectElement","dataCollection","multipleSelect","MultipleSelectEditor","SingleSelectEditor","SliderEditor","step","defaultValue","divContainerElm","sliderInputContainerElm","divGroupAddonElm","sliderTrackX","sliderTrackWidth","trackPercentPosition","percent2","bg","Editors"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}