{"version":3,"file":"example36-IfZ14n5x.js","sources":["../../src/examples/slickgrid/example36.$au.ts","../../src/examples/slickgrid/example36.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example36.scss\";\nexport const name = \"example36\";\nexport const template = \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n  <h2>\\n    Example 36: Excel Export Formulas\\n    <span class=\\\"float-end\\\">\\n      <a style=\\\"font-size: 18px\\\"\\n         target=\\\"_blank\\\"\\n         href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example36.ts\\\">\\n        <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n      </a>\\n    </span>\\n    <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n  </h2>\\n\\n  <div class=\\\"subtitle\\\" >\\n    Grid with Excel Formulas (<a href=\\\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/export-to-excel#cell-value-parser\\\" target=\\\"_blank\\\">Wiki docs</a>).\\n    Calculate Totals via Formatters in the UI, but use Excel Formula when exporting via <code>excelExportOptions.valueParserCallback</code>\\n    When Grouped we will also calculate the Group Totals in the UI via Group Formatter and we again use Excel Formula to calculate the Group Totals (sum) dynamically.\\n    For Grouping we need to use <code>groupTotalsExcelExportOptions.valueParserCallback</code> instead.\\n  </div>\\n\\n  <section class=\\\"row mb-2\\\">\\n    <div class=\\\"mb-1\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"exportToExcel()\\\" data-test=\\\"export-excel-btn\\\">\\n        <span class=\\\"mdi mdi-file-excel-outline text-success\\\"></span>\\n        <span>Export to Excel</span>\\n      </button>\\n      <span>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"groupByTaxable()\\\" data-test=\\\"group-by-btn\\\">\\n          <span>Group by Taxable</span>\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"clearGrouping()\\\" data-test=\\\"clear-grouping-btn\\\">\\n          <span>Clear grouping</span>\\n        </button>\\n      </span>\\n      <span class=\\\"ms-4 text-bold d-inline-flex align-items-center gap-4px\\\">\\n        Tax Rate (%):\\n        <input type=\\\"number\\\" value.bind=\\\"taxRate\\\" class=\\\"narrow input\\\" step=\\\"0.25\\\" data-test=\\\"taxrate\\\" />\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"updateTaxRate()\\\" data-test=\\\"update-btn\\\">\\n          Update\\n        </button>\\n      </span>\\n    </div>\\n  </section>\\n\\n  <aurelia-slickgrid grid-id=\\\"grid36\\\"\\n    column-definitions.bind=\\\"columnDefinitions\\\"\\n    grid-options.bind=\\\"gridOptions\\\"\\n    dataset.bind=\\\"dataset\\\"\\n    instances.bind=\\\"aureliaGrid\\\"\\n    on-cell-change.trigger=\\\"invalidateAll()\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import {\n  type Aggregator,\n  Aggregators,\n  type AureliaGridInstance,\n  type Column,\n  Editors,\n  type ExcelCellValueParserArgs,\n  type ExcelGroupValueParserArgs,\n  FieldType,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  GroupTotalFormatters,\n  type Grouping,\n  type SlickGrid,\n  type SlickGroupTotals,\n} from 'aurelia-slickgrid';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\n\nimport './example36.scss';\n\ninterface GroceryItem {\n  id: number;\n  name: string;\n  qty: number;\n  price: number;\n  taxable: boolean;\n  subTotal: number;\n  taxes: number;\n  total: number;\n}\n\n/** Check if the current item (cell) is editable or not */\nfunction checkItemIsEditable(_dataContext: GroceryItem, columnDef: Column, grid: SlickGrid) {\n  const gridOptions = grid.getOptions();\n  const hasEditor = columnDef.editor;\n  const isGridEditable = gridOptions.editable;\n  const isEditable = (isGridEditable && hasEditor);\n\n  return isEditable;\n}\n\nconst customEditableInputFormatter: Formatter = (_row, _cell, value, columnDef, dataContext: GroceryItem, grid) => {\n  const isEditableItem = checkItemIsEditable(dataContext, columnDef, grid);\n  value = (value === null || value === undefined) ? '' : value;\n  const divElm = document.createElement('div');\n  divElm.className = 'editing-field';\n  if (value instanceof HTMLElement) {\n    divElm.appendChild(value);\n  } else {\n    divElm.textContent = value;\n  }\n  return isEditableItem ? divElm : value;\n};\n\n/** Create a Custom Aggregator in order to calculate all Totals by accessing other fields of the item dataContext */\nclass CustomSumAggregator implements Aggregator {\n  private _sum = 0;\n  private _type = 'sum' as const;\n\n  constructor(public readonly field: number | string, public taxRate: number) { }\n\n  get type(): string {\n    return this._type;\n  }\n\n  init() {\n    this._sum = 0;\n  }\n\n  accumulate(item: GroceryItem) {\n    if (this.field === 'taxes' && item['taxable']) {\n      this._sum += item['price'] * item['qty'] * (this.taxRate / 100);\n    }\n    if (this.field === 'subTotal') {\n      this._sum += item['price'] * item['qty'];\n    }\n    if (this.field === 'total') {\n      let taxes = 0;\n      if (item['taxable']) {\n        taxes = item['price'] * item['qty'] * (this.taxRate / 100);\n      }\n      this._sum += item['price'] * item['qty'] + taxes;\n    }\n  }\n\n  storeResult(groupTotals: any) {\n    if (!groupTotals || groupTotals[this._type] === undefined) {\n      groupTotals[this._type] = {};\n    }\n    groupTotals[this._type][this.field] = this._sum;\n  }\n}\n\nexport class Example36 {\n  columnDefinitions: Column<GroceryItem>[] = [];\n  gridOptions!: GridOption;\n  dataset: GroceryItem[] = [];\n  aureliaGrid!: AureliaGridInstance;\n  excelExportService: ExcelExportService;\n  hideSubTitle = false;\n  isDataGrouped = false;\n  taxRate = 7.5;\n\n  constructor() {\n    this.excelExportService = new ExcelExportService();\n    this.defineGrid();\n  }\n\n  attached() {\n    // mock a dataset\n    this.dataset = this.getData();\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'sel', name: '#', field: 'id',\n        headerCssClass: 'header-centered',\n        cssClass: 'cell-unselectable',\n        excludeFromExport: true,\n        maxWidth: 30,\n      },\n      {\n        id: 'name', name: 'Name', field: 'name', sortable: true, width: 140, filterable: true,\n        excelExportOptions: { width: 18 }\n      },\n      {\n        id: 'price', name: 'Price', field: 'price', type: FieldType.number,\n        editor: { model: Editors.float, decimal: 2 }, sortable: true, width: 70, filterable: true,\n        formatter: Formatters.dollar, groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollarBold,\n        groupTotalsExcelExportOptions: {\n          style: {\n            font: { bold: true, size: 11.5 },\n            format: '$0.00', // currency format\n            border: { top: { color: 'FF747474', style: 'thick' } },\n          },\n          valueParserCallback: this.excelGroupCellParser.bind(this),\n        }\n      },\n      {\n        id: 'qty', name: 'Quantity', field: 'qty', type: FieldType.number,\n        groupTotalsFormatter: GroupTotalFormatters.sumTotalsBold,\n        groupTotalsExcelExportOptions: {\n          style: {\n            font: { bold: true, size: 11.5 },\n            border: { top: { color: 'FF747474', style: 'thick' } },\n          },\n          valueParserCallback: this.excelGroupCellParser.bind(this),\n        },\n        params: { minDecimal: 0, maxDecimal: 0 },\n        editor: { model: Editors.integer }, sortable: true, width: 60, filterable: true\n      },\n      {\n        id: 'subTotal', name: 'Sub-Total', field: 'subTotal', cssClass: 'text-sub-total',\n        type: FieldType.number, sortable: true, width: 70, filterable: true,\n        exportWithFormatter: false,\n        formatter: Formatters.multiple, groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollarBold,\n        params: {\n          formatters: [\n            (_row, _cell, _value, _coldef, dataContext) => dataContext.price * dataContext.qty,\n            Formatters.dollar\n          ] as Formatter[]\n        },\n        excelExportOptions: {\n          style: {\n            font: { outline: true, italic: true, color: 'FF215073' },\n            format: '$0.00', // currency format\n          },\n          width: 12,\n          valueParserCallback: this.excelRegularCellParser.bind(this),\n        },\n        groupTotalsExcelExportOptions: {\n          style: {\n            font: { bold: true, italic: true, size: 11.5 },\n            format: '$0.00', // currency format\n            border: { top: { color: 'FF747474', style: 'thick' } },\n          },\n          valueParserCallback: this.excelGroupCellParser.bind(this),\n        }\n      },\n      {\n        id: 'taxable', name: 'Taxable', field: 'taxable', cssClass: 'text-center', sortable: true, width: 60, filterable: true,\n        formatter: Formatters.checkmarkMaterial,\n        exportCustomFormatter: (_row, _cell, val) => val ? 'âœ“' : '',\n        excelExportOptions: {\n          style: {\n            alignment: { horizontal: 'center' },\n          },\n        }\n      },\n      {\n        id: 'taxes', name: 'Taxes', field: 'taxes', cssClass: 'text-taxes',\n        type: FieldType.number, sortable: true, width: 70, filterable: true,\n        formatter: Formatters.multiple, groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollarBold,\n        params: {\n          formatters: [\n            (_row, _cell, _value, _coldef, dataContext) => {\n              if (dataContext.taxable) {\n                return dataContext.price * dataContext.qty * (this.taxRate / 100);\n              }\n              return null;\n            },\n            Formatters.dollar\n          ] as Formatter[]\n        },\n        excelExportOptions: {\n          style: {\n            font: { outline: true, italic: true, color: 'FFC65911' },\n            format: '$0.00', // currency format\n          },\n          width: 12,\n          valueParserCallback: this.excelRegularCellParser.bind(this),\n        },\n        groupTotalsExcelExportOptions: {\n          style: {\n            font: { bold: true, italic: true, color: 'FFC65911', size: 11.5 },\n            format: '$0.00', // currency format\n            border: { top: { color: 'FF747474', style: 'thick' } },\n          },\n          valueParserCallback: this.excelGroupCellParser.bind(this),\n        }\n      },\n      {\n        id: 'total', name: 'Total', field: 'total', type: FieldType.number, sortable: true, width: 70, filterable: true,\n        cssClass: 'text-total', formatter: Formatters.multiple, groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollarBold,\n        params: {\n          formatters: [\n            (_row, _cell, _value, _coldef, dataContext) => {\n              let subTotal = dataContext.price * dataContext.qty;\n              if (dataContext.taxable) {\n                subTotal += subTotal * (this.taxRate / 100);\n              }\n              return subTotal;\n            },\n            Formatters.dollar\n          ] as Formatter[]\n        },\n        excelExportOptions: {\n          style: {\n            font: { outline: true, bold: true, color: 'FF005A9E' },\n            format: '$0.00', // currency format\n          },\n          width: 12,\n          valueParserCallback: this.excelRegularCellParser.bind(this),\n        },\n        groupTotalsExcelExportOptions: {\n          style: {\n            font: { bold: true, color: 'FF005A9E', size: 12 },\n            format: '$0.00',\n            border: { top: { color: 'FF747474', style: 'thick' } },\n          },\n          valueParserCallback: this.excelGroupCellParser.bind(this),\n        }\n      },\n    ];\n\n    this.gridOptions = {\n      autoAddCustomEditorFormatter: customEditableInputFormatter,\n      gridHeight: 410,\n      gridWidth: 750,\n      enableCellNavigation: true,\n      autoEdit: true,\n      autoCommitEdit: true,\n      editable: true,\n      rowHeight: 33,\n      formatterOptions: {\n        maxDecimal: 2,\n        minDecimal: 2,\n      },\n      enableGrouping: true,\n      externalResources: [this.excelExportService],\n      enableExcelExport: true,\n      excelExportOptions: {\n        filename: 'grocery-list',\n        sanitizeDataExport: true,\n        sheetName: 'Grocery List',\n        columnHeaderStyle: {\n          font: { color: 'FFFFFFFF' },\n          fill: { type: 'pattern', patternType: 'solid', fgColor: 'FF4a6c91' }\n        },\n\n        // optionally pass a custom header to the Excel Sheet\n        // a lot of the info can be found on Web Archive of Excel-Builder\n        // https://ghiscoding.gitbook.io/excel-builder-vanilla/cookbook/fonts-and-colors\n        customExcelHeader: (workbook, sheet) => {\n          const excelFormat = workbook.getStyleSheet().createFormat({\n            // every color is prefixed with FF, then regular HTML color\n            font: { size: 18, fontName: 'Calibri', bold: true, color: 'FFFFFFFF' },\n            alignment: { wrapText: true, horizontal: 'center' },\n            fill: { type: 'pattern', patternType: 'solid', fgColor: 'FF203764' },\n          });\n          sheet.setRowInstructions(0, { height: 40 }); // change height of row 0\n\n          // excel cells start with A1 which is upper left corner\n          const customTitle = 'Grocery Shopping List';\n          const lastCellMerge = this.isDataGrouped ? 'H1' : 'G1';\n          sheet.mergeCells('A1', lastCellMerge);\n          sheet.data.push([{ value: customTitle, metadata: { style: excelFormat.id } }]);\n        },\n      },\n    };\n  }\n\n  invalidateAll() {\n    // make sure to call both refresh/invalid in this order so that whenever a cell changes we recalculate all Groups\n    this.aureliaGrid.dataView?.refresh();\n    this.aureliaGrid.slickGrid?.invalidate();\n  }\n\n  updateTaxRate() {\n    // since Aggregator are cached and we provided the Tax Rate to our custom Aggregator,\n    // we need to recompile them by resetting the Group\n    if (this.isDataGrouped) {\n      this.groupByTaxable();\n    }\n\n    this.invalidateAll();\n  }\n\n  exportToExcel() {\n    this.excelExportService.exportToExcel();\n  }\n\n  excelGroupCellParser(totals: SlickGroupTotals, { columnDef, excelFormatId, dataRowIdx }: ExcelGroupValueParserArgs) {\n    const colOffset = 0; // col offset of 1x because we skipped 1st column OR 0 offset if we use a Group because the Group column replaces the skip\n    const rowOffset = 3; // row offset of 3x because: 1x Title, 1x Headers and Excel row starts at 1 => 3\n    const priceIdx = this.aureliaGrid.slickGrid?.getColumnIndex('price') || 0;\n    const qtyIdx = this.aureliaGrid.slickGrid?.getColumnIndex('qty') || 0;\n    const taxesIdx = this.aureliaGrid.slickGrid?.getColumnIndex('taxes') || 0;\n    const subTotalIdx = this.aureliaGrid.slickGrid?.getColumnIndex('subTotal') || 0;\n    const totalIdx = this.aureliaGrid.slickGrid?.getColumnIndex('total') || 0;\n    const groupItemCount = totals?.group?.count || 0;\n\n    // the code below calculates Excel column position dynamically, technically Price is at \"B\" and Qty is \"C\"\n    const excelPriceCol = `${String.fromCharCode('A'.charCodeAt(0) + priceIdx - colOffset)}`;\n    const excelQtyCol = `${String.fromCharCode('A'.charCodeAt(0) + qtyIdx - colOffset)}`;\n    const excelSubTotalCol = `${String.fromCharCode('A'.charCodeAt(0) + subTotalIdx - colOffset)}`;\n    const excelTaxesCol = `${String.fromCharCode('A'.charCodeAt(0) + taxesIdx - colOffset)}`;\n    const excelTotalCol = `${String.fromCharCode('A'.charCodeAt(0) + totalIdx - colOffset)}`;\n\n    let excelCol = '';\n    switch (columnDef.id) {\n      case 'price':\n        excelCol = excelPriceCol;\n        break;\n      case 'qty':\n        excelCol = excelQtyCol;\n        break;\n      case 'subTotal':\n        excelCol = excelSubTotalCol;\n        break;\n      case 'taxes':\n        excelCol = excelTaxesCol;\n        break;\n      case 'total':\n        excelCol = excelTotalCol;\n        break;\n    }\n    return { value: `SUM(${excelCol}${dataRowIdx + rowOffset - groupItemCount}:${excelCol}${dataRowIdx + rowOffset - 1})`, metadata: { type: 'formula', style: excelFormatId } };\n  }\n\n  /**  We'll use a generic parser to reuse similar logic for all 3 calculable columns (SubTotal, Taxes, Total) */\n  excelRegularCellParser(_data: any, { columnDef, excelFormatId, dataRowIdx, dataContext }: ExcelCellValueParserArgs<GroceryItem>) {\n    // assuming that we want to calculate: (Price * Qty) => Sub-Total\n    const colOffset = !this.isDataGrouped ? 1 : 0; // col offset of 1x because we skipped 1st column OR 0 offset if we use a Group because the Group column replaces the skip\n    const rowOffset = 3; // row offset of 3x because: 1x Title, 1x Headers and Excel row starts at 1 => 3\n    const priceIdx = this.aureliaGrid.slickGrid?.getColumnIndex('price') || 0;\n    const qtyIdx = this.aureliaGrid.slickGrid?.getColumnIndex('qty') || 0;\n    const taxesIdx = this.aureliaGrid.slickGrid?.getColumnIndex('taxes') || 0;\n\n    // the code below calculates Excel column position dynamically, technically Price is at \"B\" and Qty is \"C\"\n    const excelPriceCol = `${String.fromCharCode('A'.charCodeAt(0) + priceIdx - colOffset)}${dataRowIdx + rowOffset}`;\n    const excelQtyCol = `${String.fromCharCode('A'.charCodeAt(0) + qtyIdx - colOffset)}${dataRowIdx + rowOffset}`;\n    const excelTaxesCol = `${String.fromCharCode('A'.charCodeAt(0) + taxesIdx - colOffset)}${dataRowIdx + rowOffset}`;\n\n    // `value` is our Excel cells to calculat (e.g.: \"B4*C4\")\n    // metadata `type` has to be set to \"formula\" and the `style` is what we defined in `excelExportOptions.style` which is `excelFormatId` in the callback arg\n\n    let excelVal = '';\n    switch (columnDef.id) {\n      case 'subTotal':\n        excelVal = `${excelPriceCol}*${excelQtyCol}`; // like \"C4*D4\"\n        break;\n      case 'taxes':\n        excelVal = (dataContext.taxable)\n          ? `${excelPriceCol}*${excelQtyCol}*${this.taxRate / 100}`\n          : '';\n        break;\n      case 'total':\n        excelVal = `(${excelPriceCol}*${excelQtyCol})+${excelTaxesCol}`;\n        break;\n    }\n    return { value: excelVal, metadata: { type: 'formula', style: excelFormatId } };\n  }\n\n  getData() {\n    let i = 1;\n    const datasetTmp = [\n      { id: i++, name: 'Oranges', qty: 4, taxable: false, price: 2.22 },\n      { id: i++, name: 'Apples', qty: 3, taxable: false, price: 1.55 },\n      { id: i++, name: 'Honeycomb Cereals', qty: 2, taxable: true, price: 4.55 },\n      { id: i++, name: 'Raisins', qty: 77, taxable: false, price: 0.23 },\n      { id: i++, name: 'Corn Flake Cereals', qty: 1, taxable: true, price: 6.62 },\n      { id: i++, name: 'Tomatoes', qty: 3, taxable: false, price: 1.88 },\n      { id: i++, name: 'Butter', qty: 1, taxable: false, price: 3.33 },\n      { id: i++, name: 'BBQ Chicken', qty: 1, taxable: false, price: 12.33 },\n      { id: i++, name: 'Chicken Wings', qty: 12, taxable: true, price: .53 },\n      { id: i++, name: 'Drinkable Yogurt', qty: 6, taxable: true, price: 1.22 },\n      { id: i++, name: 'Milk', qty: 3, taxable: true, price: 3.11 },\n    ] as GroceryItem[];\n\n    return datasetTmp;\n  }\n\n  clearGrouping() {\n    this.isDataGrouped = false;\n    this.aureliaGrid?.dataView?.setGrouping([]);\n  }\n\n  groupByTaxable() {\n    const checkIcon = 'mdi-check-box-outline';\n    const uncheckIcon = 'mdi-checkbox-blank-outline';\n    this.isDataGrouped = true;\n\n    this.aureliaGrid?.dataView?.setGrouping({\n      getter: 'taxable',\n      formatter: (g) => `Taxable: <span class=\"mdi ${g.value ? checkIcon : uncheckIcon} text-info\"></span> <span class=\"text-primary\">(${g.count} items)</span>`,\n      comparer: (a, b) => b.value - a.value,\n      aggregators: [\n        new Aggregators.Sum('price'),\n        new Aggregators.Sum('qty'),\n        new CustomSumAggregator('subTotal', this.taxRate),\n        new CustomSumAggregator('taxes', this.taxRate),\n        new CustomSumAggregator('total', this.taxRate),\n      ],\n      aggregateCollapsed: false,\n      lazyTotalsCalculation: false,\n    } as Grouping);\n\n    this.aureliaGrid?.dataView?.refresh();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example36_decorators","_init","checkItemIsEditable","_dataContext","columnDef","grid","gridOptions","hasEditor","customEditableInputFormatter","_row","_cell","value","dataContext","isEditableItem","divElm","CustomSumAggregator","field","taxRate","__publicField","item","taxes","groupTotals","customElement","__au2ViewDef","Example36","ExcelExportService","FieldType","Editors","Formatters","GroupTotalFormatters","_value","_coldef","val","subTotal","workbook","sheet","excelFormat","customTitle","lastCellMerge","_a","_b","totals","excelFormatId","dataRowIdx","priceIdx","qtyIdx","taxesIdx","_c","subTotalIdx","_d","totalIdx","groupItemCount","_f","excelPriceCol","excelQtyCol","excelSubTotalCol","excelTaxesCol","excelTotalCol","excelCol","_data","colOffset","rowOffset","excelVal","i","checkIcon","uncheckIcon","g","a","b","Aggregators","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}