{"version":3,"file":"example45-CCJlvEWe.js","sources":["../../src/examples/slickgrid/example45.$au.ts","../../src/examples/slickgrid/example45.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example45\";\nexport const template = \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n  <h2>\\n    Example 45: Row Detail with inner Grid\\n    <span class=\\\"float-end\\\">\\n      <a\\n        style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example44.ts\\\"\\n      >\\n        <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n      </a>\\n    </span>\\n    <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleDarkMode()\\\" data-test=\\\"toggle-dark-mode\\\">\\n      <span class=\\\"mdi mdi-theme-light-dark\\\"></span>\\n      <span>Toggle Dark Mode</span>\\n    </button>\\n  </h2>\\n\\n  <div class=\\\"subtitle\\\">\\n    Add functionality to show extra information with a Row Detail View, (<a\\n      href=\\\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/row-detail\\\"\\n      target=\\\"_blank\\\"\\n      >Wiki docs</a>), we'll use an inner grid inside our Row Detail Component. Note that because SlickGrid uses Virtual Scroll, the rows and row details\\n    are often be re-rendered (when row is out of viewport range) and this means unmounting Row Detail Component which indirectly mean that\\n    all component states (dynamic elements, forms, ...) will be disposed as well, however you can use Grid State/Presets to reapply\\n    previous state whenever the row detail gets re-rendered when back to viewport.\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-10\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon ms-1\\\" data-test=\\\"collapse-all-btn\\\" click.trigger=\\\"closeAllRowDetail()\\\">\\n        Close all Row Details\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon mx-1\\\" data-test=\\\"redraw-all-btn\\\" click.trigger=\\\"redrawAllRowDetail()\\\">\\n        Force redraw all Row Details\\n      </button>\\n\\n      <span class=\\\"d-inline-flex gap-4px\\\">\\n        <label for=\\\"detailViewRowCount\\\">Detail View Rows Shown: </label>\\n        <input\\n          id=\\\"detailViewRowCount\\\"\\n          data-test=\\\"detail-view-row-count\\\"\\n          type=\\\"number\\\"\\n          style=\\\"height: 26px; width: 40px\\\"\\n          value.bind=\\\"detailViewRowCount\\\"\\n        />\\n        <button\\n          class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\"\\n          style=\\\"height: 26px\\\"\\n          data-test=\\\"set-count-btn\\\"\\n          click.trigger=\\\"changeDetailViewRowCount()\\\"\\n        >\\n          Set\\n        </button>\\n        <label for=\\\"serverdelay\\\" class=\\\"ms-2\\\">Server Delay: </label>\\n        <input\\n          id=\\\"serverdelay\\\"\\n          value.bind=\\\"serverWaitDelay\\\"\\n          type=\\\"number\\\"\\n          data-test=\\\"server-delay\\\"\\n          style=\\\"height: 26px; width: 55px\\\"\\n          title=\\\"input a fake timer delay to simulate slow server response\\\"\\n        />\\n        <label class=\\\"checkbox-inline control-label ms-2\\\" for=\\\"useInnerGridStatePresets\\\">\\n          <input\\n            type=\\\"checkbox\\\"\\n            id=\\\"useInnerGridStatePresets\\\"\\n            data-test=\\\"use-inner-grid-state-presets\\\"\\n            checked.bind=\\\"isUsingInnerGridStatePresets\\\"\\n            click.trigger=\\\"changeUsingInnerGridStatePresets()\\\"\\n          />\\n          <span\\n            title=\\\"should we use Grid State/Presets to keep the inner grid state whenever Row Details are out and back to viewport and re-rendered\\\"\\n          >\\n            Use Inner Grid State/Presets\\n          </span>\\n        </label>\\n\\n        <label class=\\\"checkbox-inline control-label ms-2\\\" for=\\\"useResizeAutoHeight\\\">\\n          <input\\n            type=\\\"checkbox\\\"\\n            id=\\\"useResizeAutoHeight\\\"\\n            data-test=\\\"use-auto-height\\\"\\n            checked.bind=\\\"isUsingAutoHeight\\\"\\n            click.trigger=\\\"changeUsingResizerAutoHeight()\\\"\\n          />\\n            Use <code>autoResize.autoHeight</code>\\n        </label>\\n      </span>\\n    </div>\\n  </div>\\n\\n  <aurelia-slickgrid\\n    grid-id=\\\"grid45\\\"\\n    column-definitions.bind=\\\"columnDefinitions\\\"\\n    grid-options.bind=\\\"gridOptions\\\"\\n    dataset.bind=\\\"dataset\\\"\\n    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n  </aurelia-slickgrid>\\n\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { faker } from '@faker-js/faker';\nimport { bindable } from 'aurelia';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  ExtensionName,\n  type GridOption,\n  type SlickRowDetailView,\n} from 'aurelia-slickgrid';\n\nimport { Example45Preload } from './example45-preload';\nimport { type Distributor, Example45DetailView, type OrderData } from './example45-detail-view';\n\nconst FAKE_SERVER_DELAY = 250;\nconst NB_ITEMS = 995;\n\nexport class Example45 {\n  private _darkMode = false;\n  @bindable detailViewRowCount = 9;\n  @bindable serverWaitDelay = FAKE_SERVER_DELAY;\n\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  aureliaGrid!: AureliaGridInstance;\n  dataset: Distributor[] = [];\n  isUsingAutoHeight = false;\n  isUsingInnerGridStatePresets = false;\n  hideSubTitle = false;\n\n  get rowDetailInstance() {\n    return this.aureliaGrid?.extensionService.getExtensionInstanceByName(ExtensionName.rowDetailView) as SlickRowDetailView;\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // mock a dataset\n    this.dataset = this.getData(NB_ITEMS);\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'companyId',\n        name: 'ID',\n        field: 'companyId',\n        cssClass: 'text-end',\n        minWidth: 50,\n        maxWidth: 50,\n        filterable: true,\n        sortable: true,\n        type: 'number',\n      },\n      {\n        id: 'companyName',\n        name: 'Company Name',\n        field: 'companyName',\n        width: 90,\n        filterable: true,\n        sortable: true,\n      },\n      {\n        id: 'streetAddress',\n        name: 'Street Address',\n        field: 'streetAddress',\n        minWidth: 120,\n        filterable: true,\n      },\n      {\n        id: 'city',\n        name: 'City',\n        field: 'city',\n        minWidth: 120,\n        filterable: true,\n      },\n      {\n        id: 'zipCode',\n        name: 'Zip Code',\n        field: 'zipCode',\n        minWidth: 120,\n        filterable: true,\n      },\n      {\n        id: 'country',\n        name: 'Country',\n        field: 'country',\n        minWidth: 120,\n        filterable: true,\n      },\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        autoHeight: this.isUsingAutoHeight, // works with/without autoHeight\n        rightPadding: 20,\n        bottomPadding: 20,\n      },\n      enableFiltering: true,\n      enableRowDetailView: true,\n      darkMode: this._darkMode,\n      rowHeight: 33,\n      rowDetailView: {\n        process: (item) => this.simulateServerAsyncCall(item),\n        loadOnce: false, // you can't use loadOnce with inner grid because only HTML template are re-rendered, not JS events\n        useRowClick: false,\n        // how many grid rows do we want to use for the row detail panel\n        panelRows: this.detailViewRowCount,\n        // optionally expose the functions that you want to use from within the row detail Child Component\n        parent: this,\n        // Preload View Template\n        preloadViewModel: Example45Preload,\n\n        // ViewModel Template to load when row detail data is ready\n        viewModel: Example45DetailView,\n      },\n    };\n  }\n\n  getData(count: number) {\n    // mock a dataset\n    const mockDataset: Distributor[] = [];\n    for (let i = 0; i < count; i++) {\n      mockDataset[i] = {\n        id: i,\n        companyId: i,\n        companyName: faker.company.name(),\n        city: faker.location.city(),\n        streetAddress: faker.location.streetAddress(),\n        zipCode: faker.location.zipCode('######'),\n        country: faker.location.country(),\n        orderData: [],\n        isUsingInnerGridStatePresets: false,\n      };\n    }\n\n    return mockDataset;\n  }\n\n  changeDetailViewRowCount() {\n    if (this.aureliaGrid?.extensionService) {\n      const options = this.rowDetailInstance.getOptions();\n      if (options?.panelRows) {\n        options.panelRows = this.detailViewRowCount; // change number of rows dynamically\n        this.rowDetailInstance.setOptions(options);\n      }\n    }\n  }\n\n  changeUsingInnerGridStatePresets() {\n    this.isUsingInnerGridStatePresets = !this.isUsingInnerGridStatePresets;\n    this.closeAllRowDetail();\n    return true;\n  }\n\n  changeUsingResizerAutoHeight() {\n    this.isUsingAutoHeight = !this.isUsingAutoHeight;\n    this.aureliaGrid.slickGrid?.setOptions({ autoResize: { ...this.gridOptions.autoResize, autoHeight: this.isUsingAutoHeight } });\n    this.aureliaGrid.resizerService.resizeGrid();\n    return true;\n  }\n\n  closeAllRowDetail() {\n    this.rowDetailInstance?.collapseAll();\n  }\n\n  redrawAllRowDetail() {\n    this.rowDetailInstance?.redrawAllViewSlots(true);\n  }\n\n  /** Just for demo purposes, we will simulate an async server call and return more details on the selected row item */\n  simulateServerAsyncCall(item: Distributor) {\n    let orderData: OrderData[] = [];\n    // let's mock some data but make it predictable for easier Cypress E2E testing\n    if (item.id % 3) {\n      orderData = [\n        { orderId: '10261', shipCity: 'Rio de Janeiro', freight: 3.05, shipName: 'Que Delícia' },\n        { orderId: '10267', shipCity: 'München', freight: 208.58, shipName: 'Frankenversand' },\n        { orderId: '10281', shipCity: 'Madrid', freight: 2.94, shipName: 'Romero y tomillo' },\n      ];\n    } else if (item.id % 4) {\n      orderData = [\n        { orderId: '10251', shipCity: 'Lyon', freight: 41.34, shipName: 'Victuailles en stock' },\n        { orderId: '10253', shipCity: 'Rio de Janeiro', freight: 58.17, shipName: 'Hanari Carnes' },\n        { orderId: '10256', shipCity: 'Resende', freight: 13.97, shipName: 'Wellington Importadora' },\n      ];\n    } else if (item.id % 5) {\n      orderData = [\n        { orderId: '10265', shipCity: 'Strasbourg', freight: 55.28, shipName: 'Blondel père et fils' },\n        { orderId: '10277', shipCity: 'Leipzig', freight: 125.77, shipName: 'Morgenstern Gesundkost' },\n        { orderId: '10280', shipCity: 'Luleå', freight: 8.98, shipName: 'Berglunds snabbköp' },\n        { orderId: '10295', shipCity: 'Reims', freight: 1.15, shipName: 'Vins et alcools Chevalier' },\n      ];\n    } else if (item.id % 2) {\n      orderData = [\n        { orderId: '10258', shipCity: 'Graz', freight: 140.51, shipName: 'Ernst Handel' },\n        { orderId: '10270', shipCity: 'Oulu', freight: 136.54, shipName: 'Wartian Herkku' },\n      ];\n    } else {\n      orderData = [{ orderId: '10255', shipCity: 'Genève', freight: 148.33, shipName: 'Richter Supermarkt' }];\n    }\n\n    // fill the template on async delay\n    return new Promise((resolve) => {\n      window.setTimeout(() => {\n        const itemDetail = item;\n        itemDetail.orderData = orderData;\n        itemDetail.isUsingInnerGridStatePresets = this.isUsingInnerGridStatePresets;\n\n        // resolve the data after delay specified\n        resolve(itemDetail);\n      }, this.serverWaitDelay);\n    });\n  }\n\n  toggleDarkMode() {\n    this._darkMode = !this._darkMode;\n    this.toggleBodyBackground();\n    this.aureliaGrid.slickGrid?.setOptions({ darkMode: this._darkMode });\n    this.closeAllRowDetail();\n  }\n\n  toggleBodyBackground() {\n    if (this._darkMode) {\n      document.querySelector<HTMLDivElement>('.panel-wm-content')!.classList.add('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'dark';\n    } else {\n      document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_serverWaitDelay_dec","_detailViewRowCount_dec","_Example45_decorators","_init","FAKE_SERVER_DELAY","NB_ITEMS","customElement","__au2ViewDef","bindable","Example45","__publicField","__runInitializers","_a","ExtensionName","aureliaGrid","item","Example45Preload","Example45DetailView","count","mockDataset","i","faker","options","orderData","resolve","itemDetail","action","__decoratorStart","__decorateElement"],"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"}