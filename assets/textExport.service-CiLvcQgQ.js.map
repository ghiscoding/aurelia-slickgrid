{"version":3,"file":"textExport.service-CiLvcQgQ.js","sources":["../../../../node_modules/.pnpm/text-encoding-utf-8@1.0.2/node_modules/text-encoding-utf-8/src/encoding.js","../../../../node_modules/.pnpm/@slickgrid-universal+text-export@5.13.3/node_modules/@slickgrid-universal/text-export/dist/esm/textExport.service.js"],"sourcesContent":["'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","import { TextEncoder } from 'text-encoding-utf-8';\nimport { Constants, DelimiterType, FileType, \n// utility functions\nexportWithFormatterWhenDefined, getTranslationPrefix, htmlEntityDecode, } from '@slickgrid-universal/common';\nimport { addWhiteSpaces, extend, getHtmlStringOutput, stripTags, titleCase } from '@slickgrid-universal/utils';\nconst DEFAULT_EXPORT_OPTIONS = {\n    delimiter: DelimiterType.comma,\n    filename: 'export',\n    format: FileType.csv,\n    useUtf8WithBom: true,\n};\nexport class TextExportService {\n    constructor() {\n        this._delimiter = ',';\n        this._exportQuoteWrapper = '';\n        this._fileFormat = FileType.csv;\n        this._lineCarriageReturn = '\\n';\n        this._columnHeaders = [];\n        this._hasGroupedItems = false;\n        /** ExcelExportService class name which is use to find service instance in the external registered services */\n        this.className = 'TextExportService';\n    }\n    get _datasetIdPropName() {\n        return (this._gridOptions && this._gridOptions.datasetIdPropertyName) || 'id';\n    }\n    /** Getter of SlickGrid DataView object */\n    get _dataView() {\n        return this._grid?.getData();\n    }\n    /** Getter for the Grid Options pulled through the Grid Object */\n    get _gridOptions() {\n        return this._grid?.getOptions() ?? {};\n    }\n    dispose() {\n        this._pubSubService?.unsubscribeAll();\n    }\n    /**\n     * Initialize the Service\n     * @param grid\n     * @param containerService\n     */\n    init(grid, containerService) {\n        this._grid = grid;\n        this._pubSubService = containerService.get('PubSubService');\n        // get locales provided by user in main file or else use default English locales via the Constants\n        this._locales = (this._gridOptions && this._gridOptions.locales) || Constants.locales;\n        this._translaterService = this._gridOptions?.translater;\n        if (this._gridOptions.enableTranslate && (!this._translaterService || !this._translaterService.translate)) {\n            throw new Error('[Slickgrid-Universal] requires a Translate Service to be passed in the \"translater\" Grid Options when \"enableTranslate\" is enabled. (example: this.gridOptions = { enableTranslate: true, translater: this.translaterService })');\n        }\n    }\n    /**\n     * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\n     * This is a WYSIWYG export to file output (What You See is What You Get)\n     *\n     * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\n     * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\n     *\n     * Example: exportToFile({ format: FileType.csv, delimiter: DelimiterType.comma })\n     */\n    exportToFile(options) {\n        if (!this._grid || !this._dataView || !this._pubSubService) {\n            throw new Error('[Slickgrid-Universal] it seems that the SlickGrid & DataView objects and/or PubSubService are not initialized did you forget to enable the grid option flag \"enableTextExport\"?');\n        }\n        return new Promise((resolve) => {\n            this._pubSubService?.publish(`onBeforeExportToTextFile`, true);\n            this._exportOptions = extend(true, {}, { ...DEFAULT_EXPORT_OPTIONS, ...this._gridOptions.textExportOptions, ...options });\n            this._delimiter = this._exportOptions.delimiterOverride || this._exportOptions.delimiter || '';\n            this._fileFormat = this._exportOptions.format || FileType.csv;\n            // get the CSV output from the grid data\n            const dataOutput = this.getDataOutput();\n            // trigger a download file\n            // wrap it into a setTimeout so that the EventAggregator has enough time to start a pre-process like showing a spinner\n            window.setTimeout(() => {\n                const downloadOptions = {\n                    filename: `${this._exportOptions.filename}.${this._fileFormat}`,\n                    format: this._fileFormat || FileType.csv,\n                    mimeType: this._exportOptions.mimeType || 'text/plain',\n                    // prettier-ignore\n                    useUtf8WithBom: (this._exportOptions && this._exportOptions.hasOwnProperty('useUtf8WithBom')) ? this._exportOptions.useUtf8WithBom : true,\n                };\n                // start downloading but add the content property only on the start download not on the event itself\n                this.startDownloadFile({ ...downloadOptions, content: dataOutput }); // add content property\n                this._pubSubService?.publish(`onAfterExportToTextFile`, downloadOptions);\n                resolve(true);\n            }, 0);\n        });\n    }\n    /**\n     * Triggers download file with file format.\n     * IE(6-10) are not supported\n     * All other browsers will use plain javascript on client side to produce a file download.\n     * @param options\n     */\n    startDownloadFile(options) {\n        // make sure no html entities exist in the data\n        const csvContent = htmlEntityDecode(options.content);\n        // dealing with Excel CSV export and UTF-8 is a little tricky.. We will use Option #2 to cover older Excel versions\n        // Option #1: we need to make Excel knowing that it's dealing with an UTF-8, A correctly formatted UTF8 file can have a Byte Order Mark as its first three octets\n        // reference: http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // Option#2: use a 3rd party extension to javascript encode into UTF-16\n        let outputData;\n        if (options.format === FileType.csv) {\n            outputData = new TextEncoder('utf-8').encode(csvContent);\n        }\n        else {\n            outputData = csvContent;\n        }\n        // create a Blob object for the download\n        const blob = new Blob([options.useUtf8WithBom ? '\\uFEFF' : '', outputData], {\n            type: options.mimeType,\n        });\n        // when using IE/Edge, then use different download call\n        if (typeof navigator.msSaveOrOpenBlob === 'function') {\n            navigator.msSaveOrOpenBlob(blob, options.filename);\n        }\n        else {\n            // this trick will generate a temp <a /> tag\n            // the code will then trigger a hidden click for it to start downloading\n            const link = document.createElement('a');\n            const csvUrl = URL.createObjectURL(blob);\n            link.textContent = 'download';\n            link.href = csvUrl;\n            link.setAttribute('download', options.filename);\n            // set the visibility to hidden so there is no effect on your web-layout\n            link.style.visibility = 'hidden';\n            // this part will append the anchor tag, trigger a click (for download to start) and finally remove the tag once completed\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n    // -----------------------\n    // protected functions\n    // -----------------------\n    getDataOutput() {\n        const columns = this._grid.getColumns() || [];\n        // Group By text, it could be set in the export options or from translation or if nothing is found then use the English constant text\n        let groupByColumnHeader = this._exportOptions.groupingColumnHeaderTitle;\n        if (!groupByColumnHeader &&\n            this._gridOptions.enableTranslate &&\n            this._translaterService?.translate &&\n            this._translaterService?.getCurrentLanguage?.()) {\n            groupByColumnHeader = this._translaterService.translate(`${getTranslationPrefix(this._gridOptions)}GROUP_BY`);\n        }\n        else if (!groupByColumnHeader) {\n            groupByColumnHeader = this._locales && this._locales.TEXT_GROUP_BY;\n        }\n        // a CSV needs double quotes wrapper, the other types do not need any wrapper\n        this._exportQuoteWrapper = this._fileFormat === FileType.csv ? '\"' : '';\n        // data variable which will hold all the fields data of a row\n        let outputDataString = '';\n        // get grouped column titles and if found, we will add a \"Group by\" column at the first column index\n        // if it's a CSV format, we'll escape the text in double quotes\n        const grouping = this._dataView.getGrouping();\n        if (grouping && Array.isArray(grouping) && grouping.length > 0) {\n            this._hasGroupedItems = true;\n            outputDataString +=\n                this._fileFormat === FileType.csv ? `\"${groupByColumnHeader}\"${this._delimiter}` : `${groupByColumnHeader}${this._delimiter}`;\n        }\n        else {\n            this._hasGroupedItems = false;\n        }\n        // get all Grouped Column Header Titles when defined (from pre-header row)\n        if (this._gridOptions.createPreHeaderPanel && this._gridOptions.showPreHeaderPanel && !this._gridOptions.enableDraggableGrouping) {\n            this._groupedColumnHeaders = this.getColumnGroupedHeaderTitles(columns) || [];\n            if (this._groupedColumnHeaders && Array.isArray(this._groupedColumnHeaders) && this._groupedColumnHeaders.length > 0) {\n                // add the header row + add a new line at the end of the row\n                const outputGroupedHeaderTitles = this._groupedColumnHeaders.map((header) => `${this._exportQuoteWrapper}${header.title}${this._exportQuoteWrapper}`);\n                outputDataString += outputGroupedHeaderTitles.join(this._delimiter) + this._lineCarriageReturn;\n            }\n        }\n        // get all Column Header Titles\n        this._columnHeaders = this.getColumnHeaders(columns) || [];\n        if (this._columnHeaders && Array.isArray(this._columnHeaders) && this._columnHeaders.length > 0) {\n            // add the header row + add a new line at the end of the row\n            const outputHeaderTitles = this._columnHeaders.map((header) => stripTags(`${this._exportQuoteWrapper}${header.title}${this._exportQuoteWrapper}`));\n            outputDataString += outputHeaderTitles.join(this._delimiter) + this._lineCarriageReturn;\n        }\n        // Populate the rest of the Grid Data\n        outputDataString += this.getAllGridRowData(columns, this._lineCarriageReturn);\n        return outputDataString;\n    }\n    /**\n     * Get all the grid row data and return that as an output string\n     */\n    getAllGridRowData(columns, lineCarriageReturn) {\n        const outputDataStrings = [];\n        const lineCount = this._dataView.getLength();\n        // loop through all the grid rows of data\n        for (let rowNumber = 0; rowNumber < lineCount; rowNumber++) {\n            const itemObj = this._dataView.getItem(rowNumber);\n            // make sure we have a filled object AND that the item doesn't include the \"getItem\" method\n            // this happen could happen with an opened Row Detail as it seems to include an empty Slick DataView (we'll just skip those lines)\n            if (itemObj && !itemObj.hasOwnProperty('getItem')) {\n                // Normal row (not grouped by anything) would have an ID which was predefined in the Grid Columns definition\n                if (itemObj[this._datasetIdPropName] !== null && itemObj[this._datasetIdPropName] !== undefined) {\n                    // get regular row item data\n                    outputDataStrings.push(this.readRegularRowData(columns, rowNumber, itemObj));\n                }\n                else if (this._hasGroupedItems && itemObj.__groupTotals === undefined) {\n                    // get the group row\n                    outputDataStrings.push(this.readGroupedTitleRow(itemObj));\n                }\n                else if (itemObj.__groupTotals) {\n                    // else if the row is a Group By and we have agreggators, then a property of '__groupTotals' would exist under that object\n                    outputDataStrings.push(this.readGroupedTotalRow(columns, itemObj));\n                }\n            }\n        }\n        return outputDataStrings.join(lineCarriageReturn);\n    }\n    /**\n     * Get all Grouped Header Titles and their keys, translate the title when required.\n     * @param {Array<object>} columns of the grid\n     */\n    getColumnGroupedHeaderTitles(columns) {\n        const groupedColumnHeaders = [];\n        if (columns && Array.isArray(columns)) {\n            // Populate the Grouped Column Header, pull the columnGroup(Key) defined\n            columns.forEach((columnDef) => {\n                let groupedHeaderTitle = '';\n                if (columnDef.columnGroupKey &&\n                    this._gridOptions.enableTranslate &&\n                    this._translaterService?.translate &&\n                    this._translaterService?.getCurrentLanguage?.()) {\n                    groupedHeaderTitle = this._translaterService.translate(columnDef.columnGroupKey);\n                }\n                else {\n                    groupedHeaderTitle = columnDef.columnGroup || '';\n                }\n                const skippedField = columnDef.excludeFromExport || false;\n                // if column width is 0px, then we consider that field as a hidden field and should not be part of the export\n                if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\n                    groupedColumnHeaders.push({\n                        key: (columnDef.field || columnDef.id),\n                        title: groupedHeaderTitle || '',\n                    });\n                }\n            });\n        }\n        return groupedColumnHeaders;\n    }\n    /**\n     * Get all header titles and their keys, translate the title when required.\n     * @param {Array<object>} columns of the grid\n     */\n    getColumnHeaders(columns) {\n        const columnHeaders = [];\n        if (columns && Array.isArray(columns)) {\n            // Populate the Column Header, pull the name defined\n            columns.forEach((columnDef) => {\n                let headerTitle = '';\n                if ((columnDef.nameKey || columnDef.nameKey) &&\n                    this._gridOptions.enableTranslate &&\n                    this._translaterService?.translate &&\n                    this._translaterService?.getCurrentLanguage?.()) {\n                    headerTitle = this._translaterService.translate(columnDef.nameKey || columnDef.nameKey);\n                }\n                else {\n                    headerTitle = getHtmlStringOutput(columnDef.name || '', 'innerHTML') || titleCase(columnDef.field);\n                }\n                const skippedField = columnDef.excludeFromExport || false;\n                // if column width is 0px, then we consider that field as a hidden field and should not be part of the export\n                if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\n                    columnHeaders.push({\n                        key: (columnDef.field || columnDef.id),\n                        title: headerTitle || '',\n                    });\n                }\n            });\n        }\n        return columnHeaders;\n    }\n    /**\n     * Get the data of a regular row (a row without grouping)\n     * @param {Array<Object>} columns - column definitions\n     * @param {Number} row - row index\n     * @param {Object} itemObj - item datacontext object\n     */\n    readRegularRowData(columns, row, itemObj) {\n        let idx = 0;\n        const rowOutputStrings = [];\n        const exportQuoteWrapper = this._exportQuoteWrapper;\n        let prevColspan = 1;\n        const itemMetadata = this._dataView.getItemMetadata(row);\n        for (let col = 0, ln = columns.length; col < ln; col++) {\n            const columnDef = columns[col];\n            // skip excluded column\n            if (columnDef.excludeFromExport) {\n                continue;\n            }\n            // if we are grouping and are on 1st column index, we need to skip this column since it will be used later by the grouping text:: Group by [columnX]\n            if (this._hasGroupedItems && idx === 0) {\n                const emptyValue = this._fileFormat === FileType.csv ? `\"\"` : '';\n                rowOutputStrings.push(emptyValue);\n            }\n            // when using rowspan\n            if (this._gridOptions.enableCellRowSpan) {\n                const prs = this._grid.getParentRowSpanByCell(row, col, false);\n                if (prs && prs.start !== row) {\n                    // skip any rowspan child cell since it was already merged\n                    rowOutputStrings.push('');\n                    continue;\n                }\n            }\n            // when using colspan (it could be a number or a \"*\" when spreading the entire row)\n            let colspanColumnId;\n            if (itemMetadata?.columns) {\n                const metadata = itemMetadata?.columns;\n                const columnData = metadata[columnDef.id] || metadata[col];\n                if (!((!isNaN(prevColspan) && +prevColspan > 1) || (prevColspan === '*' && col > 0))) {\n                    prevColspan = columnData?.colspan ?? 1;\n                }\n                if (prevColspan !== '*') {\n                    if (columnDef.id in metadata || col in metadata) {\n                        colspanColumnId = columnDef.id;\n                    }\n                }\n            }\n            if ((prevColspan === '*' && col > 0) || (!isNaN(prevColspan) && +prevColspan > 1 && columnDef.id !== colspanColumnId)) {\n                rowOutputStrings.push('');\n                if (!isNaN(prevColspan) && +prevColspan > 1) {\n                    prevColspan--;\n                }\n            }\n            else {\n                // get the output by analyzing if we'll pull the value from the cell or from a formatter\n                let itemData = exportWithFormatterWhenDefined(row, col, columnDef, itemObj, this._grid, this._exportOptions);\n                // does the user want to sanitize the output data (remove HTML tags)?\n                if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n                    itemData = stripTags(itemData);\n                }\n                // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n                if (this._fileFormat === FileType.csv && itemData) {\n                    itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n                }\n                // do we have a wrapper to keep as a string? in certain cases like \"1E06\", we don't want excel to transform it into exponential (1.0E06)\n                // to cancel that effect we can had = in front, ex: =\"1E06\"\n                const keepAsStringWrapper = columnDef?.exportCsvForceToKeepAsString ? '=' : '';\n                rowOutputStrings.push(keepAsStringWrapper + exportQuoteWrapper + itemData + exportQuoteWrapper);\n            }\n            idx++;\n        }\n        return rowOutputStrings.join(this._delimiter);\n    }\n    /**\n     * Get the grouped title(s) and its group title formatter, for example if we grouped by salesRep, the returned result would be:: 'Sales Rep: John Dow (2 items)'\n     * @param itemObj\n     */\n    readGroupedTitleRow(itemObj) {\n        let groupName = stripTags(itemObj.title);\n        const exportQuoteWrapper = this._exportQuoteWrapper;\n        groupName = addWhiteSpaces(5 * itemObj.level) + groupName;\n        if (this._fileFormat === FileType.csv) {\n            // when CSV we also need to escape double quotes twice, so \" becomes \"\"\n            groupName = groupName.toString().replace(/\"/gi, `\"\"`);\n        }\n        return exportQuoteWrapper + groupName + exportQuoteWrapper;\n    }\n    /**\n     * Get the grouped totals (below the regular rows), these are set by Slick Aggregators.\n     * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\n     * @param itemObj\n     */\n    readGroupedTotalRow(columns, itemObj) {\n        const delimiter = this._exportOptions.delimiter;\n        const format = this._exportOptions.format;\n        const groupingAggregatorRowText = this._exportOptions.groupingAggregatorRowText || '';\n        const exportQuoteWrapper = this._exportQuoteWrapper;\n        const outputStrings = [`${exportQuoteWrapper}${groupingAggregatorRowText}${exportQuoteWrapper}`];\n        columns.forEach((columnDef) => {\n            let itemData = '';\n            const skippedField = columnDef.excludeFromExport || false;\n            // if there's a groupTotalsFormatter, we will re-run it to get the exact same output as what is shown in UI\n            if (columnDef.groupTotalsFormatter) {\n                const totalResult = columnDef.groupTotalsFormatter(itemObj, columnDef, this._grid);\n                itemData = totalResult instanceof HTMLElement ? totalResult.textContent || '' : totalResult;\n            }\n            // does the user want to sanitize the output data (remove HTML tags)?\n            if (columnDef.sanitizeDataExport || this._exportOptions.sanitizeDataExport) {\n                itemData = stripTags(itemData);\n            }\n            if (format === FileType.csv) {\n                // when CSV we also need to escape double quotes twice, so a double quote \" becomes 2x double quotes \"\"\n                itemData = itemData.toString().replace(/\"/gi, `\"\"`);\n            }\n            // add the column (unless user wants to skip it)\n            if ((columnDef.width === undefined || columnDef.width > 0) && !skippedField) {\n                outputStrings.push(exportQuoteWrapper + itemData + exportQuoteWrapper);\n            }\n        });\n        return outputStrings.join(delimiter);\n    }\n}\n//# sourceMappingURL=textExport.service.js.map"],"names":["inRange","a","min","max","ToDictionary","o","stringToCodePoints","string","s","n","i","u","c","d","b","end_of_stream","Stream","tokens","token","finished","DEFAULT_ENCODING","TextEncoder","encoding","options","opt_string","UTF8Encoder","bytes","input_stream","result","stream","code_point","count","offset","temp","DEFAULT_EXPORT_OPTIONS","DelimiterType","FileType","TextExportService","_a","grid","containerService","Constants","resolve","extend","dataOutput","downloadOptions","csvContent","htmlEntityDecode","outputData","blob","link","csvUrl","columns","groupByColumnHeader","_c","_b","getTranslationPrefix","outputDataString","grouping","outputGroupedHeaderTitles","header","outputHeaderTitles","stripTags","lineCarriageReturn","outputDataStrings","lineCount","rowNumber","itemObj","groupedColumnHeaders","columnDef","groupedHeaderTitle","skippedField","columnHeaders","headerTitle","getHtmlStringOutput","titleCase","row","idx","rowOutputStrings","exportQuoteWrapper","prevColspan","itemMetadata","col","ln","emptyValue","prs","colspanColumnId","metadata","columnData","itemData","exportWithFormatterWhenDefined","keepAsStringWrapper","groupName","addWhiteSpaces","delimiter","format","groupingAggregatorRowText","outputStrings","totalResult"],"mappings":"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","x_google_ignoreList":[0,1]}