{"version":3,"file":"example17-Bqc2PfKh.js","sources":["../../src/examples/slickgrid/example17.$au.ts","../../src/examples/slickgrid/example17.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example17\";\nexport const template = \"<div class=\\\"container-fluid\\\">\\n  <h2>\\n    Example 17: Dynamically Create Grid from CSV / Excel import\\n    <span class=\\\"float-end\\\">\\n      <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example17.ts\\\">\\n        <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n      </a>\\n    </span>\\n    <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"hideSubTitle = !hideSubTitle\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n  </h2>\\n\\n  <div class=\\\"subtitle\\\" hidden.bind=\\\"hideSubTitle\\\">\\n    Allow creating a grid dynamically by importing an external CSV or Excel file. This script demo will read the CSV file and will\\n    consider the first row as the column header and create the column definitions accordingly, while the next few rows will be\\n    considered the dataset. Note that this example is demoing a CSV file import but in your application you could easily implemnt\\n    an Excel file uploading.\\n  </div>\\n\\n  <div>A default CSV file can be download <a id=\\\"template-dl\\\" href.bind=\\\"templateUrl\\\">here</a>.</div>\\n\\n  <div class=\\\"d-flex mt-5 align-items-end\\\">\\n    <div class=\\\"file-upload\\\">\\n      <label for=\\\"formFile\\\" class=\\\"form-label\\\">Choose a CSV fileâ€¦</label>\\n      <input class=\\\"form-control\\\" type=\\\"file\\\" data-test=\\\"file-upload-input\\\" value.bind=\\\"uploadFileRef\\\" change.trigger=\\\"handleFileImport($event)\\\" />\\n    </div>\\n    <span class=\\\"mx-3\\\">or</span>\\n    <div>\\n      <button id=\\\"uploadBtn\\\" data-test=\\\"static-data-btn\\\" class=\\\"btn btn-outline-secondary\\\" click.trigger=\\\"handleDefaultCsv\\\">\\n        Use default CSV data\\n      </button>\\n      &nbsp;/\\n      <button class=\\\"btn btn-outline-danger btn-sm ms-2\\\" click.trigger=\\\"destroyGrid()\\\">Destroy Grid</button>\\n    </div>\\n  </div>\\n\\n  <hr />\\n\\n  <aurelia-slickgrid\\n    if=\\\"value.bind: gridCreated; cache: false\\\"\\n    grid-id=\\\"grid17\\\"\\n    column-definitions.bind=\\\"columnDefinitions\\\"\\n    grid-options.bind=\\\"gridOptions\\\"\\n    dataset.bind=\\\"dataset\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { type Column, type GridOption, toCamelCase } from 'aurelia-slickgrid';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\n\nconst sampleDataRoot = 'assets/data';\n\nexport class Example17 {\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  gridCreated = false;\n  hideSubTitle = false;\n  dataset: any[] = [];\n  paginationPosition: 'bottom' | 'top' = 'top';\n  templateUrl = `${sampleDataRoot}/users.csv`;\n  uploadFileRef = '';\n\n  destroyGrid() {\n    this.gridCreated = false;\n  }\n\n  handleFileImport(event: any) {\n    const file: File = event.target.files[0];\n    if (file.name.endsWith('.csv')) {\n      const reader = new FileReader();\n      reader.onload = (e: any) => {\n        const content = e.target.result;\n        this.dynamicallyCreateGrid(content);\n      };\n      reader.readAsText(file);\n    } else {\n      alert('File must be a CSV file');\n    }\n  }\n\n  handleDefaultCsv() {\n    const staticDataCsv = `First Name,Last Name,Age,Type\\nBob,Smith,33,Teacher\\nJohn,Doe,20,Student\\nJane,Doe,21,Student`;\n    this.dynamicallyCreateGrid(staticDataCsv);\n    this.uploadFileRef = '';\n  }\n\n  dynamicallyCreateGrid(csvContent: string) {\n    // dispose of any previous grid before creating a new one\n    this.gridCreated = false;\n\n    const dataRows = csvContent?.split('\\n');\n    const colDefs: Column[] = [];\n    const outputData: any[] = [];\n\n    // create column definitions\n    dataRows.forEach((dataRow, rowIndex) => {\n      const cellValues = dataRow.split(',');\n      const dataEntryObj: any = {};\n\n      if (rowIndex === 0) {\n        // the 1st row is considered to be the header titles, we can create the column definitions from it\n        for (const cellVal of cellValues) {\n          const camelFieldName = toCamelCase(cellVal);\n          colDefs.push({\n            id: camelFieldName,\n            name: cellVal,\n            field: camelFieldName,\n            filterable: true,\n            sortable: true,\n          });\n        }\n      } else {\n        // at this point all column defs were created and we can loop through them and\n        // we can now start adding data as an object and then simply push it to the dataset array\n        cellValues.forEach((cellVal, colIndex) => {\n          dataEntryObj[colDefs[colIndex].id] = cellVal;\n        });\n\n        // a unique \"id\" must be provided, if not found then use the row index and push it to the dataset\n        if ('id' in dataEntryObj) {\n          outputData.push(dataEntryObj);\n        } else {\n          outputData.push({ ...dataEntryObj, id: rowIndex });\n        }\n      }\n    });\n\n    this.gridOptions = {\n      gridHeight: 300,\n      gridWidth: 800,\n      enableFiltering: true,\n      enableExcelExport: true,\n      externalResources: [new ExcelExportService()],\n      headerRowHeight: 35,\n      rowHeight: 33,\n    };\n\n    this.dataset = outputData;\n    this.columnDefinitions = colDefs;\n    console.log(this.columnDefinitions, this.dataset)\n    this.gridCreated = true;\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example17_decorators","_init","sampleDataRoot","customElement","__au2ViewDef","Example17","__publicField","event","file","reader","e","content","csvContent","dataRows","colDefs","outputData","dataRow","rowIndex","cellValues","dataEntryObj","cellVal","camelFieldName","toCamelCase","colIndex","ExcelExportService","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"2JACO,MAAMA,EAAO,YACPC,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAEXC,EAAe,CAAG,EAClBC,EAAY,CAAC,EAC1B,IAAIC,EACG,SAASC,EAASC,EAAW,CAC7BF,IACHA,EAAKG,EAAc,OAAO,CAAE,KAAAP,EAAM,SAAAC,EAAU,aAAAC,EAAc,UAAAC,EAAW,GAEvEG,EAAU,SAASF,CAAE,CACvB,4lCCZAI,EAAAC,EAGA,MAAMC,EAAiB,cAAcF,EAAA,CAAAG,EAAAC,CAAA,CAAA,EAE9B,MAAMC,CAAU,CAAhB,aAAA,CACLC,EAAA,KAAA,oBAA8B,EAAC,EAC/BA,EAAA,KAAA,aAAA,EACcA,EAAA,KAAA,cAAA,EAAA,EACCA,EAAA,KAAA,eAAA,EAAA,EACfA,EAAA,KAAA,UAAiB,EAAC,EACqBA,EAAA,KAAA,qBAAA,KAAA,EACvCA,EAAA,KAAA,cAAc,kBACEA,EAAA,KAAA,gBAAA,EAAA,CAAA,CAEhB,aAAc,CACZ,KAAK,YAAc,EAAA,CAGrB,iBAAiBC,EAAY,CAC3B,MAAMC,EAAaD,EAAM,OAAO,MAAM,CAAC,EACvC,GAAIC,EAAK,KAAK,SAAS,MAAM,EAAG,CACxB,MAAAC,EAAS,IAAI,WACZA,EAAA,OAAUC,GAAW,CACpB,MAAAC,EAAUD,EAAE,OAAO,OACzB,KAAK,sBAAsBC,CAAO,CACpC,EACAF,EAAO,WAAWD,CAAI,CAAA,MAEtB,MAAM,yBAAyB,CACjC,CAGF,kBAAmB,CAEjB,KAAK,sBADiB;AAAA;AAAA;AAAA,oBACkB,EACxC,KAAK,cAAgB,EAAA,CAGvB,sBAAsBI,EAAoB,CAExC,KAAK,YAAc,GAEb,MAAAC,EAAWD,GAAA,YAAAA,EAAY,MAAM;AAAA,GAC7BE,EAAoB,CAAC,EACrBC,EAAoB,CAAC,EAGlBF,EAAA,QAAQ,CAACG,EAASC,IAAa,CAChC,MAAAC,EAAaF,EAAQ,MAAM,GAAG,EAC9BG,EAAoB,CAAC,EAE3B,GAAIF,IAAa,EAEf,UAAWG,KAAWF,EAAY,CAC1B,MAAAG,EAAiBC,EAAYF,CAAO,EAC1CN,EAAQ,KAAK,CACX,GAAIO,EACJ,KAAMD,EACN,MAAOC,EACP,WAAY,GACZ,SAAU,EAAA,CACX,CAAA,MAKQH,EAAA,QAAQ,CAACE,EAASG,IAAa,CACxCJ,EAAaL,EAAQS,CAAQ,EAAE,EAAE,EAAIH,CAAA,CACtC,EAGG,OAAQD,EACVJ,EAAW,KAAKI,CAAY,EAE5BJ,EAAW,KAAK,CAAE,GAAGI,EAAc,GAAIF,EAAU,CAErD,CACD,EAED,KAAK,YAAc,CACjB,WAAY,IACZ,UAAW,IACX,gBAAiB,GACjB,kBAAmB,GACnB,kBAAmB,CAAC,IAAIO,CAAoB,EAC5C,gBAAiB,GACjB,UAAW,EACb,EAEA,KAAK,QAAUT,EACf,KAAK,kBAAoBD,EACzB,QAAQ,IAAI,KAAK,kBAAmB,KAAK,OAAO,EAChD,KAAK,YAAc,EAAA,CAEvB,CA1FOb,EAAAwB,EAAA,EAAMpB,EAANqB,kBAF8B1B,EAExBK,CAAA,EAANsB,EAAM1B,EAAA,EAAAI,CAAA"}