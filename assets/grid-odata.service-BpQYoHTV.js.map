{"version":3,"file":"grid-odata.service-BpQYoHTV.js","sources":["../../../../node_modules/.pnpm/@slickgrid-universal+odata@5.13.3/node_modules/@slickgrid-universal/odata/dist/esm/services/odataQueryBuilder.service.js","../../../../node_modules/.pnpm/@slickgrid-universal+odata@5.13.3/node_modules/@slickgrid-universal/odata/dist/esm/services/grid-odata.service.js"],"sourcesContent":["import { CaseType } from '@slickgrid-universal/common';\nimport { titleCase } from '@slickgrid-universal/utils';\nexport class OdataQueryBuilderService {\n    set columnDefinitions(columnDefinitions) {\n        this._columnDefinitions = columnDefinitions;\n    }\n    set datasetIdPropName(datasetIdPropName) {\n        this._datasetIdPropName = datasetIdPropName;\n    }\n    constructor() {\n        this._filterCount = 0;\n        this._columnDefinitions = [];\n        this._datasetIdPropName = 'id';\n        this._odataOptions = {\n            filterQueue: [],\n            orderBy: '',\n        };\n        this._defaultSortBy = '';\n        this._columnFilters = {};\n    }\n    /*\n     * Build the OData query string from all the options provided\n     * @return string OData query\n     */\n    buildQuery() {\n        if (!this._odataOptions) {\n            throw new Error('Odata Service requires certain options like \"top\" for it to work');\n        }\n        this._odataOptions.filterQueue = [];\n        const queryTmpArray = [];\n        // When enableCount is set, add it to the OData query\n        if (this._odataOptions?.enableCount === true) {\n            const countQuery = this._odataOptions.version && this._odataOptions.version >= 4 ? '$count=true' : '$inlinecount=allpages';\n            queryTmpArray.push(countQuery);\n        }\n        if (this._odataOptions.top) {\n            queryTmpArray.push(`$top=${this._odataOptions.top}`);\n        }\n        if (this._odataOptions.skip) {\n            queryTmpArray.push(`$skip=${this._odataOptions.skip}`);\n        }\n        if (this._odataOptions.orderBy) {\n            let argument = '';\n            if (Array.isArray(this._odataOptions.orderBy)) {\n                argument = this._odataOptions.orderBy.join(','); // csv, that will form a query, for example: $orderby=RoleName asc, Id desc\n            }\n            else {\n                argument = this._odataOptions.orderBy;\n            }\n            queryTmpArray.push(`$orderby=${argument}`);\n        }\n        if (this._odataOptions.filterBy || this._odataOptions.filter) {\n            const filterBy = this._odataOptions.filter || this._odataOptions.filterBy;\n            if (filterBy) {\n                this._filterCount = 1;\n                this._odataOptions.filterQueue = [];\n                let filterStr = filterBy;\n                if (Array.isArray(filterBy)) {\n                    this._filterCount = filterBy.length;\n                    filterStr = filterBy.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\n                }\n                if (typeof filterStr === 'string') {\n                    if (!(filterStr[0] === '(' && filterStr.slice(-1) === ')')) {\n                        this.addToFilterQueueWhenNotExists(`(${filterStr})`);\n                    }\n                    else {\n                        this.addToFilterQueueWhenNotExists(filterStr);\n                    }\n                }\n            }\n        }\n        if (this._odataOptions.filterQueue.length > 0) {\n            const query = this._odataOptions.filterQueue.join(` ${this._odataOptions.filterBySeparator || 'and'} `);\n            this._odataOptions.filter = query; // overwrite with\n            queryTmpArray.push(`$filter=${query}`);\n        }\n        if (this._odataOptions.enableSelect || this._odataOptions.enableExpand) {\n            const fields = this._columnDefinitions.flatMap((x) => x.fields ?? [x.field]);\n            fields.unshift(this._datasetIdPropName);\n            const selectExpand = this.buildSelectExpand([...new Set(fields)]);\n            if (this._odataOptions.enableSelect) {\n                const select = selectExpand.selectParts.join(',');\n                queryTmpArray.push(`$select=${select}`);\n            }\n            if (this._odataOptions.enableExpand) {\n                const expand = selectExpand.expandParts.join(',');\n                queryTmpArray.push(`$expand=${expand}`);\n            }\n        }\n        // join all the odata functions by a '&'\n        return queryTmpArray.join('&');\n    }\n    getFilterCount() {\n        return this._filterCount;\n    }\n    get columnFilters() {\n        return this._columnFilters;\n    }\n    get options() {\n        return this._odataOptions;\n    }\n    set options(options) {\n        this._odataOptions = options;\n    }\n    removeColumnFilter(fieldName) {\n        if (this._columnFilters && fieldName in this._columnFilters) {\n            delete this._columnFilters[fieldName];\n        }\n    }\n    saveColumnFilter(fieldName, value, searchTerms) {\n        this._columnFilters[fieldName] = {\n            search: searchTerms,\n            value,\n        };\n    }\n    /**\n     * Change any OData options that will be used to build the query\n     * @param object options\n     */\n    updateOptions(options) {\n        for (const property of Object.keys(options)) {\n            if (property in options) {\n                this._odataOptions[property] = options[property]; // replace of the property\n            }\n            // we need to keep the defaultSortBy for references whenever the user removes his Sorting\n            // then we would revert to the defaultSortBy and the only way is to keep a hard copy here\n            if (property === 'orderBy' || property === 'sortBy') {\n                let sortBy = options[property];\n                // make sure first char of each orderBy field is capitalize\n                if (this._odataOptions.caseType === CaseType.pascalCase) {\n                    if (Array.isArray(sortBy)) {\n                        sortBy.forEach((field, index, inputArray) => {\n                            inputArray[index] = titleCase(field);\n                        });\n                    }\n                    else {\n                        sortBy = titleCase(options[property]);\n                    }\n                }\n                this._odataOptions.orderBy = sortBy;\n                this._defaultSortBy = sortBy;\n            }\n        }\n    }\n    //\n    // protected functions\n    // -------------------\n    addToFilterQueueWhenNotExists(filterStr) {\n        if (this._odataOptions.filterQueue?.indexOf(filterStr) === -1) {\n            this._odataOptions.filterQueue.push(filterStr);\n        }\n    }\n    //\n    // private functions\n    // -------------------\n    buildSelectExpand(selectFields) {\n        const navigations = {};\n        const selectItems = new Set();\n        for (const field of selectFields) {\n            const splits = field.split('/');\n            if (splits.length === 1) {\n                selectItems.add(field);\n            }\n            else {\n                const navigation = splits[0];\n                const properties = splits.splice(1).join('/');\n                if (!navigations[navigation]) {\n                    navigations[navigation] = [];\n                }\n                navigations[navigation].push(properties);\n                if (this._odataOptions.enableExpand && !(this._odataOptions.version && this._odataOptions.version >= 4)) {\n                    selectItems.add(navigation);\n                }\n            }\n        }\n        return {\n            selectParts: [...selectItems],\n            expandParts: this._odataOptions.enableExpand ? this.buildExpand(navigations) : [],\n        };\n    }\n    buildExpand(navigations) {\n        const expandParts = [];\n        for (const navigation of Object.keys(navigations)) {\n            if (this._odataOptions.enableSelect && this._odataOptions.version && this._odataOptions.version >= 4) {\n                const subSelectExpand = this.buildSelectExpand(navigations[navigation]);\n                let subSelect = subSelectExpand.selectParts.join(',');\n                if (subSelect.length > 0) {\n                    subSelect = '$select=' + subSelect;\n                }\n                if (this._odataOptions.enableExpand && subSelectExpand.expandParts.length > 0) {\n                    subSelect += (subSelect.length > 0 ? ';' : '') + '$expand=' + subSelectExpand.expandParts.join(',');\n                }\n                if (subSelect.length > 0) {\n                    subSelect = '(' + subSelect + ')';\n                }\n                expandParts.push(navigation + subSelect);\n            }\n            else {\n                expandParts.push(navigation);\n            }\n        }\n        return expandParts;\n    }\n}\n//# sourceMappingURL=odataQueryBuilder.service.js.map","import { CaseType, FieldType, mapOperatorByFieldType, OperatorType, parseUtcDate, SortDirection } from '@slickgrid-universal/common';\nimport { getHtmlStringOutput, stripTags, titleCase } from '@slickgrid-universal/utils';\nimport { OdataQueryBuilderService } from './odataQueryBuilder.service.js';\nconst DEFAULT_ITEMS_PER_PAGE = 25;\nconst DEFAULT_PAGE_SIZE = 20;\nexport class GridOdataService {\n    /** Getter for the Column Definitions */\n    get columnDefinitions() {\n        return this._columnDefinitions;\n    }\n    /** Getter for the Odata Service */\n    get odataService() {\n        return this._odataService;\n    }\n    /** Getter for the Grid Options pulled through the Grid Object */\n    get _gridOptions() {\n        return this._grid?.getOptions() ?? {};\n    }\n    constructor() {\n        this._currentFilters = [];\n        this._currentPagination = null;\n        this._currentSorters = [];\n        this._columnDefinitions = [];\n        this.defaultOptions = {\n            top: DEFAULT_ITEMS_PER_PAGE,\n            orderBy: '',\n            caseType: CaseType.pascalCase,\n        };\n        this._odataService = new OdataQueryBuilderService();\n    }\n    init(serviceOptions, pagination, grid, sharedService) {\n        this._grid = grid;\n        const mergedOptions = { ...this.defaultOptions, ...serviceOptions };\n        // unless user specifically set \"enablePagination\" to False, we'll add \"top\" property for the pagination in every other cases\n        if (!this._gridOptions.enablePagination && !mergedOptions?.infiniteScroll) {\n            // save current pagination as Page 1 and page size as \"top\"\n            this._odataService.options = { ...mergedOptions, top: undefined };\n            this._currentPagination = null;\n        }\n        else {\n            const topOption = mergedOptions.infiniteScroll?.fetchSize ?? pagination?.pageSize ?? this.defaultOptions.top;\n            this._odataService.options = { ...mergedOptions, top: topOption };\n            this._currentPagination = {\n                pageNumber: 1,\n                pageSize: this._odataService.options.top || this.defaultOptions.top || DEFAULT_PAGE_SIZE,\n            };\n        }\n        this.options = this._odataService.options;\n        this.pagination = pagination;\n        if (grid?.getColumns) {\n            const tmpColumnDefinitions = sharedService?.allColumns ?? grid.getColumns() ?? [];\n            this._columnDefinitions = tmpColumnDefinitions.filter((column) => !column.excludeFromQuery);\n        }\n        this._odataService.columnDefinitions = this._columnDefinitions;\n        this._odataService.datasetIdPropName = this._gridOptions.datasetIdPropertyName || 'id';\n    }\n    buildQuery() {\n        return this._odataService.buildQuery();\n    }\n    postProcess(processResult) {\n        const odataVersion = this._odataService.options.version ?? 2;\n        if (this.pagination && this._odataService.options.enableCount) {\n            const countExtractor = (this._odataService.options.countExtractor ?? odataVersion >= 4)\n                ? (r) => r?.['@odata.count']\n                : odataVersion === 3\n                    ? (r) => r?.['__count']\n                    : (r) => r?.d?.['__count'];\n            const count = countExtractor(processResult);\n            if (typeof count === 'number') {\n                this.pagination.totalItems = count;\n            }\n        }\n        if (this._odataService.options.enableExpand) {\n            const datasetExtractor = (this._odataService.options.datasetExtractor ?? odataVersion >= 4)\n                ? (r) => r?.value\n                : odataVersion === 3\n                    ? (r) => r?.results\n                    : (r) => r?.d?.results;\n            const dataset = datasetExtractor(processResult);\n            if (Array.isArray(dataset)) {\n                // Flatten navigation fields (fields containing /) in the dataset (regardless of enableExpand).\n                // E.g. given columndefinition 'product/name' and dataset [{id: 1,product:{'name':'flowers'}}], then flattens to [{id:1,'product/name':'flowers'}]\n                const navigationFields = new Set(this._columnDefinitions.flatMap((x) => x.fields ?? [x.field]).filter((x) => x.includes('/')));\n                if (navigationFields.size > 0) {\n                    const navigations = new Set();\n                    for (const item of dataset) {\n                        for (const field of navigationFields) {\n                            const names = field.split('/');\n                            const navigation = names[0];\n                            navigations.add(navigation);\n                            let val = item[navigation];\n                            for (let i = 1; i < names.length; i++) {\n                                const mappedName = names[i];\n                                if (val && typeof val === 'object' && mappedName in val) {\n                                    val = val[mappedName];\n                                }\n                            }\n                            item[field] = val;\n                        }\n                        // Remove navigation objects from the dataset to free memory and make sure we never work with them.\n                        for (const navigation of navigations) {\n                            if (typeof item[navigation] === 'object') {\n                                delete item[navigation];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    clearFilters() {\n        this._currentFilters = [];\n        this.updateFilters([]);\n    }\n    clearSorters() {\n        this._currentSorters = [];\n        this.updateSorters([]);\n    }\n    updateOptions(serviceOptions) {\n        this.options = { ...this.options, ...serviceOptions };\n        this._odataService.options = this.options;\n    }\n    removeColumnFilter(fieldName) {\n        this._odataService.removeColumnFilter(fieldName);\n    }\n    /** Get the Filters that are currently used by the grid */\n    getCurrentFilters() {\n        return this._currentFilters;\n    }\n    /** Get the Pagination that is currently used by the grid */\n    getCurrentPagination() {\n        return this._currentPagination;\n    }\n    /** Get the Sorters that are currently used by the grid */\n    getCurrentSorters() {\n        return this._currentSorters;\n    }\n    /**\n     * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\n     * @param string operator\n     * @returns string map\n     */\n    mapOdataOperator(operator) {\n        let map = '';\n        switch (operator) {\n            case '<':\n                map = 'lt';\n                break;\n            case '<=':\n                map = 'le';\n                break;\n            case '>':\n                map = 'gt';\n                break;\n            case '>=':\n                map = 'ge';\n                break;\n            case '<>':\n            case '!=':\n                map = 'ne';\n                break;\n            case '=':\n            case '==':\n            default:\n                map = 'eq';\n                break;\n        }\n        return map;\n    }\n    /*\n     * Reset the pagination options\n     */\n    resetPaginationOptions() {\n        this._odataService.updateOptions({\n            skip: 0,\n        });\n    }\n    saveColumnFilter(fieldName, value, terms) {\n        this._odataService.saveColumnFilter(fieldName, value, terms);\n    }\n    /*\n     * FILTERING\n     */\n    processOnFilterChanged(_event, args) {\n        const gridOptions = this._gridOptions;\n        const backendApi = gridOptions.backendServiceApi;\n        if (backendApi === undefined) {\n            throw new Error('Something went wrong in the GridOdataService, \"backendServiceApi\" is not initialized');\n        }\n        // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n        this._currentFilters = this.castFilterToColumnFilters(args.columnFilters);\n        if (!args || !args.grid) {\n            throw new Error('Something went wrong when trying create the GridOdataService, it seems that \"args\" is not populated correctly');\n        }\n        // loop through all columns to inspect filters & set the query\n        this.updateFilters(args.columnFilters);\n        this.resetPaginationOptions();\n        return this._odataService.buildQuery();\n    }\n    /*\n     * PAGINATION\n     */\n    processOnPaginationChanged(_event, args) {\n        const pageSize = +(this.options?.infiniteScroll?.fetchSize ||\n            args.pageSize ||\n            (this.pagination ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));\n        this.updatePagination(args.newPage, pageSize);\n        // build the OData query which we will use in the WebAPI callback\n        return this._odataService.buildQuery();\n    }\n    /*\n     * SORTING\n     */\n    processOnSortChanged(_event, args) {\n        const sortColumns = args.multiColumnSort\n            ? args.sortCols\n            : new Array({\n                columnId: args.sortCol?.id ?? '',\n                sortCol: args.sortCol,\n                sortAsc: args.sortAsc,\n            });\n        // loop through all columns to inspect sorters & set the query\n        this.updateSorters(sortColumns);\n        // when using infinite scroll, we need to go back to 1st page\n        if (this.options?.infiniteScroll) {\n            this._odataService.updateOptions({ skip: undefined });\n        }\n        // build the OData query which we will use in the WebAPI callback\n        return this._odataService.buildQuery();\n    }\n    /**\n     * loop through all columns to inspect filters & update backend service filters\n     * @param columnFilters\n     */\n    updateFilters(columnFilters, isUpdatedByPresetOrDynamically) {\n        let searchBy = '';\n        const searchByArray = [];\n        const odataVersion = this._odataService.options.version ?? 2;\n        // on filter preset load, we need to keep current filters\n        if (isUpdatedByPresetOrDynamically) {\n            this._currentFilters = this.castFilterToColumnFilters(columnFilters);\n        }\n        // loop through all columns to inspect filters\n        for (const columnId in columnFilters) {\n            if (columnFilters.hasOwnProperty(columnId)) {\n                const columnFilter = columnFilters[columnId];\n                // if user defined some \"presets\", then we need to find the filters from the column definitions instead\n                let columnDef;\n                if (isUpdatedByPresetOrDynamically && Array.isArray(this._columnDefinitions)) {\n                    columnDef = this._columnDefinitions.find((column) => column.id === columnFilter.columnId);\n                }\n                else {\n                    columnDef = columnFilter.columnDef;\n                }\n                if (!columnDef) {\n                    throw new Error('[GridOData Service]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');\n                }\n                let fieldName = columnDef.filter?.queryField || columnDef.queryFieldFilter || columnDef.queryField || columnDef.field || columnDef.name || '';\n                if (fieldName instanceof HTMLElement) {\n                    fieldName = stripTags(fieldName.innerHTML);\n                }\n                const fieldType = columnDef.type || FieldType.string;\n                let searchTerms = (columnFilter?.searchTerms ? [...columnFilter.searchTerms] : null) || [];\n                let fieldSearchValue = Array.isArray(searchTerms) && searchTerms.length === 1 ? searchTerms[0] : '';\n                if (typeof fieldSearchValue === 'undefined') {\n                    fieldSearchValue = '';\n                }\n                if (!fieldName) {\n                    throw new Error(`GridOData filter could not find the field name to query the search, your column definition must include a valid \"field\" or \"name\" (optionally you can also use the \"queryfield\").`);\n                }\n                if (this._odataService.options.useVerbatimSearchTerms || columnFilter.verbatimSearchTerms) {\n                    searchByArray.push(`${fieldName} ${columnFilter.operator} ${JSON.stringify(columnFilter.searchTerms)}`.trim());\n                    continue;\n                }\n                fieldSearchValue = fieldSearchValue === undefined || fieldSearchValue === null ? '' : `${fieldSearchValue}`; // make sure it's a string\n                // run regex to find possible filter operators unless the user disabled the feature\n                const autoParseInputFilterOperator = columnDef.autoParseInputFilterOperator ?? this._gridOptions.autoParseInputFilterOperator;\n                // group (2): comboStartsWith, (3): comboEndsWith, (4): Operator, (1 or 5): searchValue, (6): last char is '*' (meaning starts with, ex.: abc*)\n                const matches = autoParseInputFilterOperator !== false\n                    ? fieldSearchValue.match(/^((.*[^\\\\*\\r\\n])[*]{1}(.*[^*\\r\\n]))|^([<>!=*]{0,2})(.*[^<>!=*])([*]?)$/) || []\n                    : [fieldSearchValue, '', '', '', '', fieldSearchValue, ''];\n                const comboStartsWith = matches?.[2] || '';\n                const comboEndsWith = matches?.[3] || '';\n                let operator = columnFilter.operator || matches?.[4];\n                let searchValue = matches?.[1] || matches?.[5] || '';\n                const lastValueChar = matches?.[6] || operator === '*z' || operator === OperatorType.endsWith ? '*' : '';\n                const bypassOdataQuery = columnFilter.bypassBackendQuery || false;\n                // no need to query if search value is empty\n                if (fieldName && searchValue === '' && searchTerms.length <= 1) {\n                    this.removeColumnFilter(getHtmlStringOutput(fieldName));\n                    continue;\n                }\n                // StartsWith + EndsWith combo\n                if (comboStartsWith && comboEndsWith) {\n                    searchTerms = [comboStartsWith, comboEndsWith];\n                    operator = OperatorType.startsWithEndsWith;\n                }\n                else if (Array.isArray(searchTerms) &&\n                    searchTerms.length === 1 &&\n                    typeof searchTerms[0] === 'string' &&\n                    searchTerms[0].indexOf('..') >= 0) {\n                    // range filter\n                    if (operator !== OperatorType.rangeInclusive && operator !== OperatorType.rangeExclusive) {\n                        operator = this._gridOptions.defaultFilterRangeOperator ?? OperatorType.rangeInclusive;\n                    }\n                    searchTerms = searchTerms[0].split('..', 2);\n                    if (searchTerms[0] === '') {\n                        operator = operator === OperatorType.rangeInclusive ? '<=' : operator === OperatorType.rangeExclusive ? '<' : operator;\n                        searchTerms = searchTerms.slice(1);\n                        searchValue = searchTerms[0];\n                    }\n                    else if (searchTerms[1] === '') {\n                        operator = operator === OperatorType.rangeInclusive ? '>=' : operator === OperatorType.rangeExclusive ? '>' : operator;\n                        searchTerms = searchTerms.slice(0, 1);\n                        searchValue = searchTerms[0];\n                    }\n                }\n                // if we didn't find an Operator but we have a Column Operator inside the Filter (DOM Element), we should use its default Operator\n                // multipleSelect is \"IN\", while singleSelect is \"EQ\", else don't map any operator\n                if (!operator && columnDef.filter) {\n                    operator = columnDef.filter.operator;\n                }\n                // No operator and 2 search terms should lead to default range operator.\n                if (!operator && Array.isArray(searchTerms) && searchTerms.length === 2 && searchTerms[0] && searchTerms[1]) {\n                    operator = this._gridOptions.defaultFilterRangeOperator;\n                }\n                // Range with 1 searchterm should lead to equals for a date field.\n                if ((operator === OperatorType.rangeInclusive || operator === OperatorType.rangeExclusive) &&\n                    Array.isArray(searchTerms) &&\n                    searchTerms.length === 1 &&\n                    fieldType === FieldType.date) {\n                    operator = OperatorType.equal;\n                }\n                // if we still don't have an operator find the proper Operator to use according to field type\n                if (!operator) {\n                    operator = mapOperatorByFieldType(fieldType);\n                }\n                // extra query arguments\n                if (bypassOdataQuery) {\n                    // push to our temp array and also trim white spaces\n                    if (fieldName) {\n                        this.saveColumnFilter(getHtmlStringOutput(fieldName), fieldSearchValue, searchTerms);\n                    }\n                }\n                else {\n                    // Normalize all search values\n                    searchValue = this.normalizeSearchValue(fieldType, searchValue, odataVersion);\n                    if (Array.isArray(searchTerms)) {\n                        searchTerms.forEach((_part, index) => {\n                            searchTerms[index] = this.normalizeSearchValue(fieldType, searchTerms[index], odataVersion);\n                        });\n                    }\n                    searchBy = '';\n                    // titleCase the fieldName so that it matches the WebApi names\n                    if (this._odataService.options.caseType === CaseType.pascalCase) {\n                        fieldName = titleCase(getHtmlStringOutput(fieldName || ''));\n                    }\n                    let filterQueryOverride = undefined;\n                    if (typeof this._odataService.options.filterQueryOverride === 'function') {\n                        filterQueryOverride = this._odataService.options.filterQueryOverride({\n                            fieldName: getHtmlStringOutput(fieldName),\n                            columnDef,\n                            operator,\n                            columnFilterOperator: columnFilter.operator,\n                            searchValues: searchTerms,\n                            grid: this._grid,\n                        });\n                    }\n                    if (filterQueryOverride !== undefined) {\n                        searchBy = filterQueryOverride;\n                    }\n                    else if (operator === OperatorType.startsWithEndsWith && Array.isArray(searchTerms) && searchTerms.length === 2) {\n                        const tmpSearchTerms = [];\n                        const [sw, ew] = searchTerms;\n                        // add 2 conditions (StartsWith A + EndsWith B) to the search array\n                        tmpSearchTerms.push(`startswith(${fieldName}, ${sw})`);\n                        tmpSearchTerms.push(`endswith(${fieldName}, ${ew})`);\n                        searchBy = tmpSearchTerms.join(' and ');\n                    }\n                    else if (searchTerms?.length > 1 &&\n                        (operator === 'IN' || operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN' || operator === 'NOT_IN')) {\n                        // when having more than 1 search term (then check if we have a \"IN\" or \"NOT IN\" filter search)\n                        const tmpSearchTerms = [];\n                        if (operator === 'IN') {\n                            // example:: (Stage eq \"Expired\" or Stage eq \"Renewal\")\n                            for (let j = 0, lnj = searchTerms.length; j < lnj; j++) {\n                                tmpSearchTerms.push(`${fieldName} eq ${searchTerms[j]}`);\n                            }\n                            searchBy = tmpSearchTerms.join(' or ');\n                        }\n                        else {\n                            // example:: (Stage ne \"Expired\" and Stage ne \"Renewal\")\n                            for (let k = 0, lnk = searchTerms.length; k < lnk; k++) {\n                                tmpSearchTerms.push(`${fieldName} ne ${searchTerms[k]}`);\n                            }\n                            searchBy = tmpSearchTerms.join(' and ');\n                        }\n                        if (!(typeof searchBy === 'string' && searchBy[0] === '(' && searchBy.slice(-1) === ')')) {\n                            searchBy = `(${searchBy})`;\n                        }\n                    }\n                    else if (operator === '*' ||\n                        operator === 'a*' ||\n                        operator === '*z' ||\n                        lastValueChar === '*' ||\n                        operator === OperatorType.startsWith ||\n                        operator === OperatorType.endsWith) {\n                        // first/last character is a '*' will be a startsWith or endsWith\n                        searchBy =\n                            operator === '*' || operator === '*z' || operator === OperatorType.endsWith\n                                ? `endswith(${fieldName}, ${searchValue})`\n                                : `startswith(${fieldName}, ${searchValue})`;\n                    }\n                    else if (operator === OperatorType.rangeExclusive || operator === OperatorType.rangeInclusive) {\n                        // example:: (Name >= 'Bob' and Name <= 'Jane')\n                        searchBy = this.filterBySearchTermRange(getHtmlStringOutput(fieldName), operator, searchTerms);\n                    }\n                    else if ((operator === '' || operator === OperatorType.contains || operator === OperatorType.notContains) &&\n                        (fieldType === FieldType.string || fieldType === FieldType.text || fieldType === FieldType.readonly)) {\n                        searchBy = odataVersion >= 4 ? `contains(${fieldName}, ${searchValue})` : `substringof(${searchValue}, ${fieldName})`;\n                        if (operator === OperatorType.notContains) {\n                            searchBy = `not ${searchBy}`;\n                        }\n                    }\n                    else {\n                        // any other field type (or undefined type)\n                        searchBy = `${fieldName} ${this.mapOdataOperator(operator)} ${searchValue}`;\n                    }\n                    // push to our temp array and also trim white spaces\n                    if (searchBy !== '') {\n                        searchByArray.push(searchBy.trim());\n                        this.saveColumnFilter(getHtmlStringOutput(fieldName || ''), fieldSearchValue, searchValue);\n                    }\n                }\n            }\n        }\n        // update the service options with filters for the buildQuery() to work later\n        this._odataService.updateOptions({\n            filter: searchByArray.length > 0 ? searchByArray.join(' and ') : '',\n            skip: undefined,\n        });\n    }\n    /**\n     * Update the pagination component with it's new page number and size\n     * @param newPage\n     * @param pageSize\n     */\n    updatePagination(newPage, pageSize) {\n        this._currentPagination = {\n            pageNumber: newPage,\n            pageSize,\n        };\n        // unless user specifically set \"enablePagination\" to False, we'll update pagination options in every other cases\n        if (this._gridOptions &&\n            (this._gridOptions.enablePagination || !this._gridOptions.hasOwnProperty('enablePagination') || this.options?.infiniteScroll)) {\n            this._odataService.updateOptions({\n                top: pageSize,\n                skip: (newPage - 1) * pageSize,\n            });\n        }\n    }\n    /**\n     * loop through all columns to inspect sorters & update backend service orderBy\n     * @param columnFilters\n     */\n    updateSorters(sortColumns, presetSorters) {\n        let currentSorters = [];\n        const odataSorters = [];\n        if (!sortColumns && presetSorters) {\n            // make the presets the current sorters, also make sure that all direction are in lowercase for OData\n            currentSorters = presetSorters;\n            currentSorters.forEach((sorter) => (sorter.direction = sorter.direction.toLowerCase()));\n            // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties\n            const tmpSorterArray = currentSorters.map((sorter) => {\n                const columnDef = this._columnDefinitions.find((column) => column.id === sorter.columnId);\n                odataSorters.push({\n                    field: columnDef ? (columnDef.queryFieldSorter || columnDef.queryField || columnDef.field) + '' : sorter.columnId + '',\n                    direction: sorter.direction,\n                });\n                // return only the column(s) found in the Column Definitions ELSE null\n                if (columnDef) {\n                    return {\n                        columnId: sorter.columnId,\n                        sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC,\n                    };\n                }\n                return null;\n            });\n            // set the sort icons, but also make sure to filter out null values (that happens when columnDef is not found)\n            if (Array.isArray(tmpSorterArray) && this._grid) {\n                this._grid.setSortColumns(tmpSorterArray);\n            }\n        }\n        else if (sortColumns && !presetSorters) {\n            // build the SortBy string, it could be multisort, example: customerNo asc, purchaserName desc\n            if (sortColumns?.length === 0) {\n                // TODO fix this line\n                // currentSorters = new Array(this.defaultOptions.orderBy); // when empty, use the default sort\n            }\n            else {\n                if (sortColumns) {\n                    for (const columnDef of sortColumns) {\n                        if (columnDef.sortCol) {\n                            let fieldName = (columnDef.sortCol.queryFieldSorter || columnDef.sortCol.queryField || columnDef.sortCol.field) + '';\n                            let columnFieldName = (columnDef.sortCol.field || columnDef.sortCol.id) + '';\n                            let queryField = (columnDef.sortCol.queryFieldSorter || columnDef.sortCol.queryField || columnDef.sortCol.field || '') + '';\n                            if (this._odataService.options.caseType === CaseType.pascalCase) {\n                                fieldName = titleCase(fieldName);\n                                columnFieldName = titleCase(columnFieldName);\n                                queryField = titleCase(queryField);\n                            }\n                            currentSorters.push({\n                                columnId: columnDef.sortCol.id,\n                                direction: columnDef.sortAsc ? SortDirection.asc : SortDirection.desc,\n                            });\n                            if (queryField !== '') {\n                                odataSorters.push({\n                                    field: queryField,\n                                    direction: columnDef.sortAsc ? SortDirection.ASC : SortDirection.DESC,\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // transform the sortby array into a CSV string for OData\n        currentSorters = currentSorters || [];\n        const csvString = odataSorters\n            .map((sorter) => {\n            let str = '';\n            if (sorter && sorter.field) {\n                const sortField = this._odataService.options.caseType === CaseType.pascalCase ? titleCase(sorter.field) : sorter.field;\n                str = `${sortField} ${(sorter && sorter.direction && sorter.direction.toLowerCase()) || ''}`;\n            }\n            return str;\n        })\n            .join(',');\n        this._odataService.updateOptions({\n            orderBy: csvString,\n        });\n        // keep current Sorters and update the service options with the new sorting\n        this._currentSorters = currentSorters;\n        // build the OData query which we will use in the WebAPI callback\n        return this._odataService.buildQuery();\n    }\n    //\n    // protected functions\n    // -------------------\n    /**\n     * Cast provided filters (could be in multiple format) into an array of ColumnFilter\n     * @param columnFilters\n     */\n    castFilterToColumnFilters(columnFilters) {\n        // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)\n        const filtersArray = typeof columnFilters === 'object' ? Object.keys(columnFilters).map((key) => columnFilters[key]) : columnFilters;\n        if (!Array.isArray(filtersArray)) {\n            return [];\n        }\n        return filtersArray.map((filter) => {\n            const tmpFilter = { columnId: filter.columnId || '' };\n            if (filter.operator) {\n                tmpFilter.operator = filter.operator;\n            }\n            if (filter.targetSelector) {\n                tmpFilter.targetSelector = filter.targetSelector;\n            }\n            if (Array.isArray(filter.searchTerms)) {\n                tmpFilter.searchTerms = filter.searchTerms;\n            }\n            return tmpFilter;\n        });\n    }\n    /**\n     * Filter by a range of searchTerms (2 searchTerms OR 1 string separated by 2 dots \"value1..value2\")\n     */\n    filterBySearchTermRange(fieldName, operator, searchTerms) {\n        let query = '';\n        if (Array.isArray(searchTerms) && searchTerms.length === 2) {\n            if (operator === OperatorType.rangeInclusive) {\n                // example:: (Duration >= 5 and Duration <= 10)\n                query = `(${fieldName} ge ${searchTerms[0]}`;\n                if (searchTerms[1] !== '') {\n                    query += ` and ${fieldName} le ${searchTerms[1]}`;\n                }\n                query += ')';\n            }\n            else if (operator === OperatorType.rangeExclusive) {\n                // example:: (Duration > 5 and Duration < 10)\n                query = `(${fieldName} gt ${searchTerms[0]}`;\n                if (searchTerms[1] !== '') {\n                    query += ` and ${fieldName} lt ${searchTerms[1]}`;\n                }\n                query += ')';\n            }\n        }\n        return query;\n    }\n    /**\n     * Normalizes the search value according to field type and oData version.\n     */\n    normalizeSearchValue(fieldType, searchValue, version) {\n        switch (fieldType) {\n            case FieldType.date:\n                searchValue = parseUtcDate(searchValue);\n                searchValue = version >= 4 ? searchValue : `DateTime'${searchValue}'`;\n                break;\n            case FieldType.string:\n            case FieldType.text:\n            case FieldType.readonly:\n                if (typeof searchValue === 'string') {\n                    // escape single quotes by doubling them\n                    searchValue = searchValue.replace(/'/g, `''`);\n                    // encode URI of the final search value\n                    searchValue = encodeURIComponent(searchValue);\n                    // strings need to be quoted.\n                    searchValue = `'${searchValue}'`;\n                }\n                break;\n            case FieldType.integer:\n            case FieldType.number:\n            case FieldType.float:\n                if (typeof searchValue === 'string') {\n                    // Parse a valid decimal from the string.\n                    // Replace double dots with single dots\n                    searchValue = searchValue.replace(/\\.\\./g, '.');\n                    // Remove a trailing dot\n                    searchValue = searchValue.replace(/\\.+$/g, '');\n                    // Prefix a leading dot with 0\n                    searchValue = searchValue.replace(/^\\.+/g, '0.');\n                    // Prefix leading dash dot with -0.\n                    searchValue = searchValue.replace(/^-+\\.+/g, '-0.');\n                    // Remove any non valid decimal characters from the search string\n                    searchValue = searchValue.replace(/(?!^-)[^\\d.]/g, '');\n                    // if nothing left, search for 0\n                    if (searchValue === '' || searchValue === '-') {\n                        searchValue = '0';\n                    }\n                }\n                break;\n        }\n        return searchValue;\n    }\n}\n//# sourceMappingURL=grid-odata.service.js.map"],"names":["OdataQueryBuilderService","columnDefinitions","datasetIdPropName","queryTmpArray","_a","countQuery","argument","filterBy","filterStr","query","fields","x","selectExpand","select","expand","options","fieldName","value","searchTerms","property","sortBy","CaseType","field","index","inputArray","titleCase","selectFields","navigations","selectItems","splits","navigation","properties","expandParts","subSelectExpand","subSelect","DEFAULT_ITEMS_PER_PAGE","DEFAULT_PAGE_SIZE","GridOdataService","serviceOptions","pagination","grid","sharedService","mergedOptions","topOption","tmpColumnDefinitions","column","processResult","odataVersion","count","r","dataset","navigationFields","item","names","val","i","mappedName","operator","map","terms","_event","args","pageSize","_b","sortColumns","columnFilters","isUpdatedByPresetOrDynamically","searchBy","searchByArray","columnId","columnFilter","columnDef","stripTags","fieldType","FieldType","fieldSearchValue","matches","comboStartsWith","comboEndsWith","searchValue","lastValueChar","OperatorType","bypassOdataQuery","getHtmlStringOutput","mapOperatorByFieldType","_part","filterQueryOverride","tmpSearchTerms","sw","ew","j","lnj","k","lnk","newPage","presetSorters","currentSorters","odataSorters","sorter","tmpSorterArray","SortDirection","columnFieldName","queryField","csvString","str","filtersArray","key","filter","tmpFilter","version","parseUtcDate"],"mappings":"mGAEO,MAAMA,CAAyB,CAClC,IAAI,kBAAkBC,EAAmB,CACrC,KAAK,mBAAqBA,CAClC,CACI,IAAI,kBAAkBC,EAAmB,CACrC,KAAK,mBAAqBA,CAClC,CACI,aAAc,CACV,KAAK,aAAe,EACpB,KAAK,mBAAqB,CAAE,EAC5B,KAAK,mBAAqB,KAC1B,KAAK,cAAgB,CACjB,YAAa,CAAE,EACf,QAAS,EACZ,EACD,KAAK,eAAiB,GACtB,KAAK,eAAiB,CAAE,CAChC,CAKI,YAAa,OACT,GAAI,CAAC,KAAK,cACN,MAAM,IAAI,MAAM,kEAAkE,EAEtF,KAAK,cAAc,YAAc,CAAE,EACnC,MAAMC,EAAgB,CAAE,EAExB,KAAIC,EAAA,KAAK,gBAAL,YAAAA,EAAoB,eAAgB,GAAM,CAC1C,MAAMC,EAAa,KAAK,cAAc,SAAW,KAAK,cAAc,SAAW,EAAI,cAAgB,wBACnGF,EAAc,KAAKE,CAAU,CACzC,CAOQ,GANI,KAAK,cAAc,KACnBF,EAAc,KAAK,QAAQ,KAAK,cAAc,GAAG,EAAE,EAEnD,KAAK,cAAc,MACnBA,EAAc,KAAK,SAAS,KAAK,cAAc,IAAI,EAAE,EAErD,KAAK,cAAc,QAAS,CAC5B,IAAIG,EAAW,GACX,MAAM,QAAQ,KAAK,cAAc,OAAO,EACxCA,EAAW,KAAK,cAAc,QAAQ,KAAK,GAAG,EAG9CA,EAAW,KAAK,cAAc,QAElCH,EAAc,KAAK,YAAYG,CAAQ,EAAE,CACrD,CACQ,GAAI,KAAK,cAAc,UAAY,KAAK,cAAc,OAAQ,CAC1D,MAAMC,EAAW,KAAK,cAAc,QAAU,KAAK,cAAc,SACjE,GAAIA,EAAU,CACV,KAAK,aAAe,EACpB,KAAK,cAAc,YAAc,CAAE,EACnC,IAAIC,EAAYD,EACZ,MAAM,QAAQA,CAAQ,IACtB,KAAK,aAAeA,EAAS,OAC7BC,EAAYD,EAAS,KAAK,IAAI,KAAK,cAAc,mBAAqB,KAAK,GAAG,GAE9E,OAAOC,GAAc,WACfA,EAAU,CAAC,IAAM,KAAOA,EAAU,MAAM,EAAE,IAAM,IAIlD,KAAK,8BAA8BA,CAAS,EAH5C,KAAK,8BAA8B,IAAIA,CAAS,GAAG,EAM3E,CACA,CACQ,GAAI,KAAK,cAAc,YAAY,OAAS,EAAG,CAC3C,MAAMC,EAAQ,KAAK,cAAc,YAAY,KAAK,IAAI,KAAK,cAAc,mBAAqB,KAAK,GAAG,EACtG,KAAK,cAAc,OAASA,EAC5BN,EAAc,KAAK,WAAWM,CAAK,EAAE,CACjD,CACQ,GAAI,KAAK,cAAc,cAAgB,KAAK,cAAc,aAAc,CACpE,MAAMC,EAAS,KAAK,mBAAmB,QAASC,GAAMA,EAAE,QAAU,CAACA,EAAE,KAAK,CAAC,EAC3ED,EAAO,QAAQ,KAAK,kBAAkB,EACtC,MAAME,EAAe,KAAK,kBAAkB,CAAC,GAAG,IAAI,IAAIF,CAAM,CAAC,CAAC,EAChE,GAAI,KAAK,cAAc,aAAc,CACjC,MAAMG,EAASD,EAAa,YAAY,KAAK,GAAG,EAChDT,EAAc,KAAK,WAAWU,CAAM,EAAE,CACtD,CACY,GAAI,KAAK,cAAc,aAAc,CACjC,MAAMC,EAASF,EAAa,YAAY,KAAK,GAAG,EAChDT,EAAc,KAAK,WAAWW,CAAM,EAAE,CACtD,CACA,CAEQ,OAAOX,EAAc,KAAK,GAAG,CACrC,CACI,gBAAiB,CACb,OAAO,KAAK,YACpB,CACI,IAAI,eAAgB,CAChB,OAAO,KAAK,cACpB,CACI,IAAI,SAAU,CACV,OAAO,KAAK,aACpB,CACI,IAAI,QAAQY,EAAS,CACjB,KAAK,cAAgBA,CAC7B,CACI,mBAAmBC,EAAW,CACtB,KAAK,gBAAkBA,KAAa,KAAK,gBACzC,OAAO,KAAK,eAAeA,CAAS,CAEhD,CACI,iBAAiBA,EAAWC,EAAOC,EAAa,CAC5C,KAAK,eAAeF,CAAS,EAAI,CAC7B,OAAQE,EACR,MAAAD,CACH,CACT,CAKI,cAAcF,EAAS,CACnB,UAAWI,KAAY,OAAO,KAAKJ,CAAO,EAMtC,GALII,KAAYJ,IACZ,KAAK,cAAcI,CAAQ,EAAIJ,EAAQI,CAAQ,GAI/CA,IAAa,WAAaA,IAAa,SAAU,CACjD,IAAIC,EAASL,EAAQI,CAAQ,EAEzB,KAAK,cAAc,WAAaE,EAAS,aACrC,MAAM,QAAQD,CAAM,EACpBA,EAAO,QAAQ,CAACE,EAAOC,EAAOC,IAAe,CACzCA,EAAWD,CAAK,EAAIE,EAAUH,CAAK,CAC/D,CAAyB,EAGDF,EAASK,EAAUV,EAAQI,CAAQ,CAAC,GAG5C,KAAK,cAAc,QAAUC,EAC7B,KAAK,eAAiBA,CACtC,CAEA,CAII,8BAA8BZ,EAAW,SACjCJ,EAAA,KAAK,cAAc,cAAnB,YAAAA,EAAgC,QAAQI,MAAe,IACvD,KAAK,cAAc,YAAY,KAAKA,CAAS,CAEzD,CAII,kBAAkBkB,EAAc,CAC5B,MAAMC,EAAc,CAAE,EAChBC,EAAc,IAAI,IACxB,UAAWN,KAASI,EAAc,CAC9B,MAAMG,EAASP,EAAM,MAAM,GAAG,EAC9B,GAAIO,EAAO,SAAW,EAClBD,EAAY,IAAIN,CAAK,MAEpB,CACD,MAAMQ,EAAaD,EAAO,CAAC,EACrBE,EAAaF,EAAO,OAAO,CAAC,EAAE,KAAK,GAAG,EACvCF,EAAYG,CAAU,IACvBH,EAAYG,CAAU,EAAI,CAAE,GAEhCH,EAAYG,CAAU,EAAE,KAAKC,CAAU,EACnC,KAAK,cAAc,cAAgB,EAAE,KAAK,cAAc,SAAW,KAAK,cAAc,SAAW,IACjGH,EAAY,IAAIE,CAAU,CAE9C,CACA,CACQ,MAAO,CACH,YAAa,CAAC,GAAGF,CAAW,EAC5B,YAAa,KAAK,cAAc,aAAe,KAAK,YAAYD,CAAW,EAAI,CAAE,CACpF,CACT,CACI,YAAYA,EAAa,CACrB,MAAMK,EAAc,CAAE,EACtB,UAAWF,KAAc,OAAO,KAAKH,CAAW,EAC5C,GAAI,KAAK,cAAc,cAAgB,KAAK,cAAc,SAAW,KAAK,cAAc,SAAW,EAAG,CAClG,MAAMM,EAAkB,KAAK,kBAAkBN,EAAYG,CAAU,CAAC,EACtE,IAAII,EAAYD,EAAgB,YAAY,KAAK,GAAG,EAChDC,EAAU,OAAS,IACnBA,EAAY,WAAaA,GAEzB,KAAK,cAAc,cAAgBD,EAAgB,YAAY,OAAS,IACxEC,IAAcA,EAAU,OAAS,EAAI,IAAM,IAAM,WAAaD,EAAgB,YAAY,KAAK,GAAG,GAElGC,EAAU,OAAS,IACnBA,EAAY,IAAMA,EAAY,KAElCF,EAAY,KAAKF,EAAaI,CAAS,CACvD,MAEgBF,EAAY,KAAKF,CAAU,EAGnC,OAAOE,CACf,CACA,CCxMA,MAAMG,EAAyB,GACzBC,EAAoB,GACnB,MAAMC,CAAiB,CAE1B,IAAI,mBAAoB,CACpB,OAAO,KAAK,kBACpB,CAEI,IAAI,cAAe,CACf,OAAO,KAAK,aACpB,CAEI,IAAI,cAAe,OACf,QAAOjC,EAAA,KAAK,QAAL,YAAAA,EAAY,eAAgB,CAAE,CAC7C,CACI,aAAc,CACV,KAAK,gBAAkB,CAAE,EACzB,KAAK,mBAAqB,KAC1B,KAAK,gBAAkB,CAAE,EACzB,KAAK,mBAAqB,CAAE,EAC5B,KAAK,eAAiB,CAClB,IAAK+B,EACL,QAAS,GACT,SAAUd,EAAS,UACtB,EACD,KAAK,cAAgB,IAAIrB,CACjC,CACI,KAAKsC,EAAgBC,EAAYC,EAAMC,EAAe,OAClD,KAAK,MAAQD,EACb,MAAME,EAAgB,CAAE,GAAG,KAAK,eAAgB,GAAGJ,CAAgB,EAEnE,GAAI,CAAC,KAAK,aAAa,kBAAoB,EAACI,GAAA,MAAAA,EAAe,gBAEvD,KAAK,cAAc,QAAU,CAAE,GAAGA,EAAe,IAAK,MAAW,EACjE,KAAK,mBAAqB,SAEzB,CACD,MAAMC,IAAYvC,EAAAsC,EAAc,iBAAd,YAAAtC,EAA8B,aAAamC,GAAA,YAAAA,EAAY,WAAY,KAAK,eAAe,IACzG,KAAK,cAAc,QAAU,CAAE,GAAGG,EAAe,IAAKC,CAAW,EACjE,KAAK,mBAAqB,CACtB,WAAY,EACZ,SAAU,KAAK,cAAc,QAAQ,KAAO,KAAK,eAAe,KAAOP,CAC1E,CACb,CAGQ,GAFA,KAAK,QAAU,KAAK,cAAc,QAClC,KAAK,WAAaG,EACdC,GAAA,MAAAA,EAAM,WAAY,CAClB,MAAMI,GAAuBH,GAAA,YAAAA,EAAe,aAAcD,EAAK,WAAY,GAAI,CAAE,EACjF,KAAK,mBAAqBI,EAAqB,OAAQC,GAAW,CAACA,EAAO,gBAAgB,CACtG,CACQ,KAAK,cAAc,kBAAoB,KAAK,mBAC5C,KAAK,cAAc,kBAAoB,KAAK,aAAa,uBAAyB,IAC1F,CACI,YAAa,CACT,OAAO,KAAK,cAAc,WAAY,CAC9C,CACI,YAAYC,EAAe,CACvB,MAAMC,EAAe,KAAK,cAAc,QAAQ,SAAW,EAC3D,GAAI,KAAK,YAAc,KAAK,cAAc,QAAQ,YAAa,CAM3D,MAAMC,GALkB,KAAK,cAAc,QAAQ,gBAAkBD,GAAgB,EAC9EE,GAAMA,GAAA,YAAAA,EAAI,gBACXF,IAAiB,EACZE,GAAMA,GAAA,YAAAA,EAAI,QACVA,GAAM,OAAA,OAAA7C,EAAA6C,GAAA,YAAAA,EAAG,IAAH,YAAA7C,EAAO,UACK0C,CAAa,EACtC,OAAOE,GAAU,WACjB,KAAK,WAAW,WAAaA,EAE7C,CACQ,GAAI,KAAK,cAAc,QAAQ,aAAc,CAMzC,MAAME,GALoB,KAAK,cAAc,QAAQ,kBAAoBH,GAAgB,EAClFE,GAAMA,GAAA,YAAAA,EAAG,MACVF,IAAiB,EACZE,GAAMA,GAAA,YAAAA,EAAG,QACTA,GAAC,OAAK,OAAA7C,EAAA6C,GAAA,YAAAA,EAAG,IAAH,YAAA7C,EAAM,UACU0C,CAAa,EAC9C,GAAI,MAAM,QAAQI,CAAO,EAAG,CAGxB,MAAMC,EAAmB,IAAI,IAAI,KAAK,mBAAmB,QAASxC,GAAMA,EAAE,QAAU,CAACA,EAAE,KAAK,CAAC,EAAE,OAAQA,GAAMA,EAAE,SAAS,GAAG,CAAC,CAAC,EAC7H,GAAIwC,EAAiB,KAAO,EAAG,CAC3B,MAAMxB,EAAc,IAAI,IACxB,UAAWyB,KAAQF,EAAS,CACxB,UAAW5B,KAAS6B,EAAkB,CAClC,MAAME,EAAQ/B,EAAM,MAAM,GAAG,EACvBQ,EAAauB,EAAM,CAAC,EAC1B1B,EAAY,IAAIG,CAAU,EAC1B,IAAIwB,EAAMF,EAAKtB,CAAU,EACzB,QAASyB,EAAI,EAAGA,EAAIF,EAAM,OAAQE,IAAK,CACnC,MAAMC,EAAaH,EAAME,CAAC,EACtBD,GAAO,OAAOA,GAAQ,UAAYE,KAAcF,IAChDA,EAAMA,EAAIE,CAAU,EAExD,CAC4BJ,EAAK9B,CAAK,EAAIgC,CAC1C,CAEwB,UAAWxB,KAAcH,EACjB,OAAOyB,EAAKtB,CAAU,GAAM,UAC5B,OAAOsB,EAAKtB,CAAU,CAGtD,CACA,CACA,CACA,CACA,CACI,cAAe,CACX,KAAK,gBAAkB,CAAE,EACzB,KAAK,cAAc,EAAE,CAC7B,CACI,cAAe,CACX,KAAK,gBAAkB,CAAE,EACzB,KAAK,cAAc,EAAE,CAC7B,CACI,cAAcQ,EAAgB,CAC1B,KAAK,QAAU,CAAE,GAAG,KAAK,QAAS,GAAGA,CAAgB,EACrD,KAAK,cAAc,QAAU,KAAK,OAC1C,CACI,mBAAmBtB,EAAW,CAC1B,KAAK,cAAc,mBAAmBA,CAAS,CACvD,CAEI,mBAAoB,CAChB,OAAO,KAAK,eACpB,CAEI,sBAAuB,CACnB,OAAO,KAAK,kBACpB,CAEI,mBAAoB,CAChB,OAAO,KAAK,eACpB,CAMI,iBAAiByC,EAAU,CACvB,IAAIC,EAAM,GACV,OAAQD,EAAQ,CACZ,IAAK,IACDC,EAAM,KACN,MACJ,IAAK,KACDA,EAAM,KACN,MACJ,IAAK,IACDA,EAAM,KACN,MACJ,IAAK,KACDA,EAAM,KACN,MACJ,IAAK,KACL,IAAK,KACDA,EAAM,KACN,MACJ,IAAK,IACL,IAAK,KACL,QACIA,EAAM,KACN,KAChB,CACQ,OAAOA,CACf,CAII,wBAAyB,CACrB,KAAK,cAAc,cAAc,CAC7B,KAAM,CAClB,CAAS,CACT,CACI,iBAAiB1C,EAAWC,EAAO0C,EAAO,CACtC,KAAK,cAAc,iBAAiB3C,EAAWC,EAAO0C,CAAK,CACnE,CAII,uBAAuBC,EAAQC,EAAM,CAGjC,GAFoB,KAAK,aACM,oBACZ,OACf,MAAM,IAAI,MAAM,sFAAsF,EAI1G,GADA,KAAK,gBAAkB,KAAK,0BAA0BA,EAAK,aAAa,EACpE,CAACA,GAAQ,CAACA,EAAK,KACf,MAAM,IAAI,MAAM,+GAA+G,EAGnI,YAAK,cAAcA,EAAK,aAAa,EACrC,KAAK,uBAAwB,EACtB,KAAK,cAAc,WAAY,CAC9C,CAII,2BAA2BD,EAAQC,EAAM,SACrC,MAAMC,EAAW,IAAEC,GAAA3D,EAAA,KAAK,UAAL,YAAAA,EAAc,iBAAd,YAAA2D,EAA8B,YAC7CF,EAAK,WACJ,KAAK,WAAa,KAAK,WAAW,SAAWzB,IAClD,YAAK,iBAAiByB,EAAK,QAASC,CAAQ,EAErC,KAAK,cAAc,WAAY,CAC9C,CAII,qBAAqBF,EAAQC,EAAM,SAC/B,MAAMG,EAAcH,EAAK,gBACnBA,EAAK,SACL,IAAI,MAAM,CACR,WAAUzD,EAAAyD,EAAK,UAAL,YAAAzD,EAAc,KAAM,GAC9B,QAASyD,EAAK,QACd,QAASA,EAAK,OAC9B,CAAa,EAEL,YAAK,cAAcG,CAAW,GAE1BD,EAAA,KAAK,UAAL,MAAAA,EAAc,gBACd,KAAK,cAAc,cAAc,CAAE,KAAM,MAAS,CAAE,EAGjD,KAAK,cAAc,WAAY,CAC9C,CAKI,cAAcE,EAAeC,EAAgC,OACzD,IAAIC,EAAW,GACf,MAAMC,EAAgB,CAAE,EAClBrB,EAAe,KAAK,cAAc,QAAQ,SAAW,EAEvDmB,IACA,KAAK,gBAAkB,KAAK,0BAA0BD,CAAa,GAGvE,UAAWI,KAAYJ,EACnB,GAAIA,EAAc,eAAeI,CAAQ,EAAG,CACxC,MAAMC,EAAeL,EAAcI,CAAQ,EAE3C,IAAIE,EAOJ,GANIL,GAAkC,MAAM,QAAQ,KAAK,kBAAkB,EACvEK,EAAY,KAAK,mBAAmB,KAAM1B,GAAWA,EAAO,KAAOyB,EAAa,QAAQ,EAGxFC,EAAYD,EAAa,UAEzB,CAACC,EACD,MAAM,IAAI,MAAM,2KAA2K,EAE/L,IAAIvD,IAAYZ,EAAAmE,EAAU,SAAV,YAAAnE,EAAkB,aAAcmE,EAAU,kBAAoBA,EAAU,YAAcA,EAAU,OAASA,EAAU,MAAQ,GACvIvD,aAAqB,cACrBA,EAAYwD,EAAUxD,EAAU,SAAS,GAE7C,MAAMyD,EAAYF,EAAU,MAAQG,EAAU,OAC9C,IAAIxD,GAAeoD,GAAA,MAAAA,EAAc,YAAc,CAAC,GAAGA,EAAa,WAAW,EAAI,OAAS,CAAE,EACtFK,EAAmB,MAAM,QAAQzD,CAAW,GAAKA,EAAY,SAAW,EAAIA,EAAY,CAAC,EAAI,GAIjG,GAHI,OAAOyD,EAAqB,MAC5BA,EAAmB,IAEnB,CAAC3D,EACD,MAAM,IAAI,MAAM,mLAAmL,EAEvM,GAAI,KAAK,cAAc,QAAQ,wBAA0BsD,EAAa,oBAAqB,CACvFF,EAAc,KAAK,GAAGpD,CAAS,IAAIsD,EAAa,QAAQ,IAAI,KAAK,UAAUA,EAAa,WAAW,CAAC,GAAG,MAAM,EAC7G,QACpB,CACgBK,EAAqDA,GAAqB,KAAO,GAAK,GAAGA,CAAgB,GAIzG,MAAMC,GAF+BL,EAAU,8BAAgC,KAAK,aAAa,gCAEhD,GAC3CI,EAAiB,MAAM,wEAAwE,GAAK,CAAA,EACpG,CAACA,EAAkB,GAAI,GAAI,GAAI,GAAIA,EAAkB,EAAE,EACvDE,GAAkBD,GAAA,YAAAA,EAAU,KAAM,GAClCE,GAAgBF,GAAA,YAAAA,EAAU,KAAM,GACtC,IAAInB,EAAWa,EAAa,WAAYM,GAAA,YAAAA,EAAU,IAC9CG,GAAcH,GAAA,YAAAA,EAAU,MAAMA,GAAA,YAAAA,EAAU,KAAM,GAClD,MAAMI,EAAgBJ,GAAA,MAAAA,EAAU,IAAMnB,IAAa,MAAQA,IAAawB,EAAa,SAAW,IAAM,GAChGC,EAAmBZ,EAAa,oBAAsB,GAE5D,GAAItD,GAAa+D,IAAgB,IAAM7D,EAAY,QAAU,EAAG,CAC5D,KAAK,mBAAmBiE,EAAoBnE,CAAS,CAAC,EACtD,QACpB,CA+CgB,GA7CI6D,GAAmBC,GACnB5D,EAAc,CAAC2D,EAAiBC,CAAa,EAC7CrB,EAAWwB,EAAa,oBAEnB,MAAM,QAAQ/D,CAAW,GAC9BA,EAAY,SAAW,GACvB,OAAOA,EAAY,CAAC,GAAM,UAC1BA,EAAY,CAAC,EAAE,QAAQ,IAAI,GAAK,IAE5BuC,IAAawB,EAAa,gBAAkBxB,IAAawB,EAAa,iBACtExB,EAAW,KAAK,aAAa,4BAA8BwB,EAAa,gBAE5E/D,EAAcA,EAAY,CAAC,EAAE,MAAM,KAAM,CAAC,EACtCA,EAAY,CAAC,IAAM,IACnBuC,EAAWA,IAAawB,EAAa,eAAiB,KAAOxB,IAAawB,EAAa,eAAiB,IAAMxB,EAC9GvC,EAAcA,EAAY,MAAM,CAAC,EACjC6D,EAAc7D,EAAY,CAAC,GAEtBA,EAAY,CAAC,IAAM,KACxBuC,EAAWA,IAAawB,EAAa,eAAiB,KAAOxB,IAAawB,EAAa,eAAiB,IAAMxB,EAC9GvC,EAAcA,EAAY,MAAM,EAAG,CAAC,EACpC6D,EAAc7D,EAAY,CAAC,IAK/B,CAACuC,GAAYc,EAAU,SACvBd,EAAWc,EAAU,OAAO,UAG5B,CAACd,GAAY,MAAM,QAAQvC,CAAW,GAAKA,EAAY,SAAW,GAAKA,EAAY,CAAC,GAAKA,EAAY,CAAC,IACtGuC,EAAW,KAAK,aAAa,6BAG5BA,IAAawB,EAAa,gBAAkBxB,IAAawB,EAAa,iBACvE,MAAM,QAAQ/D,CAAW,GACzBA,EAAY,SAAW,GACvBuD,IAAcC,EAAU,OACxBjB,EAAWwB,EAAa,OAGvBxB,IACDA,EAAW2B,EAAuBX,CAAS,GAG3CS,EAEIlE,GACA,KAAK,iBAAiBmE,EAAoBnE,CAAS,EAAG2D,EAAkBzD,CAAW,MAGtF,CAED6D,EAAc,KAAK,qBAAqBN,EAAWM,EAAahC,CAAY,EACxE,MAAM,QAAQ7B,CAAW,GACzBA,EAAY,QAAQ,CAACmE,EAAO9D,IAAU,CAClCL,EAAYK,CAAK,EAAI,KAAK,qBAAqBkD,EAAWvD,EAAYK,CAAK,EAAGwB,CAAY,CACtH,CAAyB,EAELoB,EAAW,GAEP,KAAK,cAAc,QAAQ,WAAa9C,EAAS,aACjDL,EAAYS,EAAU0D,EAAoBnE,GAAa,EAAE,CAAC,GAE9D,IAAIsE,EAWJ,GAVI,OAAO,KAAK,cAAc,QAAQ,qBAAwB,aAC1DA,EAAsB,KAAK,cAAc,QAAQ,oBAAoB,CACjE,UAAWH,EAAoBnE,CAAS,EACxC,UAAAuD,EACA,SAAAd,EACA,qBAAsBa,EAAa,SACnC,aAAcpD,EACd,KAAM,KAAK,KACvC,CAAyB,GAEDoE,IAAwB,OACxBnB,EAAWmB,UAEN7B,IAAawB,EAAa,oBAAsB,MAAM,QAAQ/D,CAAW,GAAKA,EAAY,SAAW,EAAG,CAC7G,MAAMqE,EAAiB,CAAE,EACnB,CAACC,EAAIC,CAAE,EAAIvE,EAEjBqE,EAAe,KAAK,cAAcvE,CAAS,KAAKwE,CAAE,GAAG,EACrDD,EAAe,KAAK,YAAYvE,CAAS,KAAKyE,CAAE,GAAG,EACnDtB,EAAWoB,EAAe,KAAK,OAAO,CAC9D,UAC6BrE,GAAA,YAAAA,EAAa,QAAS,IAC1BuC,IAAa,MAAQA,IAAa,OAASA,IAAa,SAAWA,IAAa,UAAYA,IAAa,UAAW,CAErH,MAAM8B,EAAiB,CAAE,EACzB,GAAI9B,IAAa,KAAM,CAEnB,QAASiC,EAAI,EAAGC,EAAMzE,EAAY,OAAQwE,EAAIC,EAAKD,IAC/CH,EAAe,KAAK,GAAGvE,CAAS,OAAOE,EAAYwE,CAAC,CAAC,EAAE,EAE3DvB,EAAWoB,EAAe,KAAK,MAAM,CACjE,KAC6B,CAED,QAASK,EAAI,EAAGC,EAAM3E,EAAY,OAAQ0E,EAAIC,EAAKD,IAC/CL,EAAe,KAAK,GAAGvE,CAAS,OAAOE,EAAY0E,CAAC,CAAC,EAAE,EAE3DzB,EAAWoB,EAAe,KAAK,OAAO,CAClE,CAC8B,OAAOpB,GAAa,UAAYA,EAAS,CAAC,IAAM,KAAOA,EAAS,MAAM,EAAE,IAAM,MAChFA,EAAW,IAAIA,CAAQ,IAEnD,MAC6BV,IAAa,KAClBA,IAAa,MACbA,IAAa,MACbuB,IAAkB,KAClBvB,IAAawB,EAAa,YAC1BxB,IAAawB,EAAa,SAE1Bd,EACIV,IAAa,KAAOA,IAAa,MAAQA,IAAawB,EAAa,SAC7D,YAAYjE,CAAS,KAAK+D,CAAW,IACrC,cAAc/D,CAAS,KAAK+D,CAAW,IAE5CtB,IAAawB,EAAa,gBAAkBxB,IAAawB,EAAa,eAE3Ed,EAAW,KAAK,wBAAwBgB,EAAoBnE,CAAS,EAAGyC,EAAUvC,CAAW,GAEvFuC,IAAa,IAAMA,IAAawB,EAAa,UAAYxB,IAAawB,EAAa,eACxFR,IAAcC,EAAU,QAAUD,IAAcC,EAAU,MAAQD,IAAcC,EAAU,WAC3FP,EAAWpB,GAAgB,EAAI,YAAY/B,CAAS,KAAK+D,CAAW,IAAM,eAAeA,CAAW,KAAK/D,CAAS,IAC9GyC,IAAawB,EAAa,cAC1Bd,EAAW,OAAOA,CAAQ,KAK9BA,EAAW,GAAGnD,CAAS,IAAI,KAAK,iBAAiByC,CAAQ,CAAC,IAAIsB,CAAW,GAGzEZ,IAAa,KACbC,EAAc,KAAKD,EAAS,MAAM,EAClC,KAAK,iBAAiBgB,EAAoBnE,GAAa,EAAE,EAAG2D,EAAkBI,CAAW,EAEjH,CACA,CAGQ,KAAK,cAAc,cAAc,CAC7B,OAAQX,EAAc,OAAS,EAAIA,EAAc,KAAK,OAAO,EAAI,GACjE,KAAM,MAClB,CAAS,CACT,CAMI,iBAAiB0B,EAAShC,EAAU,OAChC,KAAK,mBAAqB,CACtB,WAAYgC,EACZ,SAAAhC,CACH,EAEG,KAAK,eACJ,KAAK,aAAa,kBAAoB,CAAC,KAAK,aAAa,eAAe,kBAAkB,IAAK1D,EAAA,KAAK,UAAL,MAAAA,EAAc,iBAC9G,KAAK,cAAc,cAAc,CAC7B,IAAK0D,EACL,MAAOgC,EAAU,GAAKhC,CACtC,CAAa,CAEb,CAKI,cAAcE,EAAa+B,EAAe,CACtC,IAAIC,EAAiB,CAAE,EACvB,MAAMC,EAAe,CAAE,EACvB,GAAI,CAACjC,GAAe+B,EAAe,CAE/BC,EAAiBD,EACjBC,EAAe,QAASE,GAAYA,EAAO,UAAYA,EAAO,UAAU,YAAW,CAAG,EAEtF,MAAMC,EAAiBH,EAAe,IAAKE,GAAW,CAClD,MAAM3B,EAAY,KAAK,mBAAmB,KAAM1B,GAAWA,EAAO,KAAOqD,EAAO,QAAQ,EAMxF,OALAD,EAAa,KAAK,CACd,MAAO1B,GAAaA,EAAU,kBAAoBA,EAAU,YAAcA,EAAU,OAAS,GAAK2B,EAAO,SAAW,GACpH,UAAWA,EAAO,SACtC,CAAiB,EAEG3B,EACO,CACH,SAAU2B,EAAO,SACjB,QAASA,EAAO,UAAU,YAAa,IAAKE,EAAc,GAC7D,EAEE,IACvB,CAAa,EAEG,MAAM,QAAQD,CAAc,GAAK,KAAK,OACtC,KAAK,MAAM,eAAeA,CAAc,CAExD,SACiBnC,GAAe,CAAC+B,IAEjB/B,GAAA,YAAAA,EAAa,UAAW,GAKxB,GAAIA,GACA,UAAWO,KAAaP,EACpB,GAAIO,EAAU,QAAS,CACnB,IAAIvD,GAAauD,EAAU,QAAQ,kBAAoBA,EAAU,QAAQ,YAAcA,EAAU,QAAQ,OAAS,GAC9G8B,GAAmB9B,EAAU,QAAQ,OAASA,EAAU,QAAQ,IAAM,GACtE+B,GAAc/B,EAAU,QAAQ,kBAAoBA,EAAU,QAAQ,YAAcA,EAAU,QAAQ,OAAS,IAAM,GACrH,KAAK,cAAc,QAAQ,WAAalD,EAAS,aACjDL,EAAYS,EAAUT,CAAS,EAC/BqF,EAAkB5E,EAAU4E,CAAe,EAC3CC,EAAa7E,EAAU6E,CAAU,GAErCN,EAAe,KAAK,CAChB,SAAUzB,EAAU,QAAQ,GAC5B,UAAWA,EAAU,QAAU6B,EAAc,IAAMA,EAAc,IACjG,CAA6B,EACGE,IAAe,IACfL,EAAa,KAAK,CACd,MAAOK,EACP,UAAW/B,EAAU,QAAU6B,EAAc,IAAMA,EAAc,IACrG,CAAiC,CAEjC,GAMQJ,EAAiBA,GAAkB,CAAE,EACrC,MAAMO,EAAYN,EACb,IAAKC,GAAW,CACjB,IAAIM,EAAM,GACV,OAAIN,GAAUA,EAAO,QAEjBM,EAAM,GADY,KAAK,cAAc,QAAQ,WAAanF,EAAS,WAAaI,EAAUyE,EAAO,KAAK,EAAIA,EAAO,KAC/F,IAAKA,GAAUA,EAAO,WAAaA,EAAO,UAAU,YAAa,GAAK,EAAE,IAEvFM,CACV,CAAA,EACI,KAAK,GAAG,EACb,YAAK,cAAc,cAAc,CAC7B,QAASD,CACrB,CAAS,EAED,KAAK,gBAAkBP,EAEhB,KAAK,cAAc,WAAY,CAC9C,CAQI,0BAA0B/B,EAAe,CAErC,MAAMwC,EAAe,OAAOxC,GAAkB,SAAW,OAAO,KAAKA,CAAa,EAAE,IAAKyC,GAAQzC,EAAcyC,CAAG,CAAC,EAAIzC,EACvH,OAAK,MAAM,QAAQwC,CAAY,EAGxBA,EAAa,IAAKE,GAAW,CAChC,MAAMC,EAAY,CAAE,SAAUD,EAAO,UAAY,EAAI,EACrD,OAAIA,EAAO,WACPC,EAAU,SAAWD,EAAO,UAE5BA,EAAO,iBACPC,EAAU,eAAiBD,EAAO,gBAElC,MAAM,QAAQA,EAAO,WAAW,IAChCC,EAAU,YAAcD,EAAO,aAE5BC,CACnB,CAAS,EAdU,CAAE,CAerB,CAII,wBAAwB5F,EAAWyC,EAAUvC,EAAa,CACtD,IAAIT,EAAQ,GACZ,OAAI,MAAM,QAAQS,CAAW,GAAKA,EAAY,SAAW,IACjDuC,IAAawB,EAAa,gBAE1BxE,EAAQ,IAAIO,CAAS,OAAOE,EAAY,CAAC,CAAC,GACtCA,EAAY,CAAC,IAAM,KACnBT,GAAS,QAAQO,CAAS,OAAOE,EAAY,CAAC,CAAC,IAEnDT,GAAS,KAEJgD,IAAawB,EAAa,iBAE/BxE,EAAQ,IAAIO,CAAS,OAAOE,EAAY,CAAC,CAAC,GACtCA,EAAY,CAAC,IAAM,KACnBT,GAAS,QAAQO,CAAS,OAAOE,EAAY,CAAC,CAAC,IAEnDT,GAAS,MAGVA,CACf,CAII,qBAAqBgE,EAAWM,EAAa8B,EAAS,CAClD,OAAQpC,EAAS,CACb,KAAKC,EAAU,KACXK,EAAc+B,EAAa/B,CAAW,EACtCA,EAAc8B,GAAW,EAAI9B,EAAc,YAAYA,CAAW,IAClE,MACJ,KAAKL,EAAU,OACf,KAAKA,EAAU,KACf,KAAKA,EAAU,SACP,OAAOK,GAAgB,WAEvBA,EAAcA,EAAY,QAAQ,KAAM,IAAI,EAE5CA,EAAc,mBAAmBA,CAAW,EAE5CA,EAAc,IAAIA,CAAW,KAEjC,MACJ,KAAKL,EAAU,QACf,KAAKA,EAAU,OACf,KAAKA,EAAU,MACP,OAAOK,GAAgB,WAGvBA,EAAcA,EAAY,QAAQ,QAAS,GAAG,EAE9CA,EAAcA,EAAY,QAAQ,QAAS,EAAE,EAE7CA,EAAcA,EAAY,QAAQ,QAAS,IAAI,EAE/CA,EAAcA,EAAY,QAAQ,UAAW,KAAK,EAElDA,EAAcA,EAAY,QAAQ,gBAAiB,EAAE,GAEjDA,IAAgB,IAAMA,IAAgB,OACtCA,EAAc,MAGtB,KAChB,CACQ,OAAOA,CACf,CACA","x_google_ignoreList":[0,1]}