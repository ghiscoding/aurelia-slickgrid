{"version":3,"file":"example13-BCtLsCY2.js","sources":["../../src/examples/slickgrid/example13.$au.ts","../../src/examples/slickgrid/example13.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example13\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example13.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"add-500-rows-btn\\\" click.trigger=\\\"loadData(500)\\\">\\n      500 rows\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"add-50k-rows-btn\\\" click.trigger=\\\"loadData(50000)\\\">\\n      50k rows\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"clear-grouping-btn\\\" click.trigger=\\\"clearGrouping()\\\">\\n      <i class=\\\"mdi mdi-close\\\"></i> Clear grouping\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"collapse-all-btn\\\"\\n            click.trigger=\\\"collapseAllGroups()\\\">\\n      <i class=\\\"mdi mdi-arrow-collapse\\\"></i> Collapse all groups\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"expand-all-btn\\\" click.trigger=\\\"expandAllGroups()\\\">\\n      <i class=\\\"mdi mdi-arrow-expand\\\"></i> Expand all groups\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"export-excel-btn\\\" click.trigger=\\\"exportToExcel()\\\">\\n      <i class=\\\"mdi mdi-file-excel-outline text-success\\\"></i> Export to Excel\\n    </button>\\n  </div>\\n</div>\\n\\n<hr />\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-sort-value-btn\\\"\\n            click.trigger=\\\"groupByDuration()\\\">\\n      Group by Duration &amp; sort groups by value\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-sort-count-btn\\\"\\n            click.trigger=\\\"groupByDurationOrderByCount(false)\\\">\\n      Group by Duration &amp; sort groups by count\\n    </button>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-sort-count-collapse-btn\\\"\\n              click.trigger=\\\"groupByDurationOrderByCount(true)\\\">\\n        Group by Duration &amp; sort groups by count, aggregate collapsed\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-effort-btn\\\"\\n              click.trigger=\\\"groupByDurationEffortDriven()\\\">\\n        Group by Duration then Effort-Driven\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-effort-percent-btn\\\"\\n              click.trigger=\\\"groupByDurationEffortDrivenPercent()\\\">\\n        Group by Duration then Effort-Driven then Percent.\\n      </button>\\n      <span hidden.bind=\\\"!processing\\\">\\n        <i class=\\\"mdi mdi-sync mdi-spin\\\"></i>\\n      </span>\\n    </div>\\n  </div>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid13\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-before-export-to-excel.trigger=\\\"processing = true\\\"\\n                    on-after-export-to-excel.trigger=\\\"processing = false\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport { TextExportService } from '@slickgrid-universal/text-export';\nimport {\n  Aggregators,\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  FileType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type Grouping,\n  GroupTotalFormatters,\n  SortDirectionNumber,\n  SortComparers,\n  type SlickDataView,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\n\nexport class Example13 {\n  title = 'Example 13: Grouping & Aggregators';\n  subTitle = `\n    <ul>\n      <li><a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grouping-aggregators\" target=\"_blank\">Wiki docs</a></li>\n      <li>Fully dynamic and interactive multi-level grouping with filtering and aggregates over 50'000 items</li>\n      <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\n      <li>Use \"Aggregators\" and \"GroupTotalFormatters\" directly from Aurelia-Slickgrid</li>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  dataviewObj!: SlickDataView;\n  gridObj!: SlickGrid;\n  hideSubTitle = false;\n  processing = false;\n  excelExportService = new ExcelExportService();\n  textExportService = new TextExportService();\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.loadData(500);\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n    this.dataviewObj = aureliaGrid.dataView;\n    this.gridObj = aureliaGrid.slickGrid;\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    // add a simple button with event listener on 1st column for testing purposes\n    // a simple button with click event\n    const nameElementColumn1 = document.createElement('div');\n    const btn = document.createElement('button');\n    const btnLabel = document.createElement('span');\n    btnLabel.className = 'mdi mdi-help-circle no-padding';\n    btn.dataset.test = 'col1-hello-btn';\n    btn.className = 'btn btn-outline-secondary btn-xs btn-icon ms-1';\n    btn.textContent = 'Click me';\n    btn.title = 'simple column header test with a button click listener';\n    btn.addEventListener('click', () => alert('Hello World'));\n    btn.appendChild(btnLabel);\n    nameElementColumn1.appendChild(document.createTextNode('Id '));\n    nameElementColumn1.appendChild(btn);\n\n    this.columnDefinitions = [\n      {\n        id: 'sel', name: nameElementColumn1, field: 'num', type: FieldType.number,\n        columnPickerLabel: 'Custom Label', // add a custom label for the ColumnPicker/GridMenu when default header value extractor doesn't work for you ()\n        width: 140, maxWidth: 150,\n        excludeFromExport: true,\n        resizable: true,\n        filterable: true,\n        selectable: false,\n        focusable: false\n      },\n      {\n        id: 'title', name: 'Title', field: 'title',\n        width: 50,\n        minWidth: 50,\n        cssClass: 'cell-title',\n        filterable: true,\n        sortable: true\n      },\n      {\n        id: 'duration', name: 'Duration', field: 'duration',\n        minWidth: 50, width: 60,\n        filterable: true,\n        filter: { model: Filters.slider, operator: '>=' },\n        sortable: true,\n        type: FieldType.number,\n        groupTotalsFormatter: GroupTotalFormatters.sumTotals,\n        params: { groupFormatterPrefix: 'Total: ' }\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete',\n        minWidth: 70, width: 90,\n        formatter: Formatters.percentCompleteBar,\n        filterable: true,\n        filter: { model: Filters.compoundSlider },\n        sortable: true,\n        type: FieldType.number,\n        groupTotalsFormatter: GroupTotalFormatters.avgTotalsPercentage,\n        params: { groupFormatterPrefix: '<i>Avg</i>: ' }\n      },\n      {\n        id: 'start', name: 'Start', field: 'start',\n        minWidth: 60,\n        maxWidth: 130,\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        sortable: true,\n        type: FieldType.dateIso,\n        formatter: Formatters.dateIso,\n        exportWithFormatter: true\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        minWidth: 60,\n        maxWidth: 130,\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        sortable: true,\n        type: FieldType.dateIso,\n        formatter: Formatters.dateIso,\n        exportWithFormatter: true\n      },\n      {\n        id: 'cost', name: 'Cost', field: 'cost',\n        minWidth: 70, width: 80,\n        sortable: true, filterable: true,\n        filter: { model: Filters.compoundInputNumber },\n        type: FieldType.number,\n        formatter: Formatters.currency,\n        groupTotalsFormatter: GroupTotalFormatters.sumTotalsCurrency,\n        params: { displayNegativeNumberWithParentheses: true, currencyPrefix: '€', groupFormatterCurrencyPrefix: '€', minDecimal: 2, maxDecimal: 4, groupFormatterPrefix: '<b>Total</b>: ' },\n        excelExportOptions: {\n          style: {\n            font: { outline: true, italic: true },\n            format: '€0.00##;[Red](€0.00##)',\n          },\n          width: 18\n        },\n        groupTotalsExcelExportOptions: {\n          style: {\n            alignment: { horizontal: 'center' },\n            font: { bold: true, color: 'FF005289', underline: 'single', fontName: 'Consolas', size: 10 },\n            fill: { type: 'pattern', patternType: 'solid', fgColor: 'FFE6F2F6' },\n            border: {\n              top: { color: 'FFa500ff', style: 'thick', },\n              left: { color: 'FFa500ff', style: 'medium', },\n              right: { color: 'FFa500ff', style: 'dotted', },\n              bottom: { color: 'FFa500ff', style: 'double', },\n            },\n            format: '\"Total: \"€0.00##;[Red]\"Total: \"(€0.00##)'\n          },\n        },\n      },\n      {\n        id: 'effortDriven', name: 'Effort Driven',\n        minWidth: 30, width: 80, maxWidth: 90,\n        cssClass: 'cell-effort-driven',\n        field: 'effortDriven',\n        formatter: Formatters.checkmarkMaterial,\n        sortable: true,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableFiltering: true,\n      // you could debounce/throttle the input text filter if you have lots of data\n      // filterTypingDebounce: 250,\n      enableGrouping: true,\n      enableExcelExport: true,\n      enableTextExport: true,\n      excelExportOptions: { sanitizeDataExport: true },\n      textExportOptions: { sanitizeDataExport: true },\n      externalResources: [this.excelExportService, this.textExportService],\n      showCustomFooter: true,\n      customFooterOptions: {\n        // optionally display some text on the left footer container\n        hideMetrics: false,\n        hideTotalItemCount: false,\n        hideLastUpdateTimestamp: false\n      },\n    };\n  }\n\n  loadData(rowCount: number) {\n    // mock a dataset\n    const tmpData: any[] = [];\n    for (let i = 0; i < rowCount; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n      const randomCost = (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100;\n\n      tmpData[i] = {\n        id: 'id_' + i,\n        num: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        cost: i % 3 ? randomCost : randomCost !== null ? -randomCost : null,\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = tmpData;\n  }\n\n  clearGrouping() {\n    this.dataviewObj.setGrouping([]);\n  }\n\n  collapseAllGroups() {\n    this.dataviewObj.collapseAllGroups();\n  }\n\n  expandAllGroups() {\n    this.dataviewObj.expandAllGroups();\n  }\n\n  exportToExcel() {\n    this.excelExportService.exportToExcel({\n      filename: 'Export',\n      format: FileType.xlsx\n    });\n  }\n\n  groupByDuration() {\n    // you need to manually add the sort icon(s) in UI\n    this.aureliaGrid.filterService.setSortColumnIcons([{ columnId: 'duration', sortAsc: true }]);\n    this.dataviewObj.setGrouping({\n      getter: 'duration',\n      formatter: (g) => `Duration: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`,\n      comparer: (a, b) => {\n        return SortComparers.numeric(a.value, b.value, SortDirectionNumber.asc);\n      },\n      aggregators: [\n        new Aggregators.Avg('percentComplete'),\n        new Aggregators.Sum('cost')\n      ],\n      aggregateCollapsed: false,\n      lazyTotalsCalculation: true\n    } as Grouping);\n    this.gridObj.invalidate(); // invalidate all rows and re-render\n  }\n\n  groupByDurationOrderByCount(aggregateCollapsed: boolean) {\n    this.aureliaGrid.filterService.setSortColumnIcons([]);\n    this.dataviewObj.setGrouping({\n      getter: 'duration',\n      formatter: (g) => `Duration: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`,\n      comparer: (a, b) => {\n        return a.count - b.count;\n      },\n      aggregators: [\n        new Aggregators.Avg('percentComplete'),\n        new Aggregators.Sum('cost')\n      ],\n      aggregateCollapsed,\n      lazyTotalsCalculation: true\n    } as Grouping);\n    this.gridObj.invalidate(); // invalidate all rows and re-render\n  }\n\n  groupByDurationEffortDriven() {\n    // you need to manually add the sort icon(s) in UI\n    const sortColumns = [{ columnId: 'duration', sortAsc: true }, { columnId: 'effortDriven', sortAsc: true }];\n    this.aureliaGrid.filterService.setSortColumnIcons(sortColumns);\n    this.dataviewObj.setGrouping([\n      {\n        getter: 'duration',\n        formatter: (g) => `Duration: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\n        aggregators: [\n          new Aggregators.Sum('duration'),\n          new Aggregators.Sum('cost')\n        ],\n        aggregateCollapsed: true,\n        lazyTotalsCalculation: true\n      },\n      {\n        getter: 'effortDriven',\n        formatter: (g) => `Effort-Driven: ${(g.value ? 'True' : 'False')} <span style=\"color:green\">(${g.count} items)</span>`,\n        aggregators: [\n          new Aggregators.Avg('percentComplete'),\n          new Aggregators.Sum('cost')\n        ],\n        collapsed: true,\n        lazyTotalsCalculation: true\n      }\n    ] as Grouping[]);\n    this.gridObj.invalidate(); // invalidate all rows and re-render\n  }\n\n  groupByDurationEffortDrivenPercent() {\n    // you need to manually add the sort icon(s) in UI\n    const sortColumns = [\n      { columnId: 'duration', sortAsc: true },\n      { columnId: 'effortDriven', sortAsc: true },\n      { columnId: 'percentComplete', sortAsc: true }\n    ];\n    this.aureliaGrid.filterService.setSortColumnIcons(sortColumns);\n    this.dataviewObj.setGrouping([\n      {\n        getter: 'duration',\n        formatter: (g) => `Duration: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\n        aggregators: [\n          new Aggregators.Sum('duration'),\n          new Aggregators.Sum('cost')\n        ],\n        aggregateCollapsed: true,\n        lazyTotalsCalculation: true\n      },\n      {\n        getter: 'effortDriven',\n        formatter: (g) => `Effort-Driven: ${(g.value ? 'True' : 'False')}  <span style=\"color:green\">(${g.count} items)</span>`,\n        aggregators: [\n          new Aggregators.Sum('duration'),\n          new Aggregators.Sum('cost')\n        ],\n        lazyTotalsCalculation: true\n      },\n      {\n        getter: 'percentComplete',\n        formatter: (g) => `% Complete: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`,\n        aggregators: [\n          new Aggregators.Avg('percentComplete')\n        ],\n        aggregateCollapsed: true,\n        collapsed: true,\n        lazyTotalsCalculation: true\n      }\n    ] as Grouping[]);\n    this.gridObj.invalidate(); // invalidate all rows and re-render\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example13_decorators","_init","customElement","__au2ViewDef","Example13","__publicField","ExcelExportService","TextExportService","aureliaGrid","nameElementColumn1","btn","btnLabel","FieldType","Filters","GroupTotalFormatters","Formatters","rowCount","tmpData","i","randomYear","randomMonth","randomDay","randomPercent","randomCost","FileType","g","a","b","SortComparers","SortDirectionNumber","Aggregators","aggregateCollapsed","sortColumns","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}