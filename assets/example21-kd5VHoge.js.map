{"version":3,"file":"example21-kd5VHoge.js","sources":["../../src/examples/slickgrid/example21.$au.ts","../../src/examples/slickgrid/example21.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example21.scss\";\nexport const name = \"example21\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example21.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row row-cols-lg-auto g-1 align-items-center\\\">\\n  <div class=\\\"col\\\">\\n    <label for=\\\"columnSelect\\\">Single Search:</label>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <select class=\\\"form-select\\\" data-test=\\\"search-column-list\\\" name=\\\"selectedColumn\\\"\\n            value.bind=\\\"selectedColumn\\\" id=\\\"columnSelect\\\">\\n      <option repeat.for=\\\"column of columnDefinitions\\\"\\n              model.bind=\\\"column\\\">\\n        ${column.name}\\n      </option>\\n    </select>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <select value.bind=\\\"selectedOperator\\\"\\n            class=\\\"form-select\\\"\\n            data-test=\\\"search-operator-list\\\">\\n      <option repeat.for=\\\"operator of operatorList\\\"\\n              model.bind=\\\"operator\\\">\\n        ${operator}\\n      </option>\\n    </select>\\n  </div>\\n\\n  <div class=\\\"col\\\">\\n    <div class=\\\"input-group\\\">\\n      <input type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              placeholder=\\\"search value\\\"\\n              data-test=\\\"search-value-input\\\"\\n              value.bind=\\\"searchValue\\\" />\\n      <button class=\\\"btn btn-outline-secondary d-flex align-items-center pl-2 pr-2\\\" data-test=\\\"clear-search-value\\\"\\n              click.trigger=\\\"clearGridSearchInput()\\\">\\n        <span class=\\\"mdi mdi-close\\\"></span>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\\n<hr />\\n\\n<aurelia-slickgrid grid-id=\\\"grid21\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    instances.bind=\\\"aureliaGrid\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { bindable } from 'aurelia';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  Formatters,\n  type GridOption,\n  type OperatorString,\n} from 'aurelia-slickgrid';\nimport './example21.scss';\n\nexport class Example21 {\n  @bindable() selectedColumn!: Column;\n  @bindable() selectedOperator!: string;\n  @bindable() searchValue = '';\n  title = 'Example 21: Grid AutoHeight';\n  subTitle = `\n  The SlickGrid option \"autoHeight\" can be used if you wish to keep the full height of the grid without any scrolling\n  <ul>\n    <li>You define a fixed grid width via \"gridWidth\" in the View</li>\n    <li>You can still use the \"autoResize\" for the width to be resized automatically (the height will never change in this case)</li>\n    <li>This dataset has 25 rows, if you scroll down the page you can see the entire set is shown without any grid scrolling (though you might have browser scrolling)</li>\n  </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n  operatorList: OperatorString[] = ['=', '<', '<=', '>', '>=', '<>', 'StartsWith', 'EndsWith'];\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData();\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: 'Title', field: 'title',\n        width: 100, sortable: true,\n        type: FieldType.string\n      },\n      {\n        id: 'duration', name: 'Duration (days)', field: 'duration',\n        width: 100, sortable: true,\n        type: FieldType.number\n      },\n      {\n        id: 'complete', name: '% Complete', field: 'percentComplete',\n        width: 100, sortable: true,\n        formatter: Formatters.percentCompleteBar,\n        type: FieldType.number\n      },\n      {\n        id: 'start', name: 'Start', field: 'start',\n        width: 100, sortable: true,\n        formatter: Formatters.dateIso,\n\n        type: FieldType.date\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        width: 100, sortable: true,\n        formatter: Formatters.dateIso,\n        type: FieldType.date\n      },\n      {\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\n        width: 100, sortable: true,\n        formatter: Formatters.checkmarkMaterial,\n        type: FieldType.number\n      }\n    ];\n\n    this.gridOptions = {\n      // if you want to disable autoResize and use a fixed width which requires horizontal scrolling\n      // it's advised to disable the autoFitColumnsOnFirstLoad as well\n      // enableAutoResize: false,\n      // autoFitColumnsOnFirstLoad: false,\n\n      autoHeight: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n\n      // enable the filtering but hide the user filter row since we use our own single filter\n      enableFiltering: true,\n      showHeaderRow: false, // hide the filter row (header row)\n\n      alwaysShowVerticalScroll: false,\n      enableColumnPicker: true,\n      enableCellNavigation: true,\n      enableRowSelection: true\n    };\n  }\n\n  getData() {\n    // mock a dataset\n    const mockedDataset: any[] = [];\n    for (let i = 0; i < 25; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      mockedDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = mockedDataset;\n  }\n\n  //\n  // -- if any of the Search form input changes, we'll call the updateFilter() method\n  //\n\n  clearGridSearchInput() {\n    this.searchValue = '';\n    this.updateFilter();\n  }\n\n  selectedOperatorChanged() {\n    this.updateFilter();\n  }\n\n  selectedColumnChanged() {\n    this.updateFilter();\n  }\n\n  searchValueChanged() {\n    this.updateFilter();\n  }\n\n  updateFilter() {\n    this.aureliaGrid?.filterService.updateSingleFilter({\n      columnId: `${this.selectedColumn.id || ''}`,\n      operator: this.selectedOperator as OperatorString,\n      searchTerms: [this.searchValue || '']\n    });\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_searchValue_dec","_selectedOperator_dec","_selectedColumn_dec","_Example21_decorators","_init","customElement","__au2ViewDef","bindable","Example21","__publicField","__runInitializers","FieldType","Formatters","mockedDataset","randomYear","randomMonth","randomDay","randomPercent","_a","action","__decoratorStart","__decorateElement"],"mappings":"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"}