{"version":3,"file":"example20-B5bP4-2G.js","sources":["../../src/examples/slickgrid/example20.$au.ts","../../src/examples/slickgrid/example20.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example20.scss\";\nexport const name = \"example20\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example20.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<br>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <span>\\n      <label for=\\\"\\\">Pinned Rows: </label>\\n      <input type=\\\"number\\\"\\n              value.bind=\\\"frozenRowCount\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\"\\n              click.trigger=\\\"changeFrozenRowCount()\\\">\\n        Set\\n      </button>\\n    </span>\\n    <span style=\\\"margin-left: 10px\\\">\\n      <label for=\\\"\\\">Pinned Columns: </label>\\n      <input type=\\\"number\\\"\\n              value.bind=\\\"frozenColumnCount\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\"\\n              click.trigger=\\\"changeFrozenColumnCount()\\\">\\n        Set\\n      </button>\\n    </span>\\n  </div>\\n</div>\\n\\n<div class=\\\"row mt-2\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"setFrozenColumns(-1)\\\"\\n            data-test=\\\"remove-frozen-column-button\\\">\\n      <i class=\\\"mdi mdi-close\\\"></i> Remove Frozen Columns\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"setFrozenColumns(2)\\\"\\n            data-test=\\\"set-3frozen-columns\\\">\\n      <i class=\\\"mdi mdi-pin-outline\\\"></i> Set 3 Frozen Columns\\n    </button>\\n    <span style=\\\"margin-left: 15px\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleFrozenBottomRows()\\\">\\n        <i class=\\\"mdi mdi-flip-vertical\\\"></i> Toggle Pinned Rows\\n      </button>\\n      <span style=\\\"font-weight: bold;\\\">: ${ isFrozenBottom ? 'Bottom' : 'Top' }</span>\\n    </span>\\n  </div>\\n</div>\\n\\n<div class=\\\"col-sm-12\\\">\\n  <hr>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid20\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-validation-error.trigger=\\\"onCellValidationError($event.detail.eventData, $event.detail.args)\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","\nimport {\n  type AureliaGridInstance,\n  type Column,\n  type ColumnEditorDualInput,\n  Editors,\n  FieldType,\n  Filters,\n  formatNumber,\n  Formatters,\n  type GridOption,\n  SlickEventHandler,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\nimport './example20.scss'; // provide custom CSS/SASS styling\n\nexport class Example20 {\n  title = 'Example 20: Pinned (frozen) Columns/Rows';\n  subTitle = `\n    This example demonstrates the use of Pinned (aka frozen) Columns and/or Rows (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/frozen-columns-rows\" target=\"_blank\">Wiki docs</a>)\n    <ul>\n      <li>Option to pin any number of columns (left only) or rows</li>\n      <li>Option to pin the rows at the bottom instead of the top (default)</li>\n      <li>You can also dynamically any of these options, through SlickGrid \"setOptions()\"</li>\n      <li>Possibility to change the styling of the line border between pinned columns/rows</li>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridObj!: SlickGrid;\n  gridOptions!: GridOption;\n  frozenColumnCount = 2;\n  frozenRowCount = 3;\n  hideSubTitle = false;\n  isFrozenBottom = false;\n  dataset: any[] = [];\n  slickEventHandler: any;\n\n  constructor() {\n    this.defineGrid();\n    this.slickEventHandler = new SlickEventHandler();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n    this.gridObj = aureliaGrid && aureliaGrid.slickGrid;\n\n    // with frozen (pinned) grid, in order to see the entire row being highlighted when hovering\n    // we need to do some extra tricks (that is because frozen grids use 2 separate div containers)\n    // the trick is to use row selection to highlight when hovering current row and remove selection once we're not\n    this.slickEventHandler.subscribe(this.gridObj.onMouseEnter, (event: Event) => this.colorizeHoveringRow(event, true));\n    this.slickEventHandler.subscribe(this.gridObj.onMouseLeave, (event: Event) => this.colorizeHoveringRow(event, false));\n  }\n\n  colorizeHoveringRow(event: Event, isMouseEnter: boolean) {\n    const cell = this.gridObj.getCellFromEvent(event);\n    const rows = isMouseEnter ? [cell?.row ?? 0] : [];\n    this.gridObj.setSelectedRows(rows); // highlight current row\n    event.preventDefault();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData();\n  }\n\n  detaching() {\n    // unsubscribe every SlickGrid subscribed event (or use the Slick.EventHandler)\n    this.slickEventHandler.unsubscribeAll();\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'sel', name: '#', field: 'id',\n        minWidth: 40, width: 40, maxWidth: 40,\n        cannotTriggerInsert: true,\n        resizable: false,\n        unselectable: true,\n      },\n      {\n        id: 'title', name: 'Title', field: 'title',\n        minWidth: 100, width: 120,\n        filterable: true,\n        sortable: true\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete',\n        resizable: false,\n        minWidth: 130, width: 140,\n        formatter: Formatters.percentCompleteBar,\n        type: FieldType.number,\n        filterable: true,\n        filter: { model: Filters.slider, operator: '>=' },\n        sortable: true\n      },\n      {\n        id: 'start', name: 'Start', field: 'start',\n        minWidth: 100, width: 120,\n        filterable: true, sortable: true,\n        formatter: Formatters.dateIso\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        minWidth: 100, width: 120,\n        filterable: true, sortable: true,\n        formatter: Formatters.dateIso\n      },\n      {\n        id: 'cost', name: 'Cost | Duration', field: 'cost',\n        formatter: this.costDurationFormatter.bind(this),\n        minWidth: 150, width: 170,\n        sortable: true,\n        // filterable: true,\n        filter: {\n          model: Filters.compoundSlider,\n        },\n        editor: {\n          model: Editors.dualInput,\n          // the DualInputEditor is of Type ColumnEditorDualInput and MUST include (leftInput/rightInput) in its params object\n          // in each of these 2 properties, you can pass any regular properties of a column editor\n          // and they will be executed following the options defined in each\n          params: {\n            leftInput: {\n              field: 'cost',\n              type: 'float',\n              decimal: 2,\n              minValue: 0,\n              maxValue: 50000,\n              placeholder: '< 50K',\n              errorMessage: 'Cost must be positive and below $50K.',\n            },\n            rightInput: {\n              field: 'duration',\n              type: 'float', // you could have 2 different input type as well\n              minValue: 0,\n              maxValue: 100,\n              title: 'make sure Duration is withing its range of 0 to 100',\n              errorMessage: 'Duration must be between 0 and 100.',\n\n              // Validator Option #1\n              // You could also optionally define a custom validator in 1 or both inputs\n              /*\n              validator: (value, args) => {\n                let isValid = true;\n                let errorMsg = '';\n                if (value < 0 || value > 120) {\n                  isValid = false;\n                  errorMsg = 'Duration MUST be between 0 and 120.';\n                }\n                return { valid: isValid, msg: errorMsg };\n              }\n              */\n            },\n          } as ColumnEditorDualInput,\n\n          // Validator Option #2 (shared Validator) - this is the last alternative, option #1 (independent Validators) is still the recommended way\n          // You can also optionally use a common Validator (if you do then you cannot use the leftInput/rightInput validators at same time)\n          // to compare both values at the same time.\n          /*\n          validator: (values, args) => {\n            let isValid = true;\n            let errorMsg = '';\n            if (values.cost < 0 || values.cost > 50000) {\n              isValid = false;\n              errorMsg = 'Cost MUST be between 0 and 50k.';\n            }\n            if (values.duration < 0 || values.duration > 120) {\n              isValid = false;\n              errorMsg = 'Duration MUST be between 0 and 120.';\n            }\n            if (values.cost < values.duration) {\n              isValid = false;\n              errorMsg = 'Cost can never be lower than its Duration.';\n            }\n            return { valid: isValid, msg: errorMsg };\n          }\n          */\n        }\n      },\n      {\n        id: 'effortDriven', name: 'Effort Driven', field: 'effortDriven',\n        minWidth: 100, width: 120,\n        formatter: Formatters.checkmarkMaterial,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        },\n        sortable: true\n      },\n      {\n        id: 'title1', name: 'Title 1', field: 'title1',\n        minWidth: 100, width: 120,\n        filterable: true,\n        sortable: true\n      },\n      {\n        id: 'title2', name: 'Title 2', field: 'title2',\n        minWidth: 100, width: 120,\n        filterable: true,\n        sortable: true\n      },\n      {\n        id: 'title3', name: 'Title 3', field: 'title3',\n        minWidth: 100, width: 120,\n        filterable: true,\n        sortable: true\n      },\n      {\n        id: 'title4', name: 'Title 4', field: 'title4',\n        minWidth: 100, width: 120,\n        filterable: true,\n        sortable: true\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      gridWidth: 920,\n      enableCellNavigation: true,\n      editable: true,\n      autoEdit: true,\n      enableExcelCopyBuffer: true,\n      frozenColumn: this.frozenColumnCount,\n      frozenRow: this.frozenRowCount,\n      // frozenBottom: true, // if you want to freeze the bottom instead of the top, you can enable this property\n\n      // show both Frozen Columns in HeaderMenu & GridMenu, these are opt-in commands so they're disabled by default\n      gridMenu: { hideClearFrozenColumnsCommand: false },\n      headerMenu: { hideFreezeColumnsCommand: false }\n    };\n  }\n\n  getData() {\n    // Set up some test columns.\n    const mockDataset: any[] = [];\n    for (let i = 0; i < 500; i++) {\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        cost: (i % 33 === 0) ? null : Math.random() * 10000,\n        duration: i % 8 ? (Math.round(Math.random() * 100) + '') : null,\n        percentComplete: Math.round(Math.random() * 100),\n        start: new Date(2009, 0, 1),\n        finish: new Date(2009, 4, 5),\n        effortDriven: (i % 5 === 0),\n        title1: `Some Text ${Math.round(Math.random() * 25)}`,\n        title2: `Some Text ${Math.round(Math.random() * 25)}`,\n        title3: `Some Text ${Math.round(Math.random() * 25)}`,\n        title4: `Some Text ${Math.round(Math.random() * 25)}`,\n      };\n    }\n    this.dataset = mockDataset;\n  }\n\n  /** change dynamically, through slickgrid \"setOptions()\" the number of pinned columns */\n  changeFrozenColumnCount() {\n    if (this.gridObj && this.gridObj.setOptions) {\n      this.gridObj.setOptions({\n        frozenColumn: this.frozenColumnCount\n      });\n    }\n  }\n\n  /** change dynamically, through slickgrid \"setOptions()\" the number of pinned rows */\n  changeFrozenRowCount() {\n    if (this.gridObj && this.gridObj.setOptions) {\n      this.gridObj.setOptions({\n        frozenRow: this.frozenRowCount\n      });\n    }\n  }\n\n  costDurationFormatter(_row: number, _cell: number, _value: any, _columnDef: Column, dataContext: any) {\n    const costText = this.isNullUndefinedOrEmpty(dataContext.cost) ? 'n/a' : formatNumber(dataContext.cost, 0, 2, false, '$', '', '.', ',');\n    let durationText = 'n/a';\n    if (!this.isNullUndefinedOrEmpty(dataContext.duration) && dataContext.duration >= 0) {\n      durationText = `${dataContext.duration} ${dataContext.duration > 1 ? 'days' : 'day'}`;\n    }\n    return `<b>${costText}</b> | ${durationText}`;\n  }\n\n  isNullUndefinedOrEmpty(data: any) {\n    return (data === '' || data === null || data === undefined);\n  }\n\n  onCellValidationError(_e: Event, args: any) {\n    alert(args.validationResults.msg);\n  }\n\n  setFrozenColumns(frozenCols: number) {\n    this.gridObj.setOptions({ frozenColumn: frozenCols });\n    this.gridOptions = this.gridObj.getOptions();\n  }\n\n  /** toggle dynamically, through slickgrid \"setOptions()\" the top/bottom pinned location */\n  toggleFrozenBottomRows() {\n    if (this.gridObj && this.gridObj.setOptions) {\n      this.gridObj.setOptions({\n        frozenBottom: !this.isFrozenBottom\n      });\n      this.isFrozenBottom = !this.isFrozenBottom; // toggle the variable\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example20_decorators","_init","customElement","__au2ViewDef","Example20","__publicField","SlickEventHandler","aureliaGrid","event","isMouseEnter","cell","rows","Formatters","FieldType","Filters","Editors","mockDataset","i","_row","_cell","_value","_columnDef","dataContext","costText","formatNumber","durationText","data","args","frozenCols","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}