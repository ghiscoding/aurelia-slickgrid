{"version":3,"file":"example12-oe-_MCkE.js","sources":["../../src/examples/slickgrid/example12.$au.ts","../../src/examples/slickgrid/example12.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example12\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example12.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<hr />\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"language-button\\\" click.trigger=\\\"switchLanguage()\\\">\\n      <i class=\\\"mdi mdi-translate\\\"></i>\\n      Switch Language\\n    </button>\\n    <label>Locale:</label>\\n    <span style=\\\"font-style: italic; width: 70px;\\\" data-test=\\\"selected-locale\\\">\\n      ${selectedLanguage + '.json'}\\n    </span>\\n\\n    <span style=\\\"margin-left: 20px\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"exportToFile('csv')\\\">\\n        <i class=\\\"mdi mdi-download\\\"></i>\\n        Download to CSV\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"exportToFile('txt')\\\">\\n        <i class=\\\"mdi mdi-download\\\"></i>\\n        Download to Text\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"exportToExcel()\\\">\\n        <i class=\\\"mdi mdi-file-excel-outline text-success\\\"></i>\\n        Download to Excel\\n      </button>\\n    </span>\\n    <span style=\\\"margin-left: 10px\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"dynamicallyAddTitleHeader()\\\">\\n        <i class=\\\"mdi mdi-shape-square-plus\\\"></i>\\n        Dynamically Duplicate Title Column\\n      </button>\\n    </span>\\n  </div>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid12\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-grid-state-changed.trigger=\\\"gridStateChanged($event.detail)\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport { TextExportService } from '@slickgrid-universal/text-export';\nimport { I18N } from '@aurelia/i18n';\n// import { TOptions as I18NOptions } from 'i18next';\n\nimport {\n  type AureliaGridInstance,\n  type Column,\n  DelimiterType,\n  FieldType,\n  FileType,\n  Filters,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  type GridStateChange,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\nimport { resolve } from 'aurelia';\n\nconst NB_ITEMS = 1500;\n\n// create a custom translate Formatter (typically you would move that a separate file, for separation of concerns)\nconst taskTranslateFormatter: Formatter = (_row, _cell, value, _columnDef, _dataContext, grid) => {\n  const gridOptions = grid.getOptions() as GridOption;\n  const i18n = gridOptions.i18n;\n\n  return i18n?.tr('TASK_X', { x: value } as any) ?? '';\n};\n\nexport class Example12 {\n  title = 'Example 12: Localization (i18n)';\n  subTitle = `Support multiple locales with the i18next plugin, following these steps.\n    Take a look at the (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/localization/localization\" target=\"_blank\">Wiki documentation</a>)\n    <ol class=\"small\">\n      <li>You first need to \"enableTranslate\" in the Grid Options</li>\n      <li>In the Column Definitions, you have following options</li>\n      <ul>\n        <li>To translate a header title, use \"nameKey\" with a translate key (nameKey: 'TITLE')</li>\n        <li>For the cell values, you need to use a Formatter, there's 2 ways of doing it</li>\n        <ul>\n          <li>formatter: myCustomTranslateFormatter <b>&lt;= \"Title\" column uses it</b></li>\n          <li>formatter: Formatters.translate <b>&lt;= \"Completed\" column uses it</b></li>\n        </ul>\n      </ul>\n      <li>For date localization, you need to create your own custom formatter. </li>\n      <ul>\n        <li>You can easily implement logic to switch between Formatters \"dateIso\" or \"dateUs\", depending on current locale.</li>\n      </ul>\n      <li>For the Select (dropdown) filter, you can fill in the \"labelKey\" property, if found it will use it, else it will use \"label\"</li>\n        <ul>\n          <li>What if your select options have totally different value/label pair? In this case, you can use the <b>customStructure: { label: 'customLabel', value: 'customValue'}</b> to change the property name(s) to use.'</li>\n          <li>What if you want to use \"customStructure\" and translation? Simply pass this flag <b>enableTranslateLabel: true</b></li>\n          <li>More info on the Select Filter <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/column-functionalities/filters/select-filter\" target=\"_blank\">Wiki page</a></li>\n        </ul>\n        <li>For more info about \"Download to File\", read the <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/export-to-excel\" target=\"_blank\">Wiki page</a></li>\n      </ol>`;\n\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  selectedLanguage: string;\n  duplicateTitleHeaderCount = 1;\n  gridObj!: SlickGrid;\n  hideSubTitle = false;\n  excelExportService = new ExcelExportService();\n  textExportService = new TextExportService();\n\n  constructor(private readonly i18n: I18N = resolve(I18N)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData(NB_ITEMS);\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n    this.gridObj = aureliaGrid.slickGrid;\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: 'Title', field: 'id', nameKey: 'TITLE', minWidth: 100,\n        formatter: taskTranslateFormatter,\n        sortable: true,\n        filterable: true,\n        params: { useFormatterOuputToFilter: true }\n      },\n      { id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80 },\n      {\n        id: 'duration', name: 'Duration (days)', field: 'duration', nameKey: 'DURATION', sortable: true,\n        formatter: Formatters.percentCompleteBar, minWidth: 100,\n        exportWithFormatter: false,\n        filterable: true,\n        type: FieldType.number,\n        filter: { model: Filters.slider, /* operator: '>=',*/ filterOptions: { hideSliderNumber: true } }\n      },\n      { id: 'start', name: 'Start', field: 'start', nameKey: 'START', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\n      {\n        id: 'completedBool', name: 'Completed', field: 'completedBool', nameKey: 'COMPLETED', minWidth: 100,\n        sortable: true,\n        formatter: Formatters.checkmarkMaterial,\n        exportCustomFormatter: Formatters.translateBoolean,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, labelKey: 'TRUE' }, { value: false, labelKey: 'FALSE' }],\n          model: Filters.singleSelect,\n          enableTranslateLabel: true\n        }\n      },\n      {\n        id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', formatter: Formatters.translate, sortable: true,\n        minWidth: 100,\n        exportWithFormatter: true, // you can set this property in the column definition OR in the grid options, column def has priority over grid options\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: 'TRUE', labelKey: 'TRUE' }, { value: 'FALSE', labelKey: 'FALSE' }],\n          collectionSortBy: {\n            property: 'labelKey', // will sort by translated value since \"enableTranslateLabel\" is true\n            sortDesc: true\n          },\n          model: Filters.singleSelect,\n          enableTranslateLabel: true\n        }\n      }\n      // OR via your own custom translate formatter\n      // { id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', formatter: translateFormatter, sortable: true, minWidth: 100 }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableAutoResize: true,\n      enableExcelCopyBuffer: true,\n      enableFiltering: true,\n      enableTranslate: true,\n      i18n: this.i18n,\n      checkboxSelector: {\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true\n      },\n      enableCheckboxSelector: true,\n      enableRowSelection: true,\n      showCustomFooter: true, // display some metrics in the bottom custom footer\n      customFooterOptions: {\n        metricTexts: {\n          // default text displayed in the metrics section on the right\n          // all texts optionally support translation keys,\n          // if you wish to use that feature then use the text properties with the 'Key' suffix (e.g: itemsKey, ofKey, lastUpdateKey)\n          // example \"items\" for a plain string OR \"itemsKey\" to use a translation key\n          itemsKey: 'ITEMS',\n          ofKey: 'OF',\n          lastUpdateKey: 'LAST_UPDATE',\n        },\n        dateFormat: 'YYYY-MM-DD hh:mm a',\n        hideTotalItemCount: false,\n        hideLastUpdateTimestamp: false,\n      },\n      gridMenu: {\n        hideExportCsvCommand: false,           // false by default, so it's optional\n        hideExportTextDelimitedCommand: false  // true by default, so if you want it, you will need to disable the flag\n      },\n      enableExcelExport: true,\n      enableTextExport: true,\n      textExportOptions: {\n        // set at the grid option level, meaning all column will evaluate the Formatter (when it has a Formatter defined)\n        exportWithFormatter: true,\n        sanitizeDataExport: true\n      },\n      excelExportOptions: {\n        // optionally pass a custom header to the Excel Sheet\n        // a lot of the info can be found on Excel-Builder-Vanilla\n        // https://ghiscoding.gitbook.io/excel-builder-vanilla/cookbook/fonts-and-colors\n        customExcelHeader: (workbook, sheet) => {\n          const customTitle = this.i18n.getLocale() === 'fr' ? 'Titre qui est suffisament long pour être coupé' : 'My header that is long enough to wrap';\n          const stylesheet = workbook.getStyleSheet();\n          const aFormatDefn = {\n            'font': { 'size': 12, 'fontName': 'Calibri', 'bold': true, color: 'FF0000FF' }, // every color starts with FF, then regular HTML color\n            'alignment': { 'wrapText': true }\n          };\n          const formatterId = stylesheet.createFormat(aFormatDefn);\n          sheet.setRowInstructions(0, { height: 30 }); // change height of row 0\n\n          // excel cells start with A1 which is upper left corner\n          sheet.mergeCells('B1', 'D1');\n          const cols: any[] = [];\n          // push empty data on A1\n          cols.push({ value: '' });\n          // push data in B1 cell with metadata formatter\n          cols.push({ value: customTitle, metadata: { style: formatterId.id } });\n          sheet.data.push(cols);\n        },\n        exportWithFormatter: true,\n        sanitizeDataExport: true\n      },\n      externalResources: [this.excelExportService, this.textExportService],\n    };\n  }\n\n  getData(count: number) {\n    // mock a dataset\n    const tmpData: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n\n      tmpData[i] = {\n        id: i,\n        description: (i % 5) ? 'desc ' + i : '🚀🦄 español', // also add some random to test NULL field\n        duration: Math.round(Math.random() * 100) + '',\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        completedBool: (i % 5 === 0) ? true : false,\n        completed: (i % 5 === 0) ? 'TRUE' : 'FALSE'\n      };\n    }\n    this.dataset = tmpData;\n  }\n\n  dynamicallyAddTitleHeader() {\n    // you can dynamically add your column to your column definitions\n    // and then use the spread operator [...cols] OR slice to force Aurelia to review the changes\n    const newCol = { id: `title${this.duplicateTitleHeaderCount++}`, field: 'id', nameKey: 'TITLE', formatter: taskTranslateFormatter, sortable: true, minWidth: 100, filterable: true, params: { useFormatterOuputToFilter: true } };\n    this.columnDefinitions.push(newCol);\n    this.columnDefinitions = this.columnDefinitions.slice(); // or use spread operator [...cols]\n\n    // NOTE if you use an Extensions (Checkbox Selector, Row Detail, ...) that modifies the column definitions in any way\n    // you MUST use \"getAllColumnDefinitions()\" from the GridService, using this will be ALL columns including the 1st column that is created internally\n    // for example if you use the Checkbox Selector (row selection), you MUST use the code below\n    /*\n    const allColumns = this.aureliaGrid.gridService.getAllColumnDefinitions();\n    allColumns.push(newCol);\n    this.columnDefinitions = [...allColumns]; // (or use slice) reassign to column definitions for Aurelia to do dirty checking\n    */\n  }\n\n  exportToExcel() {\n    this.excelExportService.exportToExcel({\n      filename: 'Export',\n      format: FileType.xlsx\n    });\n  }\n\n  exportToFile(type = 'csv') {\n    this.textExportService.exportToFile({\n      delimiter: (type === 'csv') ? DelimiterType.comma : DelimiterType.tab,\n      filename: 'myExport',\n      format: (type === 'csv') ? FileType.csv : FileType.txt\n    });\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  gridStateChanged(gridStateChanges: GridStateChange) {\n    console.log('Grid State changed:: ', gridStateChanges);\n    console.log('Grid State changed:: ', gridStateChanges.change);\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example12_decorators","_init","NB_ITEMS","taskTranslateFormatter","_row","_cell","value","_columnDef","_dataContext","grid","i18n","customElement","__au2ViewDef","Example12","resolve","I18N","__publicField","ExcelExportService","TextExportService","defaultLang","aureliaGrid","Formatters","FieldType","Filters","workbook","sheet","customTitle","stylesheet","aFormatDefn","formatterId","cols","count","tmpData","i","randomYear","randomMonth","randomDay","newCol","FileType","type","DelimiterType","gridStateChanges","nextLanguage","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}