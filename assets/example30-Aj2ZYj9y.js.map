{"version":3,"file":"example30-Aj2ZYj9y.js","sources":["../../src/examples/slickgrid/example30.$au.ts","../../../../node_modules/.pnpm/@slickgrid-universal+composite-editor-component@5.13.3/node_modules/@slickgrid-universal/composite-editor-component/dist/esm/compositeEditor.factory.js","../../../../node_modules/.pnpm/@slickgrid-universal+composite-editor-component@5.13.3/node_modules/@slickgrid-universal/composite-editor-component/dist/esm/slick-composite-editor.component.js","../../src/examples/slickgrid/example30.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example30.scss\";\nexport const name = \"example30\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example30.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleDarkMode()\\\" data-test=\\\"toggle-dark-mode\\\">\\n    <i class=\\\"mdi mdi-theme-light-dark\\\"></i>\\n    <span>Toggle Dark Mode</span>\\n  </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"mb-2\\\">\\n  <div class=\\\"btn-group btn-group-sm\\\" role=\\\"group\\\" aria-label=\\\"Basic Editing Commands\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"toggle-readonly-btn\\\"\\n            click.trigger=\\\"toggleGridEditReadonly()\\\">\\n      <i class=\\\"mdi mdi-table-edit\\\"></i> Toggle Edit/Readonly Grid\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"undo-last-edit-btn\\\"\\n            click.trigger=\\\"undoLastEdit()\\\">\\n      <i class=\\\"mdi mdi-undo\\\"></i> Undo Last Edit\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"undo-open-editor-btn\\\"\\n            click.trigger=\\\"undoLastEdit(true)\\\">\\n      <i class=\\\"mdi mdi-undo\\\"></i> Undo Last Edit &amp; Open Editor\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"undo-all-edits-btn\\\"\\n            click.trigger=\\\"undoAllEdits()\\\">\\n      <i class=\\\"mdi mdi-history\\\"></i> Undo All Edits\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"save-all-btn\\\"\\n            click.trigger=\\\"saveAll()\\\">\\n        <span>Save All</span>\\n    </button>\\n  </div>\\n</div>\\n\\n<div class=\\\"mb-3\\\">\\n  <div class=\\\"btn-group btn-group-sm\\\" role=\\\"group\\\" aria-label=\\\"Basic example\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"open-modal-create-btn\\\"\\n            click.trigger=\\\"openCompositeModal('create')\\\" disabled.bind=\\\"isCompositeDisabled\\\">\\n      <i class=\\\"mdi mdi-shape-square-plus\\\"></i> Item Create\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"open-modal-clone-btn\\\"\\n            click.trigger=\\\"openCompositeModal('clone')\\\" disabled.bind=\\\"isCompositeDisabled\\\">\\n      <i class=\\\"mdi mdi-content-copy\\\"></i> Item Clone\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"open-modal-edit-btn\\\"\\n            click.trigger=\\\"openCompositeModal('edit')\\\" disabled.bind=\\\"isCompositeDisabled\\\">\\n      <i class=\\\"mdi mdi-pencil\\\"></i> Item Edit\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"open-modal-mass-update-btn\\\"\\n            click.trigger=\\\"openCompositeModal('mass-update')\\\" disabled.bind=\\\"isCompositeDisabled\\\">\\n      <i class=\\\"mdi mdi-pencil-box-multiple-outline\\\"></i> Mass Update\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"open-modal-mass-selection-btn\\\"\\n            click.trigger=\\\"openCompositeModal('mass-selection')\\\" disabled.bind=\\\"isMassSelectionDisabled\\\">\\n      <i class=\\\"mdi mdi-check-box-outline\\\"></i> Update Selected\\n    </button>\\n  </div>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid30\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                    on-before-edit-cell.trigger=\\\"handleOnBeforeEditCell($event.detail.eventData, $event.detail.args)\\\"\\n                    on-cell-change.trigger=\\\"handleOnCellChange($event.detail.eventData, $event.detail.args)\\\"\\n                    on-click.trigger=\\\"handleOnCellClicked($event.detail.eventData, $event.detail.args)\\\"\\n                    on-composite-editor-change.trigger=\\\"handleOnCompositeEditorChange($event.detail.eventData, $event.detail.args)\\\"\\n                    on-item-deleted.trigger=\\\"handleItemDeleted($event.detail)\\\"\\n                    on-grid-state-changed.trigger=\\\"handleOnGridStateChanged($event.detail)\\\"\\n                    on-rows-or-count-changed.trigger=\\\"handleReRenderUnsavedStyling()\\\"\\n                    on-validation-error.trigger=\\\"handleValidationError($event.detail.eventData, $event.detail.args)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { emptyElement, getOffset } from '@slickgrid-universal/common';\n/**\n * A composite SlickGrid editor factory.\n * Generates an editor that is composed of multiple editors for given columns.\n * Individual editors are provided given containers instead of the original cell.\n * Validation will be performed on all editors individually and the results will be aggregated into one\n * validation result.\n *\n *\n * The returned editor will have its prototype set to CompositeEditor, so you can use the \"instanceof\" check.\n *\n * NOTE:  This doesn't work for detached editors since they will be created and positioned relative to the\n *        active cell and not the provided container.\n *\n * @class CompositeEditor\n * @constructor\n * @param columns {Array} Column definitions from which editors will be pulled.\n * @param containers {Array} Container HTMLElements in which editors will be placed.\n * @param options {Object} Options hash:\n *  validationFailedMsg     -   A generic failed validation message set on the aggregated validation resuls.\n *  validationMsgPrefix     -   Add an optional prefix to each validation message (only the ones shown in the modal form, not the ones in the \"errors\")\n *  modalType               -   Defaults to \"edit\", modal type can 1 of these 3: (create, edit, mass, mass-selection)\n *  hide                    -   A function to be called when the grid asks the editor to hide itself.\n *  show                    -   A function to be called when the grid asks the editor to show itself.\n *  position                -   A function to be called when the grid asks the editor to reposition itself.\n *  destroy                 -   A function to be called when the editor is destroyed.\n */\nexport function SlickCompositeEditor(columns, containers, options) {\n    let firstInvalidEditor;\n    const defaultOptions = {\n        modalType: 'edit', // available type (create, clone, edit, mass)\n        validationFailedMsg: 'Some of the fields have failed validation',\n        validationMsgPrefix: null,\n        show: null,\n        hide: null,\n        position: null,\n        destroy: null,\n        formValues: {},\n        editors: {},\n    };\n    options = { ...defaultOptions, ...options };\n    /* no operation (empty) function */\n    const noop = () => { };\n    const getContainerBox = (i) => {\n        const container = containers[i];\n        const offset = getOffset(container);\n        const width = container?.clientWidth ?? 0;\n        const height = container?.clientHeight ?? 0;\n        return {\n            top: offset.top,\n            left: offset.left,\n            bottom: offset.top + height,\n            right: offset.left + width,\n            width,\n            height,\n            visible: true,\n        };\n    };\n    /* Editor prototype that will get instantiated dynamically by looping through each Editors */\n    function editor(args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const context = this;\n        let editors = [];\n        function init() {\n            let newArgs = {};\n            let idx = 0;\n            while (idx < columns.length) {\n                if (columns[idx].editorClass) {\n                    const column = columns[idx];\n                    newArgs = { ...args };\n                    newArgs.container = containers[idx];\n                    newArgs.column = column;\n                    newArgs.position = getContainerBox(idx);\n                    newArgs.commitChanges = noop;\n                    newArgs.cancelChanges = noop;\n                    newArgs.compositeEditorOptions = options;\n                    newArgs.formValues = {};\n                    const currentEditor = new column.editorClass(newArgs);\n                    options.editors[column.id] = currentEditor; // add every Editor instance refs\n                    editors.push(currentEditor);\n                }\n                idx++;\n            }\n            // focus on first input\n            window.setTimeout(() => {\n                if (Array.isArray(editors) && editors.length > 0 && typeof editors[0].focus === 'function') {\n                    editors[0].focus();\n                }\n            }, 0);\n        }\n        context.getEditors = () => {\n            return editors;\n        };\n        context.destroy = () => {\n            let tmpEditor = editors.pop();\n            while (tmpEditor) {\n                tmpEditor?.destroy();\n                tmpEditor = editors.pop();\n            }\n            let tmpContainer = containers.pop();\n            while (tmpContainer) {\n                emptyElement(tmpContainer);\n                tmpContainer?.remove();\n                tmpContainer = containers.pop();\n            }\n            options?.destroy?.();\n            editors = [];\n            containers = null;\n        };\n        context.focus = () => {\n            // if validation has failed, set the focus to the first invalid editor\n            (firstInvalidEditor || editors[0]).focus();\n        };\n        context.isValueChanged = () => {\n            let idx = 0;\n            while (idx < editors.length) {\n                if (editors[idx].isValueChanged()) {\n                    return true;\n                }\n                idx++;\n            }\n            return false;\n        };\n        context.serializeValue = () => {\n            const serializedValue = [];\n            let idx = 0;\n            while (idx < editors.length) {\n                serializedValue[idx] = editors[idx].serializeValue();\n                idx++;\n            }\n            return serializedValue;\n        };\n        context.applyValue = (item, state) => {\n            let idx = 0;\n            while (idx < editors.length) {\n                editors[idx].applyValue(item, state?.[idx]);\n                idx++;\n            }\n        };\n        context.loadValue = (item) => {\n            let idx = 0;\n            while (idx < editors.length) {\n                editors[idx].loadValue(item);\n                idx++;\n            }\n        };\n        context.validate = (targetElm) => {\n            let validationResults;\n            firstInvalidEditor = null;\n            const errors = [];\n            let idx = 0;\n            while (idx < editors.length) {\n                const columnDef = editors[idx].args?.column;\n                if (columnDef?.id !== undefined) {\n                    const compositeModalElm = document.querySelector(`.slick-editor-modal`);\n                    let validationElm = compositeModalElm?.querySelector(`.item-details-validation.editor-${columnDef.id}`);\n                    let labelElm = compositeModalElm?.querySelector(`.item-details-label.editor-${columnDef.id}`);\n                    let editorElm = compositeModalElm?.querySelector(`[data-editorid='${columnDef.id}']`);\n                    const validationMsgPrefix = options?.validationMsgPrefix ?? '';\n                    if (!targetElm || editorElm?.contains(targetElm)) {\n                        validationResults = editors[idx].validate();\n                        if (!validationResults.valid) {\n                            firstInvalidEditor = editors[idx];\n                            errors.push({\n                                index: idx,\n                                editor: editors[idx],\n                                container: containers[idx],\n                                msg: validationResults.msg,\n                            });\n                            if (validationElm) {\n                                validationElm.textContent = `${validationMsgPrefix}${validationResults.msg}`;\n                                labelElm?.classList.add('invalid');\n                                editorElm?.classList.add('invalid');\n                            }\n                        }\n                        else if (validationElm) {\n                            validationElm.textContent = '';\n                            editorElm?.classList.remove('invalid');\n                            labelElm?.classList.remove('invalid');\n                        }\n                    }\n                    validationElm = null;\n                    labelElm = null;\n                    editorElm = null;\n                }\n                idx++;\n            }\n            targetElm = null;\n            if (errors.length) {\n                return {\n                    valid: false,\n                    msg: options.validationFailedMsg,\n                    errors,\n                };\n            }\n            return {\n                valid: true,\n                msg: '',\n            };\n        };\n        context.hide = () => {\n            let idx = 0;\n            while (idx < editors.length) {\n                editors[idx]?.hide?.();\n                idx++;\n            }\n            options?.hide?.();\n        };\n        context.show = () => {\n            let idx = 0;\n            while (idx < editors.length) {\n                editors[idx]?.show?.();\n                idx++;\n            }\n            options?.show?.();\n        };\n        context.position = (box) => {\n            options?.position?.(box);\n        };\n        // initialize current editor\n        init();\n    }\n    // so we can do editor instanceof SlickCompositeEditor OR instanceof CompositeEditor\n    editor.prototype = this;\n    return editor;\n}\n//# sourceMappingURL=compositeEditor.factory.js.map","import { BindingEventService } from '@slickgrid-universal/binding';\nimport { deepMerge, emptyObject, setDeepValue, classNameToList, getHtmlStringOutput, extend } from '@slickgrid-universal/utils';\nimport { Constants, createDomElement, getDescendantProperty, numericSortComparer, SlickEventHandler, SortDirectionNumber, } from '@slickgrid-universal/common';\nimport { SlickCompositeEditor } from './compositeEditor.factory.js';\nconst DEFAULT_ON_ERROR = (error) => console.log(error.message);\nexport class SlickCompositeEditorComponent {\n    get eventHandler() {\n        return this._eventHandler;\n    }\n    get dataView() {\n        return this.grid?.getData();\n    }\n    get dataViewLength() {\n        return this.dataView.getLength();\n    }\n    get formValues() {\n        return this._formValues;\n    }\n    get editors() {\n        return this._editors;\n    }\n    set editors(editors) {\n        this._editors = editors;\n    }\n    get gridOptions() {\n        return this.grid?.getOptions();\n    }\n    constructor() {\n        this._columnDefinitions = [];\n        this._lastActiveRowNumber = -1;\n        this._formValues = null;\n        this.gridService = null;\n        this._eventHandler = new SlickEventHandler();\n        this._bindEventService = new BindingEventService();\n    }\n    /**\n     * initialize the Composite Editor by passing the SlickGrid object and the container service\n     *\n     * Note: we aren't using DI in the constructor simply to be as framework agnostic as possible,\n     * we are simply using this init() function with a very basic container service to do the job\n     */\n    init(grid, containerService) {\n        this.grid = grid;\n        this.gridService = containerService.get('GridService');\n        this.translaterService = containerService.get('TranslaterService');\n        if (!this.gridService) {\n            throw new Error('[Slickgrid-Universal] it seems that the GridService is not being loaded properly, make sure the Container Service is properly implemented.');\n        }\n        if (this.gridOptions.enableTranslate && (!this.translaterService || !this.translaterService.translate)) {\n            throw new Error('[Slickgrid-Universal] requires a Translate Service to be installed and configured when the grid option \"enableTranslate\" is enabled.');\n        }\n        // get locales provided by user in forRoot or else use default English locales via the Constants\n        this._locales = this.gridOptions?.locales ?? Constants.locales;\n    }\n    /** Dispose of the Component & unsubscribe all events */\n    dispose() {\n        this._eventHandler.unsubscribeAll();\n        this._bindEventService.unbindAll();\n        this._formValues = null;\n        this.disposeComponent();\n    }\n    /** Dispose of the Component without unsubscribing any events */\n    disposeComponent() {\n        // protected _editorContainers!: Array<HTMLElement | null>;\n        this._modalBodyTopValidationElm?.remove();\n        this._modalSaveButtonElm?.remove();\n        if (typeof this._modalElm?.remove === 'function') {\n            this._modalElm.remove();\n            // remove the body backdrop click listener, every other listeners will be dropped automatically since we destroy the component\n            document.body.classList.remove('slick-modal-open');\n        }\n        this._editorContainers = [];\n    }\n    /**\n     * Dynamically change value of an input from the Composite Editor form.\n     *\n     * NOTE: user might get an error thrown when trying to apply a value on a Composite Editor that was not found in the form,\n     * but in some cases the user might still want the value to be applied to the formValues so that it will be sent to the save in final item data context\n     * and when that happens, you can just skip that error so it won't throw.\n     * @param {String | Column} columnIdOrDef - column id or column definition\n     * @param {*} newValue - the new value\n     * @param {Boolean} skipMissingEditorError - defaults to False, skipping the error when the Composite Editor was not found will allow to still apply the value into the formValues object\n     * @param {Boolean} triggerOnCompositeEditorChange - defaults to True, will this change trigger a onCompositeEditorChange event?\n     */\n    changeFormInputValue(columnIdOrDef, newValue, skipMissingEditorError = false, triggerOnCompositeEditorChange = true) {\n        const columnDef = this.getColumnByObjectOrId(columnIdOrDef);\n        const columnId = typeof columnIdOrDef === 'string' ? columnIdOrDef : (columnDef?.id ?? '');\n        const editor = this._editors?.[columnId];\n        let outputValue = newValue;\n        if (!editor && !skipMissingEditorError) {\n            throw new Error(`Composite Editor with column id \"${columnId}\" not found.`);\n        }\n        if (typeof editor?.setValue === 'function' && Array.isArray(this._editorContainers)) {\n            editor.setValue(newValue, true, triggerOnCompositeEditorChange);\n            const editorContainerElm = this._editorContainers.find((editorElm) => editorElm.dataset.editorid === columnId);\n            const excludeDisabledFieldFormValues = this.gridOptions?.compositeEditorOptions?.excludeDisabledFieldFormValues ?? false;\n            if (!editor.disabled || (editor.disabled && !excludeDisabledFieldFormValues)) {\n                editorContainerElm?.classList?.add('modified');\n            }\n            else {\n                outputValue = '';\n                editorContainerElm?.classList?.remove('modified');\n            }\n            // when the field is disabled, we will only allow a blank value anything else will be disregarded\n            if (editor.disabled && (outputValue !== '' || outputValue !== null || outputValue !== undefined || outputValue !== 0)) {\n                outputValue = '';\n            }\n        }\n        // is the field a complex object, like \"address.streetNumber\"\n        // we'll set assign the value as a complex object following the `field` dot notation\n        const fieldName = columnDef?.field ?? '';\n        if (columnDef && fieldName?.includes('.')) {\n            // when it's a complex object, user could override the object path (where the editable object is located)\n            // else we use the path provided in the Field Column Definition\n            const objectPath = columnDef.editor?.complexObjectPath ?? fieldName ?? '';\n            setDeepValue(this._formValues ?? {}, objectPath, newValue);\n        }\n        else {\n            this._formValues = { ...this._formValues, [columnId]: outputValue };\n        }\n    }\n    /**\n     * Dynamically update the `formValues` object directly without triggering the onCompositeEditorChange event.\n     * The fact that this doesn't trigger an event, might not always be good though, in these cases you are probably better with using the changeFormInputValue() method\n     * @param {String | Column} columnIdOrDef - column id or column definition\n     * @param {*} newValue - the new value\n     */\n    changeFormValue(columnIdOrDef, newValue) {\n        const columnDef = this.getColumnByObjectOrId(columnIdOrDef);\n        const columnId = typeof columnIdOrDef === 'string' ? columnIdOrDef : (columnDef?.id ?? '');\n        // is the field a complex object, like \"address.streetNumber\"\n        // we'll set assign the value as a complex object following the `field` dot notation\n        const fieldName = columnDef?.field ?? columnIdOrDef;\n        if (fieldName?.includes('.')) {\n            // when it's a complex object, user could override the object path (where the editable object is located)\n            // else we use the path provided in the Field Column Definition\n            const objectPath = columnDef?.editor?.complexObjectPath ?? fieldName ?? '';\n            setDeepValue(this._formValues, objectPath, newValue);\n        }\n        else {\n            this._formValues = { ...this._formValues, [columnId]: newValue };\n        }\n        this._formValues = deepMerge({}, this._itemDataContext, this._formValues);\n    }\n    /**\n     * Dynamically change an Editor option of the Composite Editor form\n     * For example, a use case could be to dynamically change the \"minDate\" of another Date Editor in the Composite Editor form.\n     * @param {String} columnId - column id\n     * @param {*} newValue - the new value\n     */\n    changeFormEditorOption(columnId, optionName, newOptionValue) {\n        const editor = this._editors?.[columnId];\n        // change an Editor option (not all Editors have that method, so make sure it exists before trying to call it)\n        if (editor?.changeEditorOption) {\n            editor.changeEditorOption(optionName, newOptionValue);\n        }\n        else {\n            throw new Error(`Editor with column id \"${columnId}\" not found OR the Editor does not support \"changeEditorOption\" (current only available with Date, MultipleSelect, SingleSelect & Slider Editors).`);\n        }\n    }\n    /**\n     * Disable (or enable) an input of the Composite Editor form\n     * @param {String} columnId - column definition id\n     * @param isDisabled - defaults to True, are we disabling the associated form input\n     */\n    disableFormInput(columnId, isDisabled = true) {\n        const editor = this._editors?.[columnId];\n        if (editor?.disable && Array.isArray(this._editorContainers)) {\n            editor.disable(isDisabled);\n        }\n    }\n    /** Entry point to initialize and open the Composite Editor modal window */\n    openDetails(options) {\n        const onError = options.onError ?? DEFAULT_ON_ERROR;\n        const defaultOptions = {\n            backdrop: 'static',\n            showCloseButtonOutside: true,\n            shouldClearRowSelectionAfterMassAction: true,\n            viewColumnLayout: 'auto',\n            modalType: 'edit',\n        };\n        try {\n            if (!this.grid || (this.grid.getEditorLock().isActive() && !this.grid.getEditorLock().commitCurrentEdit())) {\n                return null;\n            }\n            this._formValues = null; // make sure there's no leftover from previous change\n            this._options = {\n                ...defaultOptions,\n                ...this.gridOptions.compositeEditorOptions,\n                ...options,\n                labels: { ...this.gridOptions.compositeEditorOptions?.labels, ...options?.labels },\n            }; // merge default options with user options\n            this._options.backdrop = options.backdrop !== undefined ? options.backdrop : 'static';\n            const viewColumnLayout = this._options.viewColumnLayout || 1;\n            const activeCell = this.grid.getActiveCell();\n            const activeColIndex = activeCell?.cell ?? 0;\n            const activeRow = activeCell?.row ?? 0;\n            const gridUid = this.grid.getUID() || '';\n            let headerTitle = options.headerTitle || '';\n            // execute callback before creating the modal window (that is in short the first event in the lifecycle)\n            if (typeof this._options.onBeforeOpen === 'function') {\n                this._options.onBeforeOpen();\n            }\n            if (this.hasRowSelectionEnabled() && this._options.modalType === 'auto-mass' && this.grid.getSelectedRows) {\n                const selectedRowsIndexes = this.grid.getSelectedRows() || [];\n                if (selectedRowsIndexes.length > 0) {\n                    this._options.modalType = 'mass-selection';\n                    if (options?.headerTitleMassSelection) {\n                        headerTitle = options?.headerTitleMassSelection;\n                    }\n                }\n                else {\n                    this._options.modalType = 'mass-update';\n                    if (options?.headerTitleMassUpdate) {\n                        headerTitle = options?.headerTitleMassUpdate;\n                    }\n                }\n            }\n            const modalType = this._options.modalType || 'edit';\n            if (!this.gridOptions.editable) {\n                onError({\n                    type: 'error',\n                    code: 'EDITABLE_GRID_REQUIRED',\n                    message: 'Your grid must be editable in order to use the Composite Editor Modal.',\n                });\n                return null;\n            }\n            else if (!this.gridOptions.enableCellNavigation) {\n                onError({\n                    type: 'error',\n                    code: 'ENABLE_CELL_NAVIGATION_REQUIRED',\n                    message: 'Composite Editor requires the flag \"enableCellNavigation\" to be set to True in your Grid Options.',\n                });\n                return null;\n            }\n            else if (!this.gridOptions.enableAddRow && (modalType === 'clone' || modalType === 'create')) {\n                onError({\n                    type: 'error',\n                    code: 'ENABLE_ADD_ROW_REQUIRED',\n                    message: 'Composite Editor requires the flag \"enableAddRow\" to be set to True in your Grid Options when cloning/creating a new item.',\n                });\n                return null;\n            }\n            else if (!activeCell && (modalType === 'clone' || modalType === 'edit')) {\n                onError({ type: 'warning', code: 'NO_RECORD_FOUND', message: 'No records selected for edit or clone operation.' });\n                return null;\n            }\n            else {\n                const isWithMassChange = modalType === 'mass-update' || modalType === 'mass-selection';\n                const dataContext = !isWithMassChange ? this.grid.getDataItem(activeRow) : {};\n                this._originalDataContext = extend(true, {}, dataContext);\n                this._columnDefinitions = this.grid.getColumns();\n                const selectedRowsIndexes = this.hasRowSelectionEnabled() ? this.grid.getSelectedRows() : [];\n                const fullDatasetLength = this.dataView?.getItemCount() ?? 0;\n                this._lastActiveRowNumber = activeRow;\n                const dataContextIds = this.dataView.getAllSelectedIds();\n                // focus on a first cell with an Editor (unless current cell already has an Editor then do nothing)\n                // also when it's a \"Create\" modal, we'll scroll to the end of the grid\n                const rowIndex = modalType === 'create' ? this.dataViewLength : activeRow;\n                const hasFoundEditor = this.focusOnFirstColumnCellWithEditor(this._columnDefinitions, dataContext, activeColIndex, rowIndex, isWithMassChange);\n                if (!hasFoundEditor) {\n                    return null;\n                }\n                if (modalType === 'edit' && !dataContext) {\n                    onError({ type: 'warning', code: 'ROW_NOT_EDITABLE', message: 'Current row is not editable.' });\n                    return null;\n                }\n                else if (modalType === 'mass-selection') {\n                    if (selectedRowsIndexes.length < 1) {\n                        onError({\n                            type: 'warning',\n                            code: 'ROW_SELECTION_REQUIRED',\n                            message: 'You must select some rows before trying to apply new value(s).',\n                        });\n                        return null;\n                    }\n                }\n                let modalColumns = [];\n                if (isWithMassChange) {\n                    // when using Mass Update, we only care about the columns that have the \"massUpdate: true\", we disregard anything else\n                    modalColumns = this._columnDefinitions.filter((col) => col.editorClass && col.editor?.massUpdate === true);\n                }\n                else {\n                    modalColumns = this._columnDefinitions.filter((col) => col.editorClass);\n                }\n                // user could optionally show the form inputs in a specific order instead of using default column definitions order\n                if (modalColumns.some((col) => col.editor?.compositeEditorFormOrder !== undefined)) {\n                    modalColumns.sort((col1, col2) => {\n                        const val1 = col1?.editor?.compositeEditorFormOrder ?? Infinity;\n                        const val2 = col2?.editor?.compositeEditorFormOrder ?? Infinity;\n                        return numericSortComparer(val1, val2, SortDirectionNumber.asc);\n                    });\n                }\n                // open the editor modal and we can also provide a header title with optional parsing pulled from the dataContext, via template {{ }}\n                // for example {{title}} => display the item title, or even complex object works {{product.name}} => display item product name\n                const parsedHeaderTitle = headerTitle.replace(/\\{\\{(.*?)\\}\\}/g, (_match, group) => getDescendantProperty(dataContext, group));\n                const layoutColCount = viewColumnLayout === 'auto' ? this.autoCalculateLayoutColumnCount(modalColumns.length) : viewColumnLayout;\n                this._modalElm = createDomElement('div', { className: `slick-editor-modal ${gridUid}` });\n                const modalContentElm = createDomElement('div', { className: 'slick-editor-modal-content' });\n                // add dark mode CSS class when enabled\n                if (this.gridOptions?.darkMode) {\n                    modalContentElm.classList.add('slick-dark-mode');\n                }\n                if ((!isNaN(viewColumnLayout) && +viewColumnLayout > 1) || (viewColumnLayout === 'auto' && layoutColCount > 1)) {\n                    const splitClassName = layoutColCount === 2 ? 'split-view' : 'triple-split-view';\n                    modalContentElm.classList.add(splitClassName);\n                }\n                const modalHeaderTitleElm = createDomElement('div', { className: 'slick-editor-modal-title' });\n                this.grid.applyHtmlCode(modalHeaderTitleElm, parsedHeaderTitle);\n                const modalCloseButtonElm = createDomElement('button', {\n                    type: 'button',\n                    ariaLabel: 'Close',\n                    textContent: '×',\n                    className: 'close',\n                    dataset: { action: 'close' },\n                });\n                if (this._options.showCloseButtonOutside) {\n                    modalHeaderTitleElm?.classList?.add('outside');\n                    modalCloseButtonElm?.classList?.add('outside');\n                }\n                const modalHeaderElm = createDomElement('div', { ariaLabel: 'Close', className: 'slick-editor-modal-header' });\n                modalHeaderElm.appendChild(modalHeaderTitleElm);\n                modalHeaderElm.appendChild(modalCloseButtonElm);\n                const modalBodyElm = createDomElement('div', { className: 'slick-editor-modal-body' });\n                this._modalBodyTopValidationElm = createDomElement('div', { className: 'validation-summary', style: { display: 'none' } }, modalBodyElm);\n                const modalFooterElm = createDomElement('div', { className: 'slick-editor-modal-footer' });\n                const modalCancelButtonElm = createDomElement('button', {\n                    type: 'button',\n                    ariaLabel: this.getLabelText('cancelButton', 'TEXT_CANCEL', 'Cancel'),\n                    className: 'btn btn-cancel btn-default btn-sm',\n                    textContent: this.getLabelText('cancelButton', 'TEXT_CANCEL', 'Cancel'),\n                    dataset: { action: 'cancel' },\n                });\n                let leftFooterText = '';\n                let saveButtonText = '';\n                switch (modalType) {\n                    case 'clone':\n                        saveButtonText = this.getLabelText('cloneButton', 'TEXT_CLONE', 'Clone');\n                        break;\n                    case 'mass-update':\n                        const footerUnparsedText = this.getLabelText('massUpdateStatus', 'TEXT_ALL_X_RECORDS_SELECTED', 'All {{x}} records selected');\n                        leftFooterText = this.parseText(footerUnparsedText, { x: fullDatasetLength });\n                        saveButtonText = this.getLabelText('massUpdateButton', 'TEXT_APPLY_MASS_UPDATE', 'Mass Update');\n                        break;\n                    case 'mass-selection':\n                        const selectionUnparsedText = this.getLabelText('massSelectionStatus', 'TEXT_X_OF_Y_MASS_SELECTED', '{{x}} of {{y}} selected');\n                        leftFooterText = this.parseText(selectionUnparsedText, { x: dataContextIds.length, y: fullDatasetLength });\n                        saveButtonText = this.getLabelText('massSelectionButton', 'TEXT_APPLY_TO_SELECTION', 'Update Selection');\n                        break;\n                    default:\n                        saveButtonText = this.getLabelText('saveButton', 'TEXT_SAVE', 'Save');\n                }\n                const selectionCounterElm = createDomElement('div', { className: 'footer-status-text', textContent: leftFooterText });\n                this._modalSaveButtonElm = createDomElement('button', {\n                    type: 'button',\n                    className: 'btn btn-save btn-primary btn-sm',\n                    ariaLabel: saveButtonText,\n                    textContent: saveButtonText,\n                    dataset: {\n                        action: modalType === 'create' || modalType === 'edit' ? 'save' : modalType,\n                        ariaLabel: saveButtonText,\n                    },\n                });\n                const footerContainerElm = createDomElement('div', { className: 'footer-buttons' });\n                if (modalType === 'mass-update' || modalType === 'mass-selection') {\n                    modalFooterElm.appendChild(selectionCounterElm);\n                }\n                footerContainerElm.appendChild(modalCancelButtonElm);\n                footerContainerElm.appendChild(this._modalSaveButtonElm);\n                modalFooterElm.appendChild(footerContainerElm);\n                modalContentElm.appendChild(modalHeaderElm);\n                modalContentElm.appendChild(modalBodyElm);\n                modalContentElm.appendChild(modalFooterElm);\n                this._modalElm.appendChild(modalContentElm);\n                for (const columnDef of modalColumns) {\n                    if (columnDef.editorClass) {\n                        const itemContainer = createDomElement('div', { className: `item-details-container editor-${columnDef.id}` });\n                        if (layoutColCount === 1) {\n                            itemContainer.classList.add('slick-col-medium-12');\n                        }\n                        else {\n                            itemContainer.classList.add('slick-col-medium-6', `slick-col-xlarge-${12 / layoutColCount}`);\n                        }\n                        const templateItemLabelElm = createDomElement('div', { className: `item-details-label editor-${columnDef.id}` });\n                        this.grid.applyHtmlCode(templateItemLabelElm, this.getColumnLabel(columnDef) || 'n/a');\n                        const templateItemEditorElm = createDomElement('div', {\n                            className: 'item-details-editor-container slick-cell',\n                            dataset: { editorid: `${columnDef.id}` },\n                        });\n                        const templateItemValidationElm = createDomElement('div', {\n                            className: `item-details-validation editor-${columnDef.id}`,\n                        });\n                        // optionally add a reset button beside each editor\n                        if (this._options?.showResetButtonOnEachEditor) {\n                            const editorResetButtonElm = this.createEditorResetButtonElement(`${columnDef.id}`);\n                            this._bindEventService.bind(editorResetButtonElm, 'click', this.handleResetInputValue.bind(this));\n                            templateItemLabelElm.appendChild(editorResetButtonElm);\n                        }\n                        itemContainer.appendChild(templateItemLabelElm);\n                        itemContainer.appendChild(templateItemEditorElm);\n                        itemContainer.appendChild(templateItemValidationElm);\n                        modalBodyElm.appendChild(itemContainer);\n                    }\n                }\n                // optionally add a form reset button\n                if (this._options?.showFormResetButton) {\n                    const resetButtonContainerElm = this.createFormResetButtonElement();\n                    this._bindEventService.bind(resetButtonContainerElm, 'click', this.handleResetFormClicked.bind(this));\n                    modalBodyElm.appendChild(resetButtonContainerElm);\n                }\n                document.body.appendChild(this._modalElm);\n                document.body.classList.add('slick-modal-open'); // add backdrop to body\n                this._bindEventService.bind(document.body, 'click', this.handleBodyClicked.bind(this));\n                // execute lifecycle callback after the modal window is created and rendered in the DOM\n                if (typeof this._options.onRendered === 'function') {\n                    this._options.onRendered(this._modalElm);\n                }\n                this._editors = {};\n                this._editorContainers = modalColumns.map((col) => modalBodyElm.querySelector(`[data-editorid='${col.id}']`)) || [];\n                this._compositeOptions = {\n                    destroy: this.disposeComponent.bind(this),\n                    modalType,\n                    validationMsgPrefix: '* ',\n                    formValues: {},\n                    editors: this._editors,\n                };\n                const compositeEditor = new SlickCompositeEditor(modalColumns, this._editorContainers, this._compositeOptions);\n                this.grid.editActiveCell(compositeEditor);\n                // --\n                // Add a few Event Handlers\n                // keyboard, blur & button event handlers\n                this._bindEventService.bind(modalCloseButtonElm, 'click', this.cancelEditing.bind(this));\n                this._bindEventService.bind(modalCancelButtonElm, 'click', this.cancelEditing.bind(this));\n                this._bindEventService.bind(this._modalSaveButtonElm, 'click', this.handleSaveClicked.bind(this));\n                this._bindEventService.bind(this._modalElm, 'keydown', this.handleKeyDown.bind(this));\n                this._bindEventService.bind(this._modalElm, 'focusout', this.validateCurrentEditor.bind(this));\n                this._bindEventService.bind(this._modalElm, 'blur', this.validateCurrentEditor.bind(this));\n                // when any of the input of the composite editor form changes, we'll add/remove a \"modified\" CSS className for styling purposes\n                this._eventHandler.subscribe(this.grid.onCompositeEditorChange, this.handleOnCompositeEditorChange.bind(this));\n                // when adding a new row to the grid, we need to invalidate that row and re-render the grid\n                this._eventHandler.subscribe(this.grid.onAddNewRow, (_e, args) => {\n                    this._originalDataContext = this.insertNewItemInDataView(args.item); // this becomes the new data context\n                });\n            }\n            return this;\n        }\n        catch (error) {\n            this.dispose();\n            const errorMsg = typeof error === 'string' ? error : (error?.message ?? error?.body?.message ?? '');\n            const errorCode = typeof error === 'string' ? error : (error?.status ?? error?.body?.status ?? errorMsg);\n            onError({ type: 'error', code: errorCode, message: errorMsg });\n            return null;\n        }\n    }\n    /** Cancel the Editing which will also close the modal window */\n    async cancelEditing() {\n        let confirmed = true;\n        if (this.formValues && Object.keys(this.formValues).length > 0 && typeof this._options.onClose === 'function') {\n            confirmed = await this._options.onClose();\n        }\n        if (confirmed) {\n            this.grid.getEditController()?.cancelCurrentEdit();\n            // cancel current edit is not enough when editing/cloning,\n            // we also need to reset with the original item data context to undo/reset the entire row\n            if (this._options?.modalType === 'edit' || this._options?.modalType === 'clone') {\n                this.resetCurrentRowDataContext();\n            }\n            this.grid.setActiveRow(this._lastActiveRowNumber);\n            this.dispose();\n        }\n    }\n    /** Show a Validation Summary text (as a <div>) when a validation fails or simply hide it when there's no error */\n    showValidationSummaryText(isShowing, errorMsg = '') {\n        if (isShowing && errorMsg !== '') {\n            this._modalBodyTopValidationElm.textContent = errorMsg;\n            this._modalBodyTopValidationElm.style.display = 'block';\n            this._modalBodyTopValidationElm.scrollIntoView?.();\n            this._modalSaveButtonElm.disabled = false;\n            this._modalSaveButtonElm.classList.remove('saving');\n        }\n        else {\n            this._modalBodyTopValidationElm.style.display = 'none';\n            this._modalBodyTopValidationElm.textContent = errorMsg;\n        }\n    }\n    // --\n    // protected methods\n    // ----------------\n    /** Apply Mass Update Changes (form values) to the entire dataset */\n    applySaveMassUpdateChanges(formValues, _selection, applyToDataview = true) {\n        // not applying to dataView means that we're doing a preview of dataset and we should use a deep copy of it instead of applying changes directly to it\n        const data = applyToDataview ? this.dataView.getItems() : extend(true, [], this.dataView.getItems());\n        // from the \"lastCompositeEditor\" object that we kept as reference, it contains all the changes inside the \"formValues\" property\n        // we can loop through these changes and apply them on the selected row indexes\n        Object.keys(formValues).forEach((itemProp) => {\n            if (itemProp in formValues) {\n                data.forEach((dataContext) => {\n                    // prettier-ignore\n                    if (itemProp in formValues && (this._options?.validateMassUpdateChange === undefined || this._options.validateMassUpdateChange(itemProp, dataContext, formValues) !== false)) {\n                        dataContext[itemProp] = formValues[itemProp];\n                    }\n                });\n            }\n        });\n        // change the entire dataset with our updated dataset\n        if (applyToDataview) {\n            this.dataView.setItems(data, this.gridOptions.datasetIdPropertyName);\n            this.grid.invalidate();\n        }\n        return data;\n    }\n    /** Apply Mass Changes to the Selected rows in the grid (form values) */\n    applySaveMassSelectionChanges(formValues, selection, applyToDataview = true) {\n        const selectedItemIds = selection?.dataContextIds ?? [];\n        const selectedTmpItems = selectedItemIds.map((itemId) => this.dataView.getItemById(itemId));\n        // not applying to dataView means that we're doing a preview of dataset and we should use a deep copy of it instead of applying changes directly to it\n        const selectedItems = applyToDataview ? selectedTmpItems : extend(true, [], selectedTmpItems);\n        // from the \"lastCompositeEditor\" object that we kept as reference, it contains all the changes inside the \"formValues\" property\n        // we can loop through these changes and apply them on the selected row indexes\n        Object.keys(formValues).forEach((itemProp) => {\n            if (itemProp in formValues) {\n                selectedItems.forEach((dataContext) => {\n                    // prettier-ignore\n                    if (itemProp in formValues && (this._options?.validateMassUpdateChange === undefined || this._options.validateMassUpdateChange(itemProp, dataContext, formValues) !== false)) {\n                        dataContext[itemProp] = formValues[itemProp];\n                    }\n                });\n            }\n        });\n        // update all items in the grid with the grid service\n        if (applyToDataview) {\n            this.gridService?.updateItems(selectedItems);\n        }\n        return selectedItems;\n    }\n    /**\n     * Auto-Calculate how many columns to display in the view layout (1, 2, or 3).\n     * We'll display a 1 column layout for 8 or less Editors, 2 columns layout for less than 15 Editors or 3 columns when more than 15 Editors\n     * @param {number} editorCount - how many Editors do we have in total\n     * @returns {number} count - calculated column count (1, 2 or 3)\n     */\n    autoCalculateLayoutColumnCount(editorCount) {\n        if (editorCount >= 15) {\n            return 3;\n        }\n        else if (editorCount >= 8) {\n            return 2;\n        }\n        return 1;\n    }\n    /**\n     * Create a reset button for each editor and attach a button click handler\n     * @param {String} columnId - column id\n     * @returns {Object} - html button\n     */\n    createEditorResetButtonElement(columnId) {\n        const resetButtonElm = createDomElement('button', {\n            type: 'button',\n            name: columnId,\n            ariaLabel: 'Reset',\n            title: this._options?.labels?.resetFormButton ?? 'Reset Form Input',\n            className: 'btn btn-xs btn-editor-reset',\n        });\n        if (this._options?.resetEditorButtonCssClass) {\n            const resetBtnClasses = classNameToList(this._options?.resetEditorButtonCssClass);\n            for (const cssClass of resetBtnClasses) {\n                resetButtonElm.classList.add(cssClass);\n            }\n        }\n        return resetButtonElm;\n    }\n    /**\n     * Create a form reset button and attach a button click handler\n     * @param {String} columnId - column id\n     * @returns {Object} - html button\n     */\n    createFormResetButtonElement() {\n        const resetButtonContainerElm = createDomElement('div', { className: 'reset-container' });\n        const resetButtonElm = createDomElement('button', { type: 'button', className: 'btn btn-sm reset-form' }, resetButtonContainerElm);\n        createDomElement('span', { className: this._options?.resetFormButtonIconCssClass ?? '' }, resetButtonElm);\n        resetButtonElm.appendChild(document.createTextNode(' Reset Form'));\n        return resetButtonContainerElm;\n    }\n    /**\n     * Execute the onError callback when defined\n     * or use the default onError callback which is to simply display the error in the console\n     */\n    executeOnError(error) {\n        const onError = this._options?.onError ?? DEFAULT_ON_ERROR;\n        onError(error);\n    }\n    /**\n     * A simple and generic method to execute the \"OnSave\" callback if it's defined by the user OR else simply execute built-in apply changes callback.\n     * This method deals with multiple callbacks as shown below\n     * @param {Function} applyChangesCallback - first callback to apply the changes into the grid (this could be a user custom callback)\n     * @param {Function} executePostCallback - second callback to execute right after the \"onSave\"\n     * @param {Function} beforeClosingCallback - third and last callback to execute after Saving but just before closing the modal window\n     * @param {Object} itemDataContext - item data context when modal type is (create/clone/edit)\n     */\n    async executeOnSave(applyChangesCallback, executePostCallback, beforeClosingCallback, itemDataContext) {\n        try {\n            this.showValidationSummaryText(false, '');\n            const validationResults = this.validateCompositeEditors();\n            if (validationResults.valid) {\n                this._modalSaveButtonElm.classList.add('saving');\n                this._modalSaveButtonElm.disabled = true;\n                if (typeof this._options?.onSave === 'function') {\n                    const isMassChange = this._options.modalType === 'mass-update' || this._options.modalType === 'mass-selection';\n                    // apply the changes in the grid early when that option is enabled (that is before the await of `onSave`)\n                    let updatedDataset;\n                    if (isMassChange && this._options?.shouldPreviewMassChangeDataset) {\n                        updatedDataset = applyChangesCallback(this.formValues, this.getCurrentRowSelections(), false);\n                    }\n                    // call the custon onSave callback when defined and note that the item data context will only be filled for create/clone/edit\n                    const dataContextOrUpdatedDatasetPreview = isMassChange ? updatedDataset : itemDataContext;\n                    const successful = await this._options?.onSave(this.formValues, this.getCurrentRowSelections(), dataContextOrUpdatedDatasetPreview);\n                    if (successful) {\n                        // apply the changes in the grid (if it's not yet applied)\n                        applyChangesCallback(this.formValues, this.getCurrentRowSelections());\n                        // once we're done doing the mass update, we can cancel the current editor since we don't want to add any new row\n                        // that will also destroy/close the modal window\n                        executePostCallback();\n                    }\n                }\n                else {\n                    applyChangesCallback(this.formValues, this.getCurrentRowSelections());\n                    executePostCallback();\n                }\n                // run any function before closing the modal\n                if (typeof beforeClosingCallback === 'function') {\n                    beforeClosingCallback();\n                }\n                // close the modal only when successful\n                this.dispose();\n            }\n        }\n        catch (error) {\n            const errorMsg = typeof error === 'string' ? error : (error?.message ?? error?.body?.message ?? '');\n            this.showValidationSummaryText(true, errorMsg);\n        }\n    }\n    // For the Composite Editor to work, the current active cell must have an Editor (because it calls editActiveCell() and that only works with a cell with an Editor)\n    // so if current active cell doesn't have an Editor, we'll find the first column with an Editor and focus on it (from left to right starting at index 0)\n    focusOnFirstColumnCellWithEditor(columns, dataContext, columnIndex, rowIndex, isWithMassChange) {\n        // make sure we're not trying to activate a cell outside of the grid, that can happen when using MassUpdate without `enableAddRow` flag enabled\n        const activeCellIndex = isWithMassChange && !this.gridOptions.enableAddRow && rowIndex >= this.dataViewLength ? this.dataViewLength - 1 : rowIndex;\n        let columnIndexWithEditor = columnIndex;\n        const cellEditor = columns[columnIndex].editorClass;\n        let activeEditorCellNode = this.grid.getCellNode(activeCellIndex, columnIndex);\n        if (!cellEditor || !activeEditorCellNode || !this.getActiveCellEditor(activeCellIndex, columnIndex)) {\n            columnIndexWithEditor = this.findNextAvailableEditorColumnIndex(columns, dataContext, rowIndex, isWithMassChange);\n            if (columnIndexWithEditor === -1) {\n                this.executeOnError({\n                    type: 'error',\n                    code: 'NO_EDITOR_FOUND',\n                    message: 'We could not find any Editor in your Column Definition',\n                });\n                return false;\n            }\n            else {\n                this.grid.setActiveCell(activeCellIndex, columnIndexWithEditor, false);\n                if (isWithMassChange) {\n                    // when it's a mass change, we'll activate the last row without scrolling to it\n                    // that is possible via the 3rd argument \"suppressScrollIntoView\" set to \"true\"\n                    this.grid.setActiveRow(this.dataViewLength, columnIndexWithEditor, true);\n                }\n            }\n        }\n        // check again if the cell node is now being created, if it is then we're good\n        activeEditorCellNode = this.grid.getCellNode(activeCellIndex, columnIndexWithEditor);\n        return !!activeEditorCellNode;\n    }\n    findNextAvailableEditorColumnIndex(columns, dataContext, rowIndex, isWithMassUpdate) {\n        let columnIndexWithEditor = -1;\n        for (let colIndex = 0; colIndex < columns.length; colIndex++) {\n            const col = columns[colIndex];\n            if (col.editorClass && (!isWithMassUpdate || (isWithMassUpdate && col.editor?.massUpdate))) {\n                // we can check that the cell is really editable by checking the onBeforeEditCell event not returning false (returning undefined, null also mean it is editable)\n                const isCellEditable = this.grid.onBeforeEditCell\n                    .notify({\n                    row: rowIndex,\n                    cell: colIndex,\n                    item: dataContext,\n                    column: col,\n                    grid: this.grid,\n                    target: 'composite',\n                    compositeEditorOptions: this._compositeOptions,\n                })\n                    .getReturnValue();\n                this.grid.setActiveCell(rowIndex, colIndex, false);\n                if (isCellEditable !== false) {\n                    columnIndexWithEditor = colIndex;\n                    break;\n                }\n            }\n        }\n        return columnIndexWithEditor;\n    }\n    /**\n     * Get a column definition by providing a column id OR a column definition.\n     * If the input is a string, we'll assume it's a columnId and we'll simply search for the column in the column definitions list\n     */\n    getColumnByObjectOrId(columnIdOrDef) {\n        let column;\n        if (typeof columnIdOrDef === 'object') {\n            column = columnIdOrDef;\n        }\n        else if (typeof columnIdOrDef === 'string') {\n            column = this._columnDefinitions.find((col) => col.id === columnIdOrDef);\n        }\n        return column;\n    }\n    getActiveCellEditor(row, cell) {\n        this.grid.setActiveCell(row, cell, false);\n        return this.grid.getCellEditor();\n    }\n    /**\n     * Get the column label, the label might have an optional \"columnGroup\" (or \"columnGroupKey\" which need to be translated)\n     * @param {object} columnDef - column definition\n     * @returns {string} label - column label\n     */\n    getColumnLabel(columnDef) {\n        const columnGroupSeparator = this.gridOptions.columnGroupSeparator || ' - ';\n        let columnName = columnDef.nameCompositeEditor || columnDef.name || '';\n        let columnGroup = columnDef.columnGroup || '';\n        if (this.gridOptions.enableTranslate && this.translaterService) {\n            const translationKey = columnDef.nameCompositeEditorKey || columnDef.nameKey;\n            if (translationKey) {\n                columnName = this.translaterService.translate(translationKey);\n            }\n            if (columnDef.columnGroupKey && this.translaterService?.translate) {\n                columnGroup = this.translaterService.translate(columnDef.columnGroupKey);\n            }\n        }\n        const columnLabel = columnGroup ? `${columnGroup}${columnGroupSeparator}${columnName}` : columnName;\n        return getHtmlStringOutput(columnLabel, 'innerHTML');\n    }\n    /** Get the correct label text depending, if we use a Translater Service then translate the text when possible else use default text */\n    getLabelText(labelProperty, localeText, defaultText) {\n        const textLabels = { ...this.gridOptions.compositeEditorOptions?.labels, ...this._options?.labels };\n        if (this.gridOptions?.enableTranslate &&\n            this.translaterService?.translate &&\n            textLabels.hasOwnProperty(`${labelProperty}Key`)) {\n            const translationKey = textLabels[`${labelProperty}Key`];\n            return this.translaterService.translate(translationKey || '');\n        }\n        return textLabels?.[labelProperty] ?? this._locales?.[localeText] ?? defaultText;\n    }\n    /** Retrieve the current selection of row indexes & data context Ids */\n    getCurrentRowSelections() {\n        const dataContextIds = this.dataView.getAllSelectedIds();\n        const gridRowIndexes = this.dataView.mapIdsToRows(dataContextIds);\n        return { gridRowIndexes, dataContextIds };\n    }\n    handleBodyClicked(event) {\n        if (event.target?.classList?.contains('slick-editor-modal')) {\n            if (this._options?.backdrop !== 'static') {\n                this.dispose();\n            }\n        }\n    }\n    handleKeyDown(event) {\n        if (event.code === 'Escape') {\n            this.cancelEditing();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n        else if (event.code === 'Tab') {\n            this.validateCurrentEditor();\n        }\n    }\n    handleResetInputValue(event) {\n        const columnId = event.target.name;\n        const editor = this._editors?.[columnId];\n        if (typeof editor?.reset === 'function') {\n            editor.reset();\n        }\n        delete this._formValues?.[columnId];\n    }\n    /** Callback which processes a Mass Update or Mass Selection Changes */\n    async handleMassSaving(modalType, executePostCallback) {\n        if (!this.formValues || Object.keys(this.formValues).length === 0) {\n            this.executeOnError({ type: 'warning', code: 'NO_CHANGES_DETECTED', message: 'Sorry we could not detect any changes.' });\n        }\n        else {\n            const applyCallbackFnName = modalType === 'mass-update' ? 'applySaveMassUpdateChanges' : 'applySaveMassSelectionChanges';\n            this.executeOnSave(this[applyCallbackFnName].bind(this), executePostCallback.bind(this));\n        }\n    }\n    /** Anytime an input of the Composite Editor form changes, we'll add/remove a \"modified\" CSS className for styling purposes */\n    handleOnCompositeEditorChange(_e, args) {\n        const columnId = args.column?.id ?? '';\n        this._formValues = { ...this._formValues, ...args.formValues };\n        const editor = this._editors?.[columnId];\n        const isEditorValueTouched = editor?.isValueTouched?.() ?? editor?.isValueChanged?.() ?? false;\n        this._itemDataContext = editor?.dataContext ?? {}; // keep reference of the item data context\n        // add extra css styling to the composite editor input(s) that got modified\n        const editorElm = this._modalElm.querySelector(`[data-editorid='${columnId}']`);\n        if (editorElm?.classList) {\n            if (isEditorValueTouched) {\n                editorElm.classList.add('modified');\n            }\n            else {\n                editorElm.classList.remove('modified');\n            }\n        }\n        // after any input changes we'll re-validate all fields\n        this.validateCompositeEditors();\n    }\n    /** Check wether the grid has the Row Selection enabled */\n    hasRowSelectionEnabled() {\n        const selectionModel = this.grid.getSelectionModel();\n        const isRowSelectionEnabled = this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector;\n        return !!(isRowSelectionEnabled && selectionModel);\n    }\n    /** Reset Form button handler */\n    handleResetFormClicked() {\n        for (const columnId of Object.keys(this._editors)) {\n            const editor = this._editors[columnId];\n            if (editor?.reset) {\n                editor.reset();\n            }\n        }\n        this._formValues = emptyObject(this._formValues);\n    }\n    /** switch case handler to determine which code to execute depending on the modal type */\n    async handleSaveClicked() {\n        const modalType = this._options?.modalType;\n        switch (modalType) {\n            case 'mass-update':\n                this.handleMassSaving(modalType, () => {\n                    this.grid.getEditController()?.cancelCurrentEdit();\n                    this.grid.setActiveCell(0, 0, false);\n                    if (this._options.shouldClearRowSelectionAfterMassAction) {\n                        this.grid.setSelectedRows([]);\n                    }\n                });\n                break;\n            case 'mass-selection':\n                this.handleMassSaving(modalType, () => {\n                    this.grid.getEditController()?.cancelCurrentEdit();\n                    this.grid.setActiveRow(this._lastActiveRowNumber);\n                    if (this._options.shouldClearRowSelectionAfterMassAction) {\n                        this.grid.setSelectedRows([]);\n                    }\n                });\n                break;\n            case 'clone':\n                // the clone object will be a merge of the selected data context (original object) with the changed form values\n                const clonedItemDataContext = { ...this._originalDataContext, ...this.formValues };\n                // post save callback (before closing modal)\n                const postSaveCloneCallback = () => {\n                    this.grid.getEditController()?.cancelCurrentEdit();\n                    this.grid.setActiveCell(0, 0, false);\n                };\n                // call the onSave execution and provide the item data context so that it's available to the user\n                this.executeOnSave(this.insertNewItemInDataView.bind(this, clonedItemDataContext), postSaveCloneCallback, this.resetCurrentRowDataContext.bind(this), clonedItemDataContext);\n                break;\n            case 'create':\n            case 'edit':\n            default:\n                // commit the changes into the grid\n                // if it's a \"create\" then it will triggered the \"onAddNewRow\" event which will in term push it to the grid\n                // while an \"edit\" will simply applies the changes directly on the same row\n                let isFormValid = this.grid.getEditController()?.commitCurrentEdit();\n                // if the user provided the \"onSave\" callback, let's execute it with the item data context\n                if (isFormValid && typeof this._options?.onSave === 'function') {\n                    const itemDataContext = modalType === 'create'\n                        ? this._originalDataContext // the inserted item was previously assigned to this ref when \"onAddNewRow\" is triggered\n                        : this.grid.getDataItem(this._lastActiveRowNumber); // for clone, we can get item data context directly from DataView\n                    isFormValid = await this._options?.onSave(this.formValues, this.getCurrentRowSelections(), itemDataContext);\n                }\n                if (isFormValid) {\n                    this.dispose(); // when the form is valid, we can close the modal\n                }\n                break;\n        }\n    }\n    /** Insert an item into the DataView or throw an error when finding duplicate id in the dataset */\n    insertNewItemInDataView(item) {\n        const fullDatasetLength = this.dataView?.getItemCount() || 0;\n        const newId = this._options.insertNewId ?? fullDatasetLength + 1;\n        item[this.gridOptions.datasetIdPropertyName || 'id'] = newId;\n        if (!this.dataView.getItemById(newId)) {\n            this.gridService?.addItem(item, this._options.insertOptions);\n        }\n        else {\n            this.executeOnError({\n                type: 'error',\n                code: 'ITEM_ALREADY_EXIST',\n                message: `The item object which you are trying to add already exist with the same Id:: ${newId}`,\n            });\n        }\n        return item;\n    }\n    parseText(inputText, mappedArgs) {\n        return inputText.replace(/\\{\\{(.*?)\\}\\}/g, (match, group) => {\n            return mappedArgs[group] !== undefined ? mappedArgs[group] : match;\n        });\n    }\n    /** Put back the current row to its original item data context using the DataView without triggering a change */\n    resetCurrentRowDataContext() {\n        const idPropName = this.gridOptions.datasetIdPropertyName || 'id';\n        const dataView = this.grid.getData();\n        dataView.updateItem(this._originalDataContext[idPropName], this._originalDataContext);\n    }\n    /** Validate all the Composite Editors that are defined in the form */\n    validateCompositeEditors(targetElm) {\n        let validationResults = { valid: true, msg: '' };\n        const currentEditor = this.grid.getCellEditor();\n        if (currentEditor) {\n            validationResults = currentEditor.validate(targetElm);\n        }\n        return validationResults;\n    }\n    /** Validate the current cell editor */\n    validateCurrentEditor() {\n        const currentEditor = this.grid.getCellEditor();\n        if (currentEditor?.validate) {\n            currentEditor.validate();\n        }\n    }\n}\n//# sourceMappingURL=slick-composite-editor.component.js.map","import { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport { SlickCustomTooltip } from '@slickgrid-universal/custom-tooltip-plugin';\nimport { SlickCompositeEditor, SlickCompositeEditorComponent } from '@slickgrid-universal/composite-editor-component';\n\nimport {\n  type AureliaGridInstance,\n  type AutocompleterOption,\n  type Column,\n  type CompositeEditorModalType,\n  type EditCommand,\n  Editors,\n  FieldType,\n  Filters,\n  formatNumber,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  type GridStateChange,\n  type LongTextEditorOption,\n  type OnCompositeEditorChangeEventArgs,\n  SlickGlobalEditorLock,\n  type SlickGrid,\n  SortComparers,\n  type VanillaCalendarOption,\n} from 'aurelia-slickgrid';\n\nimport './example30.scss'; // provide custom CSS/SASS styling\nimport COUNTRIES_COLLECTION_URL from './data/countries.json?url';\n\nconst NB_ITEMS = 500;\n\n/**\n * Check if the current item (cell) is editable or not\n * @param {*} dataContext - item data context object\n * @param {*} columnDef - column definition\n * @param {*} grid - slickgrid grid object\n * @returns {boolean} isEditable\n */\nfunction checkItemIsEditable(dataContext: any, columnDef: Column, grid: SlickGrid) {\n  const gridOptions = grid?.getOptions();\n  const hasEditor = columnDef.editor;\n  const isGridEditable = gridOptions.editable;\n  let isEditable = !!(isGridEditable && hasEditor);\n\n  if (dataContext && columnDef && gridOptions?.editable) {\n    switch (columnDef.id) {\n      case 'finish':\n        // case 'percentComplete':\n        isEditable = !!dataContext?.completed;\n        break;\n      // case 'completed':\n      // case 'duration':\n      // case 'title':\n      // case 'product':\n      // case 'origin':\n      // isEditable = dataContext.percentComplete < 50;\n      // break;\n    }\n  }\n  return isEditable;\n}\n\nconst customEditableInputFormatter: Formatter = (_row, _cell, value, columnDef, _dataContext, grid) => {\n  const gridOptions = grid.getOptions() as GridOption;\n  const isEditableLine = gridOptions.editable && columnDef.editor;\n  value = (value === null || value === undefined) ? '' : value;\n  return isEditableLine ? { text: value, addClasses: 'editable-field', toolTip: 'Click to Edit' } : value;\n};\n\n// you can create custom validator to pass to an inline editor\nconst myCustomTitleValidator = (value: any, args: any) => {\n  if ((value === null || value === undefined || !value.length) && (args.compositeEditorOptions && args.compositeEditorOptions.modalType === 'create' || args.compositeEditorOptions.modalType === 'edit')) {\n    // we will only check if the field is supplied when it's an inline editing OR a composite editor of type create/edit\n    return { valid: false, msg: 'This is a required field.' };\n  } else if (!/^(task\\s\\d+)*$/i.test(value)) {\n    return { valid: false, msg: 'Your title is invalid, it must start with \"Task\" followed by a number.' };\n  }\n  return { valid: true, msg: '' };\n};\n\nexport class Example30 {\n  private _darkMode = false;\n  title = 'Example 30: Composite Editor Modal';\n  subTitle = `Composite Editor allows you to Create, Clone, Edit, Mass Update & Mass Selection Changes inside a nice Modal Window.\n  <br>The modal is simply populated by looping through your column definition list and also uses a lot of the same logic as inline editing (see <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/composite-editor-modal\" target=\"_blank\">Composite Editor - Wiki</a>.)`;\n\n  aureliaGrid!: AureliaGridInstance;\n  compositeEditorInstance: SlickCompositeEditorComponent;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  editQueue: any[] = [];\n  editedItems: any = {};\n  hideSubTitle = false;\n  isGridEditable = true;\n  isCompositeDisabled = false;\n  isMassSelectionDisabled = true;\n  cellCssStyleQueue: string[] = [];\n  complexityLevelList = [\n    { value: 0, label: 'Very Simple' },\n    { value: 1, label: 'Simple' },\n    { value: 2, label: 'Straightforward' },\n    { value: 3, label: 'Complex' },\n    { value: 4, label: 'Very Complex' },\n  ];\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient))) {\n    this.compositeEditorInstance = new SlickCompositeEditorComponent();\n  }\n\n  created() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrids();\n  }\n\n  attached() {\n    // mock some data (different in each dataset)\n    this.dataset = this.loadData(NB_ITEMS);\n  }\n\n  detaching() {\n    document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n    document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n  }\n\n  /* Define grid Options and Columns */\n  defineGrids() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: '<span title=\"Task must always be followed by a number\" class=\"text-warning mdi mdi-alert-outline\"></span> Title <span title=\"Title is always rendered as UPPERCASE\" class=\"mdi mdi-information-outline\"></span>',\n        field: 'title', sortable: true, type: FieldType.string, minWidth: 75,\n        cssClass: 'text-uppercase fw-bold', columnGroup: 'Common Factor',\n        filterable: true, filter: { model: Filters.compoundInputText },\n        editor: {\n          model: Editors.longText, massUpdate: false, required: true, alwaysSaveOnEnterKey: true,\n          maxLength: 12,\n          editorOptions: {\n            cols: 45,\n            rows: 6,\n            buttonTexts: {\n              cancel: 'Close',\n              save: 'Done'\n            }\n          } as LongTextEditorOption,\n          validator: myCustomTitleValidator,\n        },\n      },\n      {\n        id: 'duration', name: 'Duration', field: 'duration', sortable: true, filterable: true, minWidth: 75,\n        type: FieldType.number, columnGroup: 'Common Factor',\n        formatter: (_row, _cell, value) => {\n          if (value === null || value === undefined || value === '') {\n            return '';\n          }\n          return value > 1 ? `${value} days` : `${value} day`;\n        },\n        editor: { model: Editors.float, massUpdate: true, decimal: 2, valueStep: 1, minValue: 0, maxValue: 10000, alwaysSaveOnEnterKey: true, required: true },\n      },\n      {\n        id: 'cost', name: 'Cost', field: 'cost', width: 90, minWidth: 70,\n        sortable: true, filterable: true, type: FieldType.number, columnGroup: 'Analysis',\n        filter: { model: Filters.compoundInputNumber },\n        formatter: Formatters.dollar,\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', minWidth: 100,\n        type: FieldType.number,\n        sortable: true, filterable: true, columnGroup: 'Analysis',\n        filter: { model: Filters.compoundSlider, operator: '>=' },\n        editor: {\n          model: Editors.slider,\n          massUpdate: true, minValue: 0, maxValue: 100,\n        },\n        customTooltip: { position: 'center' }\n      },\n      // {\n      //   id: 'percentComplete2', name: '% Complete', field: 'analysis.percentComplete', minWidth: 100,\n      //   type: FieldType.number,\n      //   sortable: true, filterable: true, columnGroup: 'Analysis',\n      //   // filter: { model: Filters.compoundSlider, operator: '>=' },\n      //   formatter: Formatters.complex,\n      //   exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\n      //   editor: {\n      //     model: Editors.singleSelect,\n      //     serializeComplexValueFormat: 'flat', // if we keep \"object\" as the default it will apply { value: 2, label: 2 } which is not what we want in this case\n      //     collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k })),\n      //     collectionOptions: {\n      //       addCustomFirstEntry: { value: '', label: '--none--' }\n      //     },\n      //     collectionOverride: (_collectionInput, args) => {\n      //       const originalCollection = args.originalCollections || [];\n      //       const duration = args?.dataContext?.duration ?? args?.compositeEditorOptions?.formValues?.duration;\n      //       if (duration === 10) {\n      //         return originalCollection.filter(itemCollection => +itemCollection.value !== 1);\n      //       }\n      //       return originalCollection;\n      //     },\n      //     massUpdate: true, minValue: 0, maxValue: 100,\n      //   },\n      // },\n      {\n        id: 'complexity', name: 'Complexity', field: 'complexity', minWidth: 100,\n        type: FieldType.number,\n        sortable: true, filterable: true, columnGroup: 'Analysis',\n        formatter: (_row, _cell, value) => this.complexityLevelList[value]?.label,\n        exportCustomFormatter: (_row, _cell, value) => this.complexityLevelList[value]?.label,\n        filter: {\n          model: Filters.multipleSelect,\n          collection: this.complexityLevelList\n        },\n        editor: {\n          model: Editors.singleSelect,\n          collection: this.complexityLevelList,\n          massUpdate: true\n        },\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', sortable: true, minWidth: 100,\n        formatter: Formatters.dateUs, columnGroup: 'Period',\n        exportCustomFormatter: Formatters.dateUs,\n        type: FieldType.date, outputType: FieldType.dateUs, saveOutputType: FieldType.dateUtc,\n        filterable: true, filter: { model: Filters.compoundDate },\n        editor: { model: Editors.date, massUpdate: true, editorOptions: { hideClearButton: false } },\n      },\n      {\n        id: 'completed', name: 'Completed', field: 'completed', width: 80, minWidth: 75, maxWidth: 100,\n        sortable: true, filterable: true, columnGroup: 'Period',\n        cssClass: 'text-center', formatter: Formatters.checkmarkMaterial,\n        exportWithFormatter: false,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        },\n        editor: { model: Editors.checkbox, massUpdate: true, },\n        // editor: { model: Editors.singleSelect, collection: [{ value: true, label: 'Yes' }, { value: false, label: 'No' }], },\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish', sortable: true, minWidth: 100,\n        formatter: Formatters.dateUs, columnGroup: 'Period',\n        type: FieldType.date, outputType: FieldType.dateUs, saveOutputType: FieldType.dateUtc,\n        filterable: true, filter: { model: Filters.compoundDate },\n        exportCustomFormatter: Formatters.dateUs,\n        editor: {\n          model: Editors.date,\n          editorOptions: {\n            range: { min: 'today' },\n\n            // if we want to preload the date picker with a different date,\n            // we could do it by assigning settings.seleted.dates\n            // NOTE: vanilla-calendar doesn't automatically focus the picker to the year/month and you need to do it yourself\n            // selected: {\n            //   dates: ['2021-06-04'],\n            //   month: 6 - 1, // Note: JS Date month (only) is zero index based, so June is 6-1 => 5\n            //   year: 2021\n            // }\n          } as VanillaCalendarOption,\n          massUpdate: true,\n          validator: (value, args) => {\n            const dataContext = args?.item;\n            if (dataContext && (dataContext.completed && !value)) {\n              return { valid: false, msg: 'You must provide a \"Finish\" date when \"Completed\" is checked.' };\n            }\n            return { valid: true, msg: '' };\n          }\n        },\n      },\n      {\n        id: 'product', name: 'Product', field: 'product',\n        filterable: true, columnGroup: 'Item',\n        minWidth: 100,\n        exportWithFormatter: true,\n        dataKey: 'id',\n        labelKey: 'itemName',\n        formatter: Formatters.complexObject,\n        exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\n        type: FieldType.object,\n        sortComparer: SortComparers.objectString,\n        editor: {\n          model: Editors.autocompleter,\n          alwaysSaveOnEnterKey: true,\n          massUpdate: true,\n\n          // example with a Remote API call\n          editorOptions: {\n            minLength: 1,\n            fetch: (searchTerm: string, callback: (items: false | any[]) => void) => {\n              const products = this.mockProducts();\n              callback(products.filter(product => product.itemName.toLowerCase().includes(searchTerm.toLowerCase())));\n            },\n            renderItem: {\n              // layout: 'twoRows',\n              // templateCallback: (item: any) => this.renderItemCallbackWith2Rows(item),\n\n              layout: 'fourCorners',\n              templateCallback: (item: any) => this.renderItemCallbackWith4Corners(item),\n            },\n          } as AutocompleterOption,\n        },\n        filter: {\n          model: Filters.inputText,\n          // placeholder: '🔎︎ search product',\n          type: FieldType.string,\n          queryField: 'product.itemName',\n        }\n      },\n      {\n        id: 'origin', name: 'Country of Origin', field: 'origin',\n        formatter: Formatters.complexObject, columnGroup: 'Item',\n        exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\n        dataKey: 'code',\n        labelKey: 'name',\n        type: FieldType.object,\n        sortComparer: SortComparers.objectString,\n        filterable: true,\n        sortable: true,\n        minWidth: 100,\n        editor: {\n          model: Editors.autocompleter,\n          massUpdate: true,\n          customStructure: { label: 'name', value: 'code' },\n          collectionAsync: this.http.fetch(COUNTRIES_COLLECTION_URL),\n          editorOptions: { minLength: 0 }\n        },\n        filter: {\n          model: Filters.inputText,\n          type: 'string',\n          queryField: 'origin.name',\n        }\n      },\n      {\n        id: 'action', name: 'Action', field: 'action', width: 70, minWidth: 70, maxWidth: 70,\n        excludeFromExport: true,\n        formatter: () => `<div class=\"button-style margin-auto\" style=\"width: 35px;\"><span class=\"mdi mdi-chevron-down text-primary\"></span></div>`,\n        cellMenu: {\n          hideCloseButton: false,\n          commandTitle: 'Commands',\n          commandItems: [\n            {\n              command: 'edit',\n              title: 'Edit Row',\n              iconCssClass: 'mdi mdi-pencil',\n              positionOrder: 66,\n              action: () => this.openCompositeModal('edit'),\n            },\n            {\n              command: 'clone',\n              title: 'Clone Row',\n              iconCssClass: 'mdi mdi-content-copy',\n              positionOrder: 66,\n              action: () => this.openCompositeModal('clone'),\n            },\n            'divider',\n            {\n              command: 'delete-row', title: 'Delete Row', positionOrder: 64,\n              iconCssClass: 'mdi mdi-close color-danger', cssClass: 'red', textCssClass: 'text-italic color-danger-light',\n              // only show command to 'Delete Row' when the task is not completed\n              itemVisibilityOverride: (args) => {\n                return !args.dataContext?.completed;\n              },\n              action: (_event, args) => {\n                const dataContext = args.dataContext;\n                const row = args?.row ?? 0;\n                if (confirm(`Do you really want to delete row (${row + 1}) with \"${dataContext.title}\"`)) {\n                  this.aureliaGrid.gridService.deleteItemById(dataContext.id);\n                }\n              }\n            },\n          ],\n        }\n      },\n    ];\n\n    this.gridOptions = {\n      enableAddRow: true, // <-- this flag is required to work with the (create & clone) modal types\n      enableCellNavigation: true,\n      asyncEditorLoading: false,\n      autoEdit: true,\n      autoCommitEdit: true,\n      editable: true,\n      autoAddCustomEditorFormatter: customEditableInputFormatter,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      darkMode: this._darkMode,\n      enableAutoSizeColumns: true,\n      enableAutoResize: true,\n      showCustomFooter: true,\n      enablePagination: true,\n      pagination: {\n        pageSize: 10,\n        pageSizes: [10, 200, 250, 500, 5000]\n      },\n      enableExcelExport: true,\n      excelExportOptions: {\n        exportWithFormatter: false\n      },\n      externalResources: [new ExcelExportService(), new SlickCustomTooltip(), this.compositeEditorInstance],\n      enableFiltering: true,\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: false\n      },\n      createPreHeaderPanel: true,\n      showPreHeaderPanel: true,\n      preHeaderPanelHeight: 28,\n      enableCheckboxSelector: true,\n      enableRowSelection: true,\n      multiSelect: false,\n      checkboxSelector: {\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true,\n      },\n      enableCompositeEditor: true,\n      editCommandHandler: (item, column, editCommand) => {\n        // composite editors values are saved as array, so let's convert to array in any case and we'll loop through these values\n        const prevSerializedValues = Array.isArray(editCommand.prevSerializedValue) ? editCommand.prevSerializedValue : [editCommand.prevSerializedValue];\n        const serializedValues = Array.isArray(editCommand.serializedValue) ? editCommand.serializedValue : [editCommand.serializedValue];\n        const editorColumns = this.columnDefinitions.filter((col) => col.editor !== undefined);\n\n        const modifiedColumns: Column[] = [];\n        prevSerializedValues.forEach((_val, index) => {\n          const prevSerializedValue = prevSerializedValues[index];\n          const serializedValue = serializedValues[index];\n\n          if (prevSerializedValue !== serializedValue || serializedValue === '') {\n            const finalColumn = Array.isArray(editCommand.prevSerializedValue) ? editorColumns[index] : column;\n            this.editedItems[this.gridOptions.datasetIdPropertyName || 'id'] = item; // keep items by their row indexes, if the row got edited twice then we'll keep only the last change\n            this.aureliaGrid.slickGrid.invalidate();\n            editCommand.execute();\n\n            this.renderUnsavedCellStyling(item, finalColumn, editCommand);\n            modifiedColumns.push(finalColumn);\n          }\n        });\n\n        // queued editor only keeps 1 item object even when it's a composite editor,\n        // so we'll push only 1 change at the end but with all columns modified\n        // this way we can undo the entire row change (for example if user changes 3 field in the editor modal, then doing a undo last change will undo all 3 in 1 shot)\n        this.editQueue.push({ item, columns: modifiedColumns, editCommand });\n      },\n      // when using the cellMenu, you can change some of the default options and all use some of the callback methods\n      enableCellMenu: true,\n      cellMenu: {\n        activateCellOnMenuClick: true, // this is important to know which row index to use for Composite Editor\n      },\n      gridMenu: {\n        hideToggleDarkModeCommand: false, // hidden by default\n        onCommand: (_, args) => {\n          if (args.command === 'toggle-dark-mode') {\n            this._darkMode = !this._darkMode; // keep local toggle var in sync\n            this.toggleBodyBackground();\n          }\n        }\n      }\n    };\n  }\n\n  loadData(count: number) {\n    // mock data\n    const tmpArray: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomItemId = Math.floor(Math.random() * this.mockProducts().length);\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomFinishYear = (new Date().getFullYear()) + Math.floor(Math.random() * 10); // use only years not lower than 3 years ago\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomTime = Math.floor((Math.random() * 59));\n      const randomFinish = new Date(randomFinishYear, (randomMonth + 1), randomDay, randomTime, randomTime, randomTime);\n      const randomPercentComplete = Math.floor(Math.random() * 100) + 15; // make it over 15 for E2E testing purposes\n      const percentCompletion = randomPercentComplete > 100 ? (i > 5 ? 100 : 88) : randomPercentComplete; // don't use 100 unless it's over index 5, for E2E testing purposes\n      const isCompleted = percentCompletion === 100;\n\n      tmpArray[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.floor(Math.random() * 100) + 10,\n        percentComplete: percentCompletion,\n        analysis: {\n          percentComplete: percentCompletion,\n        },\n        complexity: i % 3 ? 0 : 2,\n        start: new Date(randomYear, randomMonth, randomDay, randomDay, randomTime, randomTime, randomTime),\n        finish: (isCompleted || (i % 3 === 0 && (randomFinish > new Date() && i > 3)) ? (isCompleted ? new Date() : randomFinish) : ''), // make sure the random date is earlier than today and it's index is bigger than 3\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\n        completed: (isCompleted && i > 5) || (i % 3 === 0 && randomFinish > new Date() && i > 3),\n        product: { id: this.mockProducts()[randomItemId]?.id, itemName: this.mockProducts()[randomItemId]?.itemName, },\n        origin: (i % 2) ? { code: 'CA', name: 'Canada' } : { code: 'US', name: 'United States' },\n      };\n\n      if (!(i % 8)) {\n        delete tmpArray[i].finish; // also test with undefined properties\n        delete tmpArray[i].percentComplete; // also test with undefined properties\n      }\n    }\n    return tmpArray;\n  }\n\n  // --\n  // event handlers\n  // ---------------\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  handleValidationError(e: Event, args: any) {\n    if (args.validationResults) {\n      let errorMsg = args.validationResults.msg || '';\n      if (args.editor && (args.editor instanceof SlickCompositeEditor)) {\n        if (args.validationResults.errors) {\n          errorMsg += '\\n';\n          for (const error of args.validationResults.errors) {\n            const columnName = error.editor.args.column.name;\n            errorMsg += `${columnName.toUpperCase()}: ${error.msg}`;\n          }\n        }\n        console.log(errorMsg);\n      }\n    } else {\n      alert(args.validationResults.msg);\n    }\n    e.preventDefault(); // OR eventData.preventDefault();\n    return false;\n  }\n\n  handleItemDeleted(itemId: string) {\n    console.log('item deleted with id:', itemId);\n  }\n\n  handleOnBeforeEditCell(e: Event, args: any) {\n    const { column, item, grid } = args;\n\n    if (column && item) {\n      if (!checkItemIsEditable(item, column, grid)) {\n        e.preventDefault(); // OR eventData.preventDefault();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  handleOnCellChange(_e: Event, args: any) {\n    const dataContext = args?.item;\n\n    // when the field \"completed\" changes to false, we also need to blank out the \"finish\" date\n    if (dataContext && !dataContext.completed) {\n      dataContext.finish = null;\n      this.aureliaGrid.gridService.updateItem(dataContext);\n    }\n  }\n\n  handleOnCellClicked(e: Event, args: any) {\n    console.log(e, args);\n    // if (eventData.target.classList.contains('mdi-help-circle-outline')) {\n    //   alert('please HELP!!!');\n    // } else if (eventData.target.classList.contains('mdi-chevron-down')) {\n    //   alert('do something else...');\n    // }\n  }\n\n  handleOnCompositeEditorChange(_e: Event, args: OnCompositeEditorChangeEventArgs) {\n    const columnDef = args.column;\n    const formValues = args.formValues;\n\n    // you can dynamically change a select dropdown collection,\n    // if you need to re-render the editor for the list to be reflected\n    // if (columnDef.id === 'duration') {\n    //   const editor = this.compositeEditorInstance.editors['percentComplete2'] as SelectEditor;\n    //   const newCollection = editor.finalCollection;\n    //   editor.renderDomElement(newCollection);\n    // }\n\n    // you can change any other form input values when certain conditions are met\n    if (columnDef.id === 'percentComplete' && formValues.percentComplete === 100) {\n      this.compositeEditorInstance.changeFormInputValue('completed', true);\n      this.compositeEditorInstance.changeFormInputValue('finish', new Date());\n      // this.compositeEditorInstance.changeFormInputValue('product', { id: 0, itemName: 'Sleek Metal Computer' });\n\n      // you can even change a value that is not part of the form (but is part of the grid)\n      // but you will have to bypass the error thrown by providing `true` as the 3rd argument\n      // this.compositeEditorInstance.changeFormInputValue('cost', 9999.99, true);\n    }\n\n    // you can also change some editor options\n    // not all Editors supports this functionality, so far only these Editors are supported are: Date, Single/Multiple Select, Slider\n    /*\n    if (columnDef.id === 'completed') {\n      this.compositeEditorInstance.changeFormEditorOption('complexity', 'filter', true); // multiple-select dropdown editor\n      this.compositeEditorInstance.changeFormEditorOption('percentComplete', 'hideSliderNumber', formValues['completed']); // slider editor\n      this.compositeEditorInstance.changeFormEditorOption('finish', 'range', { min: 'today' }); // calendar picker, change minDate to today\n    }\n    */\n  }\n\n  handleReRenderUnsavedStyling() {\n    this.removeAllUnsavedStylingFromCell();\n    this.renderUnsavedStylingOnAllVisibleCells();\n  }\n\n  handleOnGridStateChanged(gridStateChanges: GridStateChange) {\n    if (Array.isArray(gridStateChanges.gridState?.rowSelection?.dataContextIds)) {\n      this.isMassSelectionDisabled = gridStateChanges.gridState?.rowSelection?.dataContextIds.length === 0;\n    }\n  }\n\n  openCompositeModal(modalType: CompositeEditorModalType) {\n    // open the editor modal and we can also provide a header title with optional parsing pulled from the dataContext, via template {{ }}\n    // for example {{title}} => display the item title, or even complex object works {{product.itemName}} => display item product name\n\n    let modalTitle = '';\n    switch (modalType) {\n      case 'create':\n        modalTitle = 'Inserting New Task';\n        break;\n      case 'clone':\n        modalTitle = 'Clone - {{title}}';\n        break;\n      case 'edit':\n        modalTitle = 'Editing - {{title}} (<span class=\"text-muted\">id:</span> <span class=\"text-primary\">{{id}}</span>)'; // 'Editing - {{title}} ({{product.itemName}})'\n        break;\n      case 'mass-update':\n        modalTitle = 'Mass Update All Records';\n        break;\n      case 'mass-selection':\n        modalTitle = 'Update Selected Records';\n        break;\n    }\n\n    this.compositeEditorInstance?.openDetails({\n      headerTitle: modalTitle,\n      modalType,\n      insertOptions: { highlightRow: false }, // disable highlight to avoid flaky tests in Cypress\n      // showCloseButtonOutside: true,\n      // backdrop: null,\n      // viewColumnLayout: 2, // responsive layout, choose from 'auto', 1, 2, or 3 (defaults to 'auto')\n      showFormResetButton: true,\n      // showResetButtonOnEachEditor: true,\n      resetFormButtonIconCssClass: 'mdi mdi-undo',\n      onClose: () => Promise.resolve(confirm('You have unsaved changes, are you sure you want to close this window?')),\n      onError: (error) => alert(error.message),\n      onRendered: (modalElm) => {\n        // Bootstrap requires extra attribute when toggling Dark Mode (data-bs-theme=\"dark\")\n        // we need to manually add this attribute  ourselve before opening the Composite Editor Modal\n        modalElm.dataset.bsTheme = this._darkMode ? 'dark' : 'light';\n      },\n      onSave: (formValues, _selection, dataContext) => {\n        const serverResponseDelay = 50;\n\n        // simulate a backend server call which will reject if the \"% Complete\" is below 50%\n        // when processing a mass update or mass selection\n        if (modalType === 'mass-update' || modalType === 'mass-selection') {\n          return new Promise((resolve, reject) => {\n            window.setTimeout(() => {\n              if (formValues.percentComplete >= 50) {\n                resolve(true);\n              } else {\n                reject('Unfortunately we only accept a minimum of 50% Completion...');\n              }\n            }, serverResponseDelay);\n          });\n        } else {\n          // also simulate a server cal for any other modal type (create/clone/edit)\n          // we'll just apply the change without any rejection from the server and\n          // note that we also have access to the \"dataContext\" which is only available for these modal\n          console.log(`${modalType} item data context`, dataContext);\n          return new Promise(resolve => window.setTimeout(() => resolve(true), serverResponseDelay));\n        }\n      }\n    });\n  }\n\n  toggleGridEditReadonly() {\n    // first need undo all edits\n    this.undoAllEdits();\n\n    // then change a single grid options to make the grid non-editable (readonly)\n    this.isGridEditable = !this.isGridEditable;\n    this.isCompositeDisabled = !this.isGridEditable;\n    if (!this.isGridEditable) {\n      this.isMassSelectionDisabled = true;\n    }\n    // dynamically change SlickGrid editable grid option\n    this.aureliaGrid.slickGrid.setOptions({ editable: this.isGridEditable });\n  }\n\n  toggleDarkMode() {\n    this._darkMode = !this._darkMode;\n    this.toggleBodyBackground();\n    this.aureliaGrid.slickGrid?.setOptions({ darkMode: this._darkMode });\n  }\n\n  toggleBodyBackground() {\n    if (this._darkMode) {\n      document.querySelector<HTMLDivElement>('.panel-wm-content')!.classList.add('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'dark';\n    } else {\n      document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n    }\n  }\n\n  removeUnsavedStylingFromCell(_item: any, column: Column, row: number) {\n    // remove unsaved css class from that cell\n    const cssStyleKey = `unsaved_highlight_${[column.id]}${row}`;\n    this.aureliaGrid.slickGrid.removeCellCssStyles(cssStyleKey);\n    const foundIdx = this.cellCssStyleQueue.findIndex(styleKey => styleKey === cssStyleKey);\n    if (foundIdx >= 0) {\n      this.cellCssStyleQueue.splice(foundIdx, 1);\n    }\n  }\n\n  removeAllUnsavedStylingFromCell() {\n    for (const cssStyleKey of this.cellCssStyleQueue) {\n      this.aureliaGrid.slickGrid.removeCellCssStyles(cssStyleKey);\n    }\n    this.cellCssStyleQueue = [];\n  }\n\n  renderUnsavedStylingOnAllVisibleCells() {\n    for (const lastEdit of this.editQueue) {\n      if (lastEdit) {\n        const { item, columns, editCommand } = lastEdit;\n        if (Array.isArray(columns)) {\n          columns.forEach((col) => {\n            this.renderUnsavedCellStyling(item, col, editCommand);\n          });\n        }\n      }\n    }\n  }\n\n  renderUnsavedCellStyling(item: any, column: Column, editCommand: EditCommand) {\n    if (editCommand && item && column) {\n      const row = this.aureliaGrid.dataView.getRowByItem(item) as number;\n      if (row >= 0) {\n        const hash = { [row]: { [column.id]: 'unsaved-editable-field' } };\n        const cssStyleKey = `unsaved_highlight_${[column.id]}${row}`;\n        this.aureliaGrid.slickGrid.setCellCssStyles(`unsaved_highlight_${[column.id]}${row}`, hash);\n        this.cellCssStyleQueue.push(cssStyleKey);\n      }\n    }\n  }\n\n  saveAll() {\n    // Edit Queue (array increases every time a cell is changed, regardless of item object)\n    console.log(this.editQueue);\n\n    // Edit Items only keeps the merged data (an object with row index as the row properties)\n    // if you change 2 different cells on 2 different cells then this editedItems will only contain 1 property\n    // example: editedItems = { 0: { title: task 0, duration: 50, ... }}\n    // ...means that row index 0 got changed and the final merged object is { title: task 0, duration: 50, ... }\n    console.log(this.editedItems);\n    // console.log(`We changed ${Object.keys(this.editedItems).length} rows`);\n\n    // since we saved, we can now remove all the unsaved color styling and reset our array/object\n    this.removeAllUnsavedStylingFromCell();\n    this.editQueue = [];\n    this.editedItems = {};\n  }\n\n  undoLastEdit(showLastEditor = false) {\n    const lastEdit = this.editQueue.pop();\n    const lastEditCommand = lastEdit?.editCommand;\n    if (lastEdit && lastEditCommand && SlickGlobalEditorLock.cancelCurrentEdit()) {\n      lastEditCommand.undo();\n\n      // remove unsaved css class from that cell\n      for (const lastEditColumn of lastEdit.columns) {\n        this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\n      }\n      this.aureliaGrid.slickGrid.invalidate();\n\n\n      // optionally open the last cell editor associated\n      if (showLastEditor) {\n        this.aureliaGrid.slickGrid.gotoCell(lastEditCommand.row, lastEditCommand.cell, false);\n      }\n    }\n  }\n\n  undoAllEdits() {\n    for (const lastEdit of this.editQueue) {\n      const lastEditCommand = lastEdit?.editCommand;\n      if (lastEditCommand && SlickGlobalEditorLock.cancelCurrentEdit()) {\n        lastEditCommand.undo();\n\n        // remove unsaved css class from that cell\n        for (const lastEditColumn of lastEdit.columns) {\n          this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\n        }\n      }\n    }\n    this.aureliaGrid.slickGrid.invalidate(); // re-render the grid only after every cells got rolled back\n    this.editQueue = [];\n  }\n\n  mockProducts() {\n    return [\n      {\n        id: 0,\n        itemName: 'Sleek Metal Computer',\n        itemNameTranslated: 'some fantastic sleek metal computer description',\n        listPrice: 2100.23,\n        itemTypeName: 'I',\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\n        icon: this.getRandomIcon(0)\n      },\n      {\n        id: 1,\n        itemName: 'Tasty Granite Table',\n        itemNameTranslated: 'an extremely huge and heavy table',\n        listPrice: 3200.12,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\n        icon: this.getRandomIcon(1)\n      },\n      {\n        id: 2,\n        itemName: 'Awesome Wooden Mouse',\n        itemNameTranslated: 'super old mouse',\n        listPrice: 15.00,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\n        icon: this.getRandomIcon(2)\n      },\n      {\n        id: 3,\n        itemName: 'Gorgeous Fresh Shirt',\n        itemNameTranslated: 'what a gorgeous shirt seriously',\n        listPrice: 25.76,\n        itemTypeName: 'I',\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\n        icon: this.getRandomIcon(3)\n      },\n      {\n        id: 4,\n        itemName: 'Refined Cotton Table',\n        itemNameTranslated: 'super light table that will fall apart amazingly fast',\n        listPrice: 13.35,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\n        icon: this.getRandomIcon(4)\n      },\n      {\n        id: 5,\n        itemName: 'Intelligent Wooden Pizza',\n        itemNameTranslated: 'wood not included',\n        listPrice: 23.33,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\n        icon: this.getRandomIcon(5)\n      },\n      {\n        id: 6,\n        itemName: 'Licensed Cotton Chips',\n        itemNameTranslated: 'not sure what that is',\n        listPrice: 71.21,\n        itemTypeName: 'I',\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\n        icon: this.getRandomIcon(6)\n      },\n      {\n        id: 7,\n        itemName: 'Ergonomic Rubber Soap',\n        itemNameTranslated: `so good you'll want to use it every night`,\n        listPrice: 2.43,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\n        icon: this.getRandomIcon(7)\n      },\n      {\n        id: 8,\n        itemName: 'Handcrafted Steel Car',\n        itemNameTranslated: `aka tesla truck`,\n        listPrice: 31288.39,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\n        icon: this.getRandomIcon(8)\n      },\n    ];\n  }\n\n  /** List of icons that are supported in this lib Material Design Icons */\n  getRandomIcon(iconIndex?: number) {\n    const icons = [\n      'mdi-arrow-collapse',\n      'mdi-arrow-expand',\n      'mdi-cancel',\n      'mdi-check',\n      'mdi-checkbox-blank-outline',\n      'mdi-check-box-outline',\n      'mdi-checkbox-marked',\n      'mdi-close',\n      'mdi-close-circle',\n      'mdi-close-circle-outline',\n      'mdi-close-thick',\n      'mdi-content-copy',\n      'mdi-database-refresh',\n      'mdi-download',\n      'mdi-file-document-outline',\n      'mdi-file-excel-outline',\n      'mdi-file-music-outline',\n      'mdi-file-pdf-outline',\n      'mdi-filter-remove-outline',\n      'mdi-flip-vertical',\n      'mdi-folder',\n      'mdi-folder-open',\n      'mdi-help-circle',\n      'mdi-help-circle-outline',\n      'mdi-history',\n      'mdi-information',\n      'mdi-information-outline',\n      'mdi-link',\n      'mdi-link-variant',\n      'mdi-menu',\n      'mdi-microsoft-excel',\n      'mdi-minus',\n      'mdi-page-first',\n      'mdi-page-last',\n      'mdi-paperclip',\n      'mdi-pin-off-outline',\n      'mdi-pin-outline',\n      'mdi-playlist-plus',\n      'mdi-playlist-remove',\n      'mdi-plus',\n      'mdi-redo',\n      'mdi-refresh',\n      'mdi-shape-square-plus',\n      'mdi-sort-ascending',\n      'mdi-sort-descending',\n      'mdi-swap-horizontal',\n      'mdi-swap-vertical',\n      'mdi-sync',\n      'mdi-table-edit',\n      'mdi-table-refresh',\n      'mdi-undo',\n    ];\n    const randomNumber = Math.floor((Math.random() * icons.length - 1));\n    return icons[iconIndex ?? randomNumber];\n  }\n\n  renderItemCallbackWith2Rows(item: any): string {\n    return `<div class=\"autocomplete-container-list\">\n      <div class=\"autocomplete-left\">\n        <!--<img src=\"http://i.stack.imgur.com/pC1Tv.jpg\" width=\"50\" />-->\n        <span class=\"mdi ${item.icon}\"></span>\n      </div>\n      <div>\n        <span class=\"autocomplete-top-left\">\n          <span class=\"mdi ${item.itemTypeName === 'I' ? 'mdi-information-outline' : 'mdi-content-copy'}\"></span>\n          ${item.itemName}\n        </span>\n      <div>\n      </div>\n    <div>\n    <div class=\"autocomplete-bottom-left\">${item.itemNameTranslated}</div>\n    </div>`;\n  }\n\n  renderItemCallbackWith4Corners(item: any): string {\n    return `<div class=\"autocomplete-container-list\">\n          <div class=\"autocomplete-left\">\n            <!--<img src=\"http://i.stack.imgur.com/pC1Tv.jpg\" width=\"50\" />-->\n            <span class=\"mdi ${item.icon}\"></span>\n          </div>\n          <div>\n            <span class=\"autocomplete-top-left\">\n              <span class=\"mdi ${item.itemTypeName === 'I' ? 'mdi-information-outline' : 'mdi-content-copy'}\"></span>\n              ${item.itemName}\n            </span>\n            <span class=\"autocomplete-top-right\">${formatNumber(item.listPrice, 2, 2, false, '$')}</span>\n          <div>\n        </div>\n        <div>\n          <div class=\"autocomplete-bottom-left\">${item.itemNameTranslated}</div>\n          <span class=\"autocomplete-bottom-right\">Type: <b>${item.itemTypeName === 'I' ? 'Item' : item.itemTypeName === 'C' ? 'PdCat' : 'Cat'}</b></span>\n        </div>`;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","SlickCompositeEditor","columns","containers","options","firstInvalidEditor","noop","getContainerBox","i","offset","getOffset","width","height","editor","args","context","editors","init","newArgs","idx","column","currentEditor","tmpEditor","tmpContainer","emptyElement","_a","serializedValue","item","state","targetElm","validationResults","errors","columnDef","compositeModalElm","validationElm","labelElm","editorElm","validationMsgPrefix","_b","_c","box","DEFAULT_ON_ERROR","error","SlickCompositeEditorComponent","SlickEventHandler","BindingEventService","grid","containerService","Constants","columnIdOrDef","newValue","skipMissingEditorError","triggerOnCompositeEditorChange","columnId","outputValue","editorContainerElm","excludeDisabledFieldFormValues","_d","fieldName","objectPath","_f","setDeepValue","deepMerge","optionName","newOptionValue","isDisabled","onError","defaultOptions","viewColumnLayout","activeCell","activeColIndex","activeRow","gridUid","headerTitle","modalType","isWithMassChange","dataContext","extend","selectedRowsIndexes","fullDatasetLength","dataContextIds","rowIndex","modalColumns","col","col1","col2","val1","val2","numericSortComparer","SortDirectionNumber","parsedHeaderTitle","_match","group","getDescendantProperty","layoutColCount","createDomElement","modalContentElm","splitClassName","modalHeaderTitleElm","modalCloseButtonElm","modalHeaderElm","modalBodyElm","modalFooterElm","modalCancelButtonElm","leftFooterText","saveButtonText","footerUnparsedText","selectionUnparsedText","selectionCounterElm","footerContainerElm","itemContainer","templateItemLabelElm","templateItemEditorElm","templateItemValidationElm","editorResetButtonElm","_g","resetButtonContainerElm","compositeEditor","errorMsg","_h","errorCode","_i","confirmed","isShowing","formValues","_selection","applyToDataview","data","itemProp","selection","selectedTmpItems","itemId","selectedItems","editorCount","resetButtonElm","resetBtnClasses","classNameToList","cssClass","applyChangesCallback","executePostCallback","beforeClosingCallback","itemDataContext","isMassChange","updatedDataset","dataContextOrUpdatedDatasetPreview","columnIndex","activeCellIndex","columnIndexWithEditor","cellEditor","activeEditorCellNode","isWithMassUpdate","colIndex","isCellEditable","row","cell","columnGroupSeparator","columnName","columnGroup","translationKey","columnLabel","getHtmlStringOutput","labelProperty","localeText","defaultText","textLabels","event","applyCallbackFnName","isEditorValueTouched","selectionModel","emptyObject","clonedItemDataContext","postSaveCloneCallback","isFormValid","newId","inputText","mappedArgs","match","idPropName","_Example30_decorators","_init","NB_ITEMS","checkItemIsEditable","gridOptions","hasEditor","isEditable","customEditableInputFormatter","_row","_cell","value","_dataContext","isEditableLine","myCustomTitleValidator","customElement","__au2ViewDef","Example30","http","resolve","newInstanceOf","IHttpClient","__publicField","FieldType","Filters","Editors","Formatters","SortComparers","searchTerm","callback","products","product","COUNTRIES_COLLECTION_URL","_event","ExcelExportService","SlickCustomTooltip","editCommand","prevSerializedValues","serializedValues","editorColumns","modifiedColumns","_val","index","prevSerializedValue","finalColumn","_","count","tmpArray","randomItemId","randomYear","randomFinishYear","randomMonth","randomDay","randomTime","randomFinish","randomPercentComplete","percentCompletion","isCompleted","aureliaGrid","gridStateChanges","modalTitle","modalElm","reject","_item","cssStyleKey","foundIdx","styleKey","lastEdit","hash","showLastEditor","lastEditCommand","SlickGlobalEditorLock","lastEditColumn","iconIndex","icons","randomNumber","formatNumber","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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","x_google_ignoreList":[1,2]}