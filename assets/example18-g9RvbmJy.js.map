{"version":3,"file":"example18-g9RvbmJy.js","sources":["../../src/examples/slickgrid/example18.$au.ts","../../src/examples/slickgrid/example18.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example18\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example18.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleDarkMode()\\\" data-test=\\\"toggle-dark-mode\\\">\\n    <span class=\\\"mdi mdi-theme-light-dark\\\"></span>\\n    <span>Toggle Dark Mode</span>\\n  </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"form-inline\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"add-500-rows-btn\\\" click.trigger=\\\"loadData(500)\\\">\\n        500 rows\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"add-50k-rows-btn\\\" click.trigger=\\\"loadData(50000)\\\">\\n        50k rows\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"clear-grouping-btn\\\"\\n              click.trigger=\\\"clearGroupsAndSelects()\\\">\\n        <i class=\\\"mdi mdi-close\\\"></i> Clear grouping\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"collapse-all-btn\\\"\\n              click.trigger=\\\"collapseAllGroups()\\\">\\n        <i class=\\\"mdi mdi-arrow-collapse\\\"></i> Collapse all groups\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"expand-all-btn\\\" click.trigger=\\\"expandAllGroups()\\\">\\n        <i class=\\\"mdi mdi-arrow-expand\\\"></i> Expand all groups\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"toggle-draggable-grouping-row\\\" click.trigger=\\\"toggleDraggableGroupingRow()\\\">\\n        Toggle Draggable Grouping Row\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" click.trigger=\\\"exportToExcel()\\\">\\n        <i class=\\\"mdi mdi-file-excel-outline text-success\\\"></i> Export to Excel\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-sort-value-btn\\\"\\n              click.trigger=\\\"groupByDurationOrderByCount(false)\\\">\\n        Group by duration &amp; sort groups by value\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-sort-count-btn\\\"\\n              click.trigger=\\\"groupByDurationOrderByCount(true)\\\">\\n        Group by duration &amp; sort groups by count\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"group-duration-effort-btn\\\"\\n              click.trigger=\\\"groupByDurationEffortDriven()\\\">\\n        Group by Duration then Effort-Driven\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"set-dynamic-filter\\\"\\n              click.trigger=\\\"setFiltersDynamically()\\\">\\n        <span class=\\\"mdi mdi-filter-outline\\\"></span>\\n        <span>\\n          Set Filters Dynamically\\n        </span>\\n      </button>\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" data-test=\\\"set-dynamic-sorting\\\"\\n              click.trigger=\\\"setSortingDynamically()\\\">\\n        <span class=\\\"mdi mdi-sort-ascending\\\"></span>\\n        <span>\\n          Set Sorting Dynamically\\n        </span>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row mt-2\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <div class=\\\"form-row\\\">\\n        <div class=\\\"row form-group\\\">\\n          <label for=\\\"field1\\\" class=\\\"col-sm-3 mb-2\\\">Group by field(s)</label>\\n          <div class=\\\"form-group col-md-3 grouping-selects\\\" repeat.for=\\\"groupField of selectedGroupingFields\\\">\\n            <select class=\\\"form-select\\\" change.trigger=\\\"groupByFieldName()\\\"\\n                    value.bind=\\\"groupField\\\">\\n              <option model.bind=\\\"''\\\">...</option>\\n              <option model.bind=\\\"column.id\\\" repeat.for=\\\"column of columnDefinitions\\\">${column.name}</option>\\n            </select>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"row mt-1 mb-1\\\">\\n  <hr />\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid18\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport { TextExportService } from '@slickgrid-universal/text-export';\nimport {\n  Aggregators,\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  FileType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type GroupingGetterFunction,\n  type Grouping,\n  GroupTotalFormatters,\n  SortComparers,\n  SortDirectionNumber,\n  type SlickDataView,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\n\nexport class Example18 {\n  private _darkMode = false;\n  title = 'Example 18: Draggable Grouping & Aggregators';\n  subTitle = `\n  <ul>\n  <li><a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grouping-aggregators\" target=\"_blank\">Wiki docs</a></li>\n  <li>This example shows 3 ways of grouping</li>\n  <ol>\n  <li>Drag any Column Header on the top placeholder to group by that column (support moti-columns grouping by adding more columns to the drop area).</li>\n  <li>Use buttons and defined functions to group by whichever field you want</li>\n  <li>Use the Select dropdown to group, the position of the Selects represent the grouping level</li>\n  </ol>\n  <li>Fully dynamic and interactive multi-level grouping with filtering and aggregates ovor 50'000 items</li>\n  <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\n  <li>Use \"Aggregators\" and \"GroupTotalFormatters\" directly from Aurelia-Slickgrid</li>\n  </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  dataviewObj!: SlickDataView;\n  draggableGroupingPlugin: any;\n  durationOrderByCount = false;\n  gridObj!: SlickGrid;\n  gridOptions!: GridOption;\n  hideSubTitle = false;\n  processing = false;\n  selectedGroupingFields: Array<string | GroupingGetterFunction> = ['', '', ''];\n  excelExportService = new ExcelExportService();\n  textExportService = new TextExportService();\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.loadData(500);\n    this.defineGrid();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n    this.gridObj = aureliaGrid.slickGrid; // grid object\n    this.dataviewObj = aureliaGrid.dataView;\n  }\n\n  detaching() {\n    document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n    document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: 'Title', field: 'title', columnGroup: 'Common Factor',\n        width: 70, minWidth: 50,\n        cssClass: 'cell-title',\n        filterable: true,\n        sortable: true,\n        grouping: {\n          getter: 'title',\n          formatter: (g) => `Title: ${g.value}  <span class=\"text-primary\">(${g.count} items)</span>`,\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          aggregateCollapsed: false,\n          collapsed: false\n        }\n      },\n      {\n        id: 'duration', name: 'Duration', field: 'duration', columnGroup: 'Common Factor',\n        width: 70,\n        sortable: true,\n        filterable: true,\n        filter: { model: Filters.slider, operator: '>=' },\n        type: FieldType.number,\n        groupTotalsFormatter: GroupTotalFormatters.sumTotals,\n        grouping: {\n          getter: 'duration',\n          formatter: (g) => `Duration: ${g.value}  <span class=\"text-primary\">(${g.count} items)</span>`,\n          comparer: (a, b) => {\n            return this.durationOrderByCount ? (a.count - b.count) : SortComparers.numeric(a.value, b.value, SortDirectionNumber.asc);\n          },\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          aggregateCollapsed: false,\n          collapsed: false\n        }\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', columnGroup: 'Period',\n        minWidth: 60,\n        sortable: true,\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        type: FieldType.dateUtc,\n        outputType: FieldType.dateIso,\n        exportWithFormatter: true,\n        grouping: {\n          getter: 'start',\n          formatter: (g) => `Start: ${g.value}  <span class=\"text-primary\">(${g.count} items)</span>`,\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          aggregateCollapsed: false,\n          collapsed: false\n        }\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish', columnGroup: 'Period',\n        minWidth: 60,\n        sortable: true,\n        filterable: true,\n        filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        type: FieldType.dateUtc,\n        outputType: FieldType.dateIso,\n        exportWithFormatter: true,\n        grouping: {\n          getter: 'finish',\n          formatter: (g) => `Finish: ${g.value} <span class=\"text-primary\">(${g.count} items)</span>`,\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          aggregateCollapsed: false,\n          collapsed: false\n        }\n      },\n      {\n        id: 'cost', name: 'Cost', field: 'cost', columnGroup: 'Analysis',\n        width: 90,\n        sortable: true,\n        filterable: true,\n        filter: { model: Filters.compoundInput },\n        formatter: Formatters.dollar,\n        exportWithFormatter: true,\n        groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollar,\n        type: FieldType.number,\n        grouping: {\n          getter: 'cost',\n          formatter: (g) => `Cost: ${g.value} <span class=\"text-primary\">(${g.count} items)</span>`,\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          aggregateCollapsed: true,\n          collapsed: true\n        }\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', columnGroup: 'Analysis',\n        minWidth: 70, width: 90,\n        formatter: Formatters.percentCompleteBar,\n        type: FieldType.number,\n        filterable: true,\n        filter: { model: Filters.compoundSlider },\n        sortable: true,\n        groupTotalsFormatter: GroupTotalFormatters.avgTotalsPercentage,\n        grouping: {\n          getter: 'percentComplete',\n          formatter: (g) => `% Complete: ${g.value}  <span class=\"text-primary\">(${g.count} items)</span>`,\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          aggregateCollapsed: false,\n          collapsed: false\n        },\n        params: { groupFormatterPrefix: '<i>Avg</i>: ' }\n      },\n      {\n        id: 'effortDriven', name: 'Effort-Driven', field: 'effortDriven', columnGroup: 'Analysis',\n        width: 80, minWidth: 20, maxWidth: 100,\n        cssClass: 'cell-effort-driven',\n        sortable: true,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        },\n        formatter: Formatters.checkmarkMaterial,\n        grouping: {\n          getter: 'effortDriven',\n          formatter: (g) => `Effort-Driven: ${g.value ? 'True' : 'False'} <span class=\"text-primary\">(${g.count} items)</span>`,\n          aggregators: [\n            new Aggregators.Sum('cost')\n          ],\n          collapsed: false\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableDraggableGrouping: true,\n\n      // pre-header will include our Header Grouping (i.e. \"Common Factor\")\n      // Draggable Grouping could be located in either the Pre-Header OR the new Top-Header\n      createPreHeaderPanel: true,\n      showPreHeaderPanel: true,\n      preHeaderPanelHeight: 30,\n\n      // when Top-Header is created, it will be used by the Draggable Grouping (otherwise the Pre-Header will be used)\n      createTopHeaderPanel: true,\n      showTopHeaderPanel: true,\n      topHeaderPanelHeight: 35,\n\n      showCustomFooter: true,\n      enableFiltering: true,\n      // you could debounce/throttle the input text filter if you have lots of data\n      // filterTypingDebounce: 250,\n      enableSorting: true,\n      enableColumnReorder: true,\n      gridMenu: {\n        onCommand: (_e, args) => {\n          if (args.command === 'toggle-preheader') {\n            // in addition to the grid menu pre-header toggling (internally), we will also clear grouping\n            this.clearGrouping();\n          }\n        },\n      },\n      draggableGrouping: {\n        dropPlaceHolderText: 'Drop a column header here to group by the column',\n        // groupIconCssClass: 'mdi mdi-drag-vertical',\n        deleteIconCssClass: 'mdi mdi-close text-color-danger',\n        sortAscIconCssClass: 'mdi mdi-arrow-up',\n        sortDescIconCssClass: 'mdi mdi-arrow-down',\n        onGroupChanged: (_e, args) => this.onGroupChanged(args),\n        onExtensionRegistered: (extension) => this.draggableGroupingPlugin = extension,\n      },\n      darkMode: this._darkMode,\n      enableTextExport: true,\n      enableExcelExport: true,\n      excelExportOptions: { sanitizeDataExport: true },\n      textExportOptions: { sanitizeDataExport: true },\n      externalResources: [this.excelExportService, this.textExportService],\n    };\n  }\n\n  loadData(rowCount: number) {\n    // mock a dataset\n    const tmpData: any[] = [];\n    for (let i = 0; i < rowCount; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n      const randomCost = Math.round(Math.random() * 10000) / 100;\n\n      tmpData[i] = {\n        id: 'id_' + i,\n        num: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        cost: (i % 33 === 0) ? -randomCost : randomCost,\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = tmpData;\n  }\n\n  clearGroupsAndSelects() {\n    this.clearGroupingSelects();\n    this.clearGrouping();\n  }\n\n  clearGroupingSelects() {\n    this.selectedGroupingFields.forEach((_g, i) => this.selectedGroupingFields[i] = '');\n    this.selectedGroupingFields = [...this.selectedGroupingFields]; // force dirty checking\n  }\n\n  clearGrouping(invalidateRows = true) {\n    this.draggableGroupingPlugin?.clearDroppedGroups();\n    if (invalidateRows) {\n      this.gridObj?.invalidate(); // invalidate all rows and re-render\n    }\n  }\n\n  collapseAllGroups() {\n    this.dataviewObj.collapseAllGroups();\n  }\n\n  expandAllGroups() {\n    this.dataviewObj.expandAllGroups();\n  }\n\n  exportToExcel() {\n    this.excelExportService.exportToExcel({\n      filename: 'Export',\n      format: FileType.xlsx\n    });\n  }\n\n  groupByDurationOrderByCount(sortedByCount = false) {\n    this.durationOrderByCount = sortedByCount;\n    this.clearGrouping(false);\n\n    if (this.draggableGroupingPlugin?.setDroppedGroups) {\n      this.showPreHeader();\n      this.draggableGroupingPlugin.setDroppedGroups('duration');\n\n      // you need to manually add the sort icon(s) in UI\n      const sortColumns = sortedByCount ? [] : [{ columnId: 'duration', sortAsc: true }];\n      this.gridObj?.setSortColumns(sortColumns);\n      this.gridObj?.invalidate(); // invalidate all rows and re-render\n    }\n  }\n\n  groupByDurationEffortDriven() {\n    this.clearGrouping(false);\n    if (this.draggableGroupingPlugin?.setDroppedGroups) {\n      this.showPreHeader();\n      this.draggableGroupingPlugin.setDroppedGroups(['duration', 'effortDriven']);\n      this.gridObj?.invalidate(); // invalidate all rows and re-render\n    }\n  }\n\n  groupByFieldName() {\n    this.clearGrouping();\n    if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\n      this.showPreHeader();\n\n      // get the field names from Group By select(s) dropdown, but filter out any empty fields\n      const groupedFields = this.selectedGroupingFields.filter((g) => g !== '');\n      if (groupedFields.length === 0) {\n        this.clearGrouping();\n      } else {\n        this.draggableGroupingPlugin.setDroppedGroups(groupedFields);\n      }\n      this.gridObj.invalidate(); // invalidate all rows and re-render\n    }\n  }\n\n  onGroupChanged(change: { caller?: string; groupColumns: Grouping[] }) {\n    const caller = change?.caller ?? [];\n    const groups = change?.groupColumns ?? [];\n\n    if (Array.isArray(this.selectedGroupingFields) && Array.isArray(groups) && groups.length > 0) {\n      // update all Group By select dropdown\n      this.selectedGroupingFields.forEach((_g, i) => this.selectedGroupingFields[i] = groups[i]?.getter ?? '');\n      this.selectedGroupingFields = [...this.selectedGroupingFields]; // force dirty checking\n    } else if (groups.length === 0 && caller === 'remove-group') {\n      this.clearGroupingSelects();\n    }\n  }\n\n  showPreHeader() {\n    this.gridObj.setPreHeaderPanelVisibility(true);\n  }\n\n  setFiltersDynamically() {\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\n    this.aureliaGrid.filterService.updateFilters([\n      { columnId: 'percentComplete', operator: '>=', searchTerms: ['55'] },\n      { columnId: 'cost', operator: '<', searchTerms: ['80'] },\n    ]);\n  }\n\n  setSortingDynamically() {\n    this.aureliaGrid.sortService.updateSorting([\n      // orders matter, whichever is first in array will be the first sorted column\n      { columnId: 'percentComplete', direction: 'ASC' },\n    ]);\n  }\n\n  toggleDraggableGroupingRow() {\n    this.clearGroupsAndSelects();\n    this.gridObj.setTopHeaderPanelVisibility(!this.gridObj.getOptions().showTopHeaderPanel);\n  }\n\n  toggleDarkMode() {\n    this._darkMode = !this._darkMode;\n    this.toggleBodyBackground();\n    this.aureliaGrid.slickGrid?.setOptions({ darkMode: this._darkMode });\n  }\n\n  toggleBodyBackground() {\n    if (this._darkMode) {\n      document.querySelector<HTMLDivElement>('.panel-wm-content')!.classList.add('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'dark';\n    } else {\n      document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example18_decorators","_init","customElement","__au2ViewDef","Example18","__publicField","ExcelExportService","TextExportService","aureliaGrid","g","Aggregators","Filters","FieldType","GroupTotalFormatters","a","b","SortComparers","SortDirectionNumber","Formatters","args","extension","rowCount","tmpData","i","randomYear","randomMonth","randomDay","randomPercent","randomCost","_g","invalidateRows","_a","_b","FileType","sortedByCount","sortColumns","_c","groupedFields","change","caller","groups","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}