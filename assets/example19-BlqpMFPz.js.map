{"version":3,"file":"example19-BlqpMFPz.js","sources":["../../src/examples/slickgrid/example19.$au.ts","../../src/examples/slickgrid/example19.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example19\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n      href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example19.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleDarkMode()\\\" data-test=\\\"toggle-dark-mode\\\">\\n    <span class=\\\"mdi mdi-theme-light-dark\\\"></span>\\n    <span>Toggle Dark Mode</span>\\n  </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"changeEditableGrid()\\\" data-test=\\\"editable-grid-btn\\\">\\n      Make Grid Editable\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"closeAllRowDetail()\\\" data-test=\\\"collapse-all-btn\\\">\\n      Close all Row Details\\n    </button>\\n    &nbsp;&nbsp;\\n\\n    <span class=\\\"d-inline-flex gap-4px\\\">\\n      <label for=\\\"detailViewRowCount\\\">Detail View Rows Shown: </label>\\n      <input id=\\\"detailViewRowCount\\\" type=\\\"number\\\" value.bind=\\\"detailViewRowCount\\\" style=\\\"height: 26px; width: 40px\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-xs btn-icon\\\" style=\\\"height: 26px;\\\" click.trigger=\\\"changeDetailViewRowCount()\\\"\\n        data-test=\\\"set-count-btn\\\">\\n        Set\\n      </button>\\n      <label for=\\\"serverdelay\\\" class=\\\"ms-2\\\">Server Delay: </label>\\n        <input\\n          id=\\\"serverdelay\\\"\\n          value.bind=\\\"serverWaitDelay\\\"\\n          type=\\\"number\\\"\\n          data-test=\\\"server-delay\\\"\\n          style=\\\"height: 26px; width: 55px\\\"\\n          title=\\\"input a fake timer delay to simulate slow server response\\\"\\n        />\\n    </span>\\n  </div>\\n  <div class=\\\"alert alert-${flashAlertType} col-sm-6\\\" if.bind=\\\"message\\\" data-test=\\\"flash-msg\\\">\\n    ${message}\\n  </div>\\n</div>\\n\\n<hr />\\n\\n<aurelia-slickgrid grid-id=\\\"grid19\\\" column-definitions.bind=\\\"columnDefinitions\\\" grid-options.bind=\\\"gridOptions\\\"\\n  dataset.bind=\\\"dataset\\\" extensions.bind=\\\"extensions\\\" instances.bind=\\\"aureliaGrid\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { bindable } from 'aurelia';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  Editors,\n  ExtensionName,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n} from 'aurelia-slickgrid';\nimport { Example19Preload } from './example19-preload';\nimport { Example19DetailView } from './example19-detail-view';\n\nconst FAKE_SERVER_DELAY = 250;\nconst NB_ITEMS = 1000;\n\nexport class Example19 {\n  private _darkMode = false;\n  @bindable detailViewRowCount = 9;\n  @bindable serverWaitDelay = FAKE_SERVER_DELAY;\n\n  title = 'Example 19: Row Detail View';\n  subTitle = `\n    Add functionality to show extra information with a Row Detail View, (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/row-detail\" target=\"_blank\">Wiki docs</a>)\n    <ul>\n      <li>Click on the row \"+\" icon or anywhere on the row to open it (the latter can be changed via property \"useRowClick: false\")</li>\n      <li>Pass a View/Model as a Template to the Row Detail</li>\n      <li>You can use \"expandableOverride()\" callback to override logic to display expand icon on every row (for example only show it every 2nd row)</li>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  // extensions!: ExtensionList<any>;\n  flashAlertType = 'info';\n  hideSubTitle = false;\n  message = '';\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  get rowDetailInstance() {\n    // you can get the SlickGrid RowDetail plugin (addon) instance via 2 ways\n\n    // option 1\n    // return this.extensions.rowDetailView.instance || {};\n\n    // OR option 2\n    return this.aureliaGrid?.extensionService.getExtensionInstanceByName(ExtensionName.rowDetailView);\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData();\n  }\n\n  detaching() {\n    document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n    document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, width: 70, filterable: true, editor: { model: Editors.text } },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', formatter: Formatters.decimal, params: { minDecimal: 1, maxDecimal: 2 }, sortable: true, type: FieldType.number, minWidth: 90, filterable: true },\n      {\n        id: 'percent2', name: '% Complete', field: 'percentComplete2', editor: { model: Editors.slider },\n        formatter: Formatters.progressBar, type: FieldType.number, sortable: true, minWidth: 100, filterable: true, filter: { model: Filters.slider, operator: '>' }\n      },\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate } },\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true, filterable: true, filter: { model: Filters.compoundDate } },\n      {\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\n        minWidth: 100,\n        formatter: Formatters.checkmarkMaterial, type: FieldType.boolean,\n        filterable: true, sortable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableFiltering: true,\n      enableRowDetailView: true,\n      darkMode: this._darkMode,\n      datasetIdPropertyName: 'rowId', // optionally use a different \"id\"\n      rowDetailView: {\n        // optionally change the column index position of the icon (defaults to 0)\n        // columnIndexPosition: 1,\n\n        // We can load the \"process\" asynchronously in 3 different ways (aurelia-http-client, aurelia-fetch-client OR even Promise)\n        process: (item) => this.simulateServerAsyncCall(item),\n        // process: (item) => this.http.get(`api/item/${item.id}`),\n\n        // load only once and reuse the same item detail without calling process method\n        loadOnce: true,\n\n        // limit expanded row to only 1 at a time\n        singleRowExpand: false,\n\n        // false by default, clicking anywhere on the row will open the detail view\n        // when set to false, only the \"+\" icon would open the row detail\n        // if you use editor or cell navigation you would want this flag set to false (default)\n        useRowClick: true,\n\n        // how many grid rows do we want to use for the row detail panel (this is only set once and will be used for all row detail)\n        // also note that the detail view adds an extra 1 row for padding purposes\n        // so if you choose 4 panelRows, the display will in fact use 5 rows\n        panelRows: this.detailViewRowCount,\n\n        // you can override the logic for showing (or not) the expand icon\n        // for example, display the expand icon only on every 2nd row\n        // expandableOverride: (row: number, dataContext: any) => (dataContext.rowId % 2 === 1),\n\n        // Preload View Template\n        preloadViewModel: Example19Preload,\n\n        // ViewModel Template to load when row detail data is ready\n        viewModel: Example19DetailView,\n\n        // Optionally pass your Parent Component reference to your Child Component (row detail component)\n        parent: this,\n\n        onBeforeRowDetailToggle: (e, args) => {\n          // you coud cancel opening certain rows\n          // if (args.item.rowId === 1) {\n          //   e.preventDefault();\n          //   return false;\n          // }\n          console.log('before toggling row detail', args.item);\n          return true;\n        },\n      },\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: true\n      },\n\n      // You could also enable Row Selection as well, but just make sure to disable `useRowClick: false`\n      // enableCheckboxSelector: true,\n      // enableRowSelection: true,\n      // checkboxSelector: {\n      //   hideInFilterHeaderRow: false,\n      //   hideSelectAllCheckbox: true,\n      // },\n    };\n  }\n\n  getData() {\n    // mock a dataset\n    const dataset: any[] = [];\n    for (let i = 0; i < NB_ITEMS; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      dataset[i] = {\n        rowId: i,\n        title: 'Task ' + i,\n        duration: (i % 33 === 0) ? null : Math.random() * 100 + '',\n        percentComplete: randomPercent,\n        percentComplete2: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        effortDriven: (i % 5 === 0)\n      };\n    }\n\n    this.dataset = dataset;\n  }\n\n  changeDetailViewRowCount() {\n    const options = this.rowDetailInstance.getOptions();\n    if (options && options.panelRows) {\n      options.panelRows = this.detailViewRowCount; // change number of rows dynamically\n      this.rowDetailInstance.setOptions(options);\n    }\n  }\n\n  changeEditableGrid() {\n    // this.rowDetailInstance.setOptions({ useRowClick: false });\n    this.rowDetailInstance.collapseAll();\n    (this.rowDetailInstance as any).addonOptions.useRowClick = false;\n    this.gridOptions.autoCommitEdit = !this.gridOptions.autoCommitEdit;\n    this.aureliaGrid?.slickGrid.setOptions({\n      editable: true,\n      autoEdit: true,\n      enableCellNavigation: true,\n    });\n    return true;\n  }\n\n  closeAllRowDetail() {\n    this.rowDetailInstance.collapseAll();\n  }\n\n  showFlashMessage(message: string, alertType = 'info') {\n    this.message = message;\n    this.flashAlertType = alertType;\n  }\n\n  /** Just for demo purposes, we will simulate an async server call and return more details on the selected row item */\n  simulateServerAsyncCall(item: any) {\n    // random set of names to use for more item detail\n    const randomNames = ['John Doe', 'Jane Doe', 'Chuck Norris', 'Bumblebee', 'Jackie Chan', 'Elvis Presley', 'Bob Marley', 'Mohammed Ali', 'Bruce Lee', 'Rocky Balboa'];\n\n    // fill the template on async delay\n    return new Promise((resolve) => {\n      window.setTimeout(() => {\n        const itemDetail = item;\n\n        // let's add some extra properties to our item for a better async simulation\n        itemDetail.assignee = randomNames[this.randomNumber(0, 9)] || '';\n        itemDetail.reporter = randomNames[this.randomNumber(0, 9)] || '';\n\n        // resolve the data after delay specified\n        resolve(itemDetail);\n      }, this.serverWaitDelay);\n    });\n  }\n\n  toggleDarkMode() {\n    this._darkMode = !this._darkMode;\n    this.toggleBodyBackground();\n    this.aureliaGrid.slickGrid?.setOptions({ darkMode: this._darkMode });\n    this.closeAllRowDetail();\n  }\n\n  toggleBodyBackground() {\n    if (this._darkMode) {\n      document.querySelector<HTMLDivElement>('.panel-wm-content')!.classList.add('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'dark';\n    } else {\n      document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n      document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n\n  private randomNumber(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_serverWaitDelay_dec","_detailViewRowCount_dec","_Example19_decorators","_init","FAKE_SERVER_DELAY","NB_ITEMS","customElement","__au2ViewDef","bindable","Example19","__publicField","__runInitializers","_a","ExtensionName","FieldType","Editors","Formatters","Filters","item","Example19Preload","Example19DetailView","args","dataset","i","randomYear","randomMonth","randomDay","randomPercent","options","message","alertType","randomNames","resolve","itemDetail","action","min","max","__decoratorStart","__decorateElement"],"mappings":"gJACO,MAAMA,EAAO,YACPC,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAEXC,EAAe,CAAG,EAClBC,EAAY,CAAC,EAC1B,IAAIC,EACG,SAASC,GAASC,EAAW,CAC7BF,IACHA,EAAKG,EAAc,OAAO,CAAE,KAAAP,EAAM,SAAAC,EAAU,aAAAC,EAAc,UAAAC,EAAW,GAEvEG,EAAU,SAASF,CAAE,CACvB,2/DCZAI,EAAAC,EAAAC,EAAAC,EAcA,MAAMC,GAAoB,IACpBC,GAAW,IAAKH,EAAA,CAAAI,EAAAC,EAAA,CAIpB,EAAAN,EAAA,CAACO,GACDR,EAAC,CAAAQ,CAAA,EAHI,MAAMC,CAAU,CAwBrB,aAAc,CAvBdC,EAAA,KAAQ,YAAY,EAAA,EACWA,EAAA,KAAA,qBAAAC,EAArBR,SAAqB,CAArB,CAAA,EAAAQ,EAAAR,EAAA,GAAA,IAAA,EACkBO,EAAA,KAAA,kBAAAC,EAAlBR,UAAkBC,EAAlB,CAAA,EAAAO,EAAAR,EAAA,GAAA,IAAA,EAEFO,EAAA,KAAA,QAAA,6BAAA,EACGA,EAAA,KAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EASXA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,oBAA8B,EAAC,EAC/BA,EAAA,KAAA,UAAiB,EAAC,EAEDA,EAAA,KAAA,iBAAA,MAAA,EACFA,EAAA,KAAA,eAAA,EAAA,EACLA,EAAA,KAAA,UAAA,EAAA,EAIR,KAAK,WAAW,CAAA,CAGlB,IAAI,mBAAoB,OAOtB,OAAOE,EAAA,KAAK,cAAL,YAAAA,EAAkB,iBAAiB,2BAA2BC,EAAc,cAAa,CAGlG,UAAW,CAET,KAAK,QAAQ,CAAA,CAGf,WAAY,CACV,SAAS,cAAc,mBAAmB,EAAG,UAAU,OAAO,WAAW,EACzE,SAAS,cAA8B,iBAAiB,EAAG,QAAQ,QAAU,OAAA,CAI/E,YAAa,CACX,KAAK,kBAAoB,CACvB,CAAE,GAAI,QAAS,KAAM,QAAS,MAAO,QAAS,SAAU,GAAM,KAAMC,EAAU,OAAQ,MAAO,GAAI,WAAY,GAAM,OAAQ,CAAE,MAAOC,EAAQ,KAAO,EACnJ,CAAE,GAAI,WAAY,KAAM,kBAAmB,MAAO,WAAY,UAAWC,EAAW,QAAS,OAAQ,CAAE,WAAY,EAAG,WAAY,CAAE,EAAG,SAAU,GAAM,KAAMF,EAAU,OAAQ,SAAU,GAAI,WAAY,EAAK,EAC9M,CACE,GAAI,WAAY,KAAM,aAAc,MAAO,mBAAoB,OAAQ,CAAE,MAAOC,EAAQ,MAAO,EAC/F,UAAWC,EAAW,YAAa,KAAMF,EAAU,OAAQ,SAAU,GAAM,SAAU,IAAK,WAAY,GAAM,OAAQ,CAAE,MAAOG,EAAQ,OAAQ,SAAU,GAAI,CAC7J,EACA,CAAE,GAAI,QAAS,KAAM,QAAS,MAAO,QAAS,UAAWD,EAAW,QAAS,SAAU,GAAM,KAAMF,EAAU,KAAM,SAAU,GAAI,oBAAqB,GAAM,WAAY,GAAM,OAAQ,CAAE,MAAOG,EAAQ,YAAA,CAAe,EACtN,CAAE,GAAI,SAAU,KAAM,SAAU,MAAO,SAAU,UAAWD,EAAW,QAAS,SAAU,GAAM,KAAMF,EAAU,KAAM,SAAU,GAAI,oBAAqB,GAAM,WAAY,GAAM,OAAQ,CAAE,MAAOG,EAAQ,YAAA,CAAe,EACzN,CACE,GAAI,gBAAiB,KAAM,gBAAiB,MAAO,eACnD,SAAU,IACV,UAAWD,EAAW,kBAAmB,KAAMF,EAAU,QACzD,WAAY,GAAM,SAAU,GAC5B,OAAQ,CACN,WAAY,CAAC,CAAE,MAAO,GAAI,MAAO,EAAM,EAAA,CAAE,MAAO,GAAM,MAAO,QAAU,CAAE,MAAO,GAAO,MAAO,QAAS,EACvG,MAAOG,EAAQ,YAAA,CACjB,CAEJ,EAEA,KAAK,YAAc,CACjB,WAAY,CACV,UAAW,kBACX,aAAc,EAChB,EACA,gBAAiB,GACjB,oBAAqB,GACrB,SAAU,KAAK,UACf,sBAAuB,QACvB,cAAe,CAKb,QAAUC,GAAS,KAAK,wBAAwBA,CAAI,EAIpD,SAAU,GAGV,gBAAiB,GAKjB,YAAa,GAKb,UAAW,KAAK,mBAOhB,iBAAkBC,EAGlB,UAAWC,EAGX,OAAQ,KAER,wBAAyB,CAAC,EAAGC,KAMnB,QAAA,IAAI,6BAA8BA,EAAK,IAAI,EAC5C,GAEX,EACA,oBAAqB,CAEnB,gBAAiB,EAAA,CAUrB,CAAA,CAGF,SAAU,CAER,MAAMC,EAAiB,CAAC,EACxB,QAASC,EAAI,EAAGA,EAAIlB,GAAUkB,IAAK,CACjC,MAAMC,EAAa,IAAO,KAAK,MAAM,KAAK,SAAW,EAAE,EACjDC,EAAc,KAAK,MAAM,KAAK,SAAW,EAAE,EAC3CC,EAAY,KAAK,MAAO,KAAK,SAAW,EAAG,EAC3CC,EAAgB,KAAK,MAAM,KAAK,SAAW,GAAG,EAEpDL,EAAQC,CAAC,EAAI,CACX,MAAOA,EACP,MAAO,QAAUA,EACjB,SAAWA,EAAI,KAAO,EAAK,KAAO,KAAK,SAAW,IAAM,GACxD,gBAAiBI,EACjB,iBAAkBA,EAClB,sBAAuBA,EACvB,MAAO,IAAI,KAAKH,EAAYC,EAAaC,CAAS,EAClD,OAAQ,IAAI,KAAKF,EAAaC,EAAc,EAAIC,CAAS,EACzD,aAAeH,EAAI,IAAM,CAC3B,CAAA,CAGF,KAAK,QAAUD,CAAA,CAGjB,0BAA2B,CACnB,MAAAM,EAAU,KAAK,kBAAkB,WAAW,EAC9CA,GAAWA,EAAQ,YACrBA,EAAQ,UAAY,KAAK,mBACpB,KAAA,kBAAkB,WAAWA,CAAO,EAC3C,CAGF,oBAAqB,OAEnB,YAAK,kBAAkB,YAAY,EAClC,KAAK,kBAA0B,aAAa,YAAc,GAC3D,KAAK,YAAY,eAAiB,CAAC,KAAK,YAAY,gBAC/ChB,EAAA,KAAA,cAAA,MAAAA,EAAa,UAAU,WAAW,CACrC,SAAU,GACV,SAAU,GACV,qBAAsB,EAAA,GAEjB,EAAA,CAGT,mBAAoB,CAClB,KAAK,kBAAkB,YAAY,CAAA,CAGrC,iBAAiBiB,EAAiBC,EAAY,OAAQ,CACpD,KAAK,QAAUD,EACf,KAAK,eAAiBC,CAAA,CAIxB,wBAAwBZ,EAAW,CAE3B,MAAAa,EAAc,CAAC,WAAY,WAAY,eAAgB,YAAa,cAAe,gBAAiB,aAAc,eAAgB,YAAa,cAAc,EAG5J,OAAA,IAAI,QAASC,GAAY,CAC9B,OAAO,WAAW,IAAM,CACtB,MAAMC,EAAaf,EAGnBe,EAAW,SAAWF,EAAY,KAAK,aAAa,EAAG,CAAC,CAAC,GAAK,GAC9DE,EAAW,SAAWF,EAAY,KAAK,aAAa,EAAG,CAAC,CAAC,GAAK,GAG9DC,EAAQC,CAAU,CAAA,EACjB,KAAK,eAAe,CAAA,CACxB,CAAA,CAGH,gBAAiB,OACV,KAAA,UAAY,CAAC,KAAK,UACvB,KAAK,qBAAqB,GAC1BrB,EAAA,KAAK,YAAY,YAAjB,MAAAA,EAA4B,WAAW,CAAE,SAAU,KAAK,YACxD,KAAK,kBAAkB,CAAA,CAGzB,sBAAuB,CACjB,KAAK,WACP,SAAS,cAA8B,mBAAmB,EAAG,UAAU,IAAI,WAAW,EACtF,SAAS,cAA8B,iBAAiB,EAAG,QAAQ,QAAU,SAE7E,SAAS,cAAc,mBAAmB,EAAG,UAAU,OAAO,WAAW,EACzE,SAAS,cAA8B,iBAAiB,EAAG,QAAQ,QAAU,QAC/E,CAGF,gBAAiB,OACV,KAAA,aAAe,CAAC,KAAK,aACpB,MAAAsB,EAAS,KAAK,aAAe,MAAQ,UAC3CtB,EAAA,SAAS,cAAc,WAAW,IAAlC,MAAAA,EAAqC,UAAUsB,GAAQ,UAClD,KAAA,YAAY,eAAe,WAAW,CAAC,CAAA,CAGtC,aAAaC,EAAaC,EAAa,CACtC,OAAA,KAAK,MAAM,KAAK,OAAA,GAAYA,EAAMD,EAAM,GAAKA,CAAG,CAAA,CAE3D,CArPOhC,EAAAkC,GAAA,EAEKC,EAAAnC,EAAA,EAAA,qBAAVF,EAFWQ,CAAA,EAGD6B,EAAAnC,EAAA,EAAA,kBAAVH,EAHWS,CAAA,EAAAA,EAAN6B,kBAFepC,EAETO,CAAA,EAANE,EAAMR,EAAA,EAAAM,CAAA"}