{"version":3,"file":"example41-BHyoawRM.js","sources":["../../src/examples/slickgrid/example41.$au.ts","../../src/examples/slickgrid/example41.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example41.scss\";\nexport const name = \"example41\";\nexport const template = \"<div class=\\\"container-fluid\\\">\\n  <h2>\\n    Example 41: Drag & Drop\\n    <span class=\\\"float-end\\\">\\n      <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example41.ts\\\">\\n        <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n      </a>\\n    </span>\\n    <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n  </h2>\\n\\n  <div class=\\\"subtitle\\\">\\n    <ul>\\n      <li>Click to select, Ctrl-click to toggle selection(s).</li>\\n      <li>Drag one or more rows by the handle icon (1st column) to reorder.</li>\\n      <li>Drag one or more rows by selection (2nd or 3rd column) and drag to the recycle bin to delete.</li>\\n    </ul>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <aurelia-slickgrid grid-id=\\\"grid41\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                    on-drag-init.trigger=\\\"handleOnDragInit($event.detail.eventData)\\\"\\n                    on-drag-start.trigger=\\\"handleOnDragStart($event.detail.eventData)\\\"\\n                    on-drag.trigger=\\\"handleOnDrag($event.detail.eventData, $event.detail.args)\\\"\\n                    on-drag-end.trigger=\\\"handleOnDragEnd($event.detail.eventData, $event.detail.args)\\\">\\n        <div au-slot=\\\"slickgrid-header\\\" class=\\\"grid-header\\\">\\n          <label>Santa's TODO list:</label>\\n        </div>\\n      </aurelia-slickgrid>\\n    </div>\\n    <div class=\\\"col\\\">\\n      <div id=\\\"dropzone\\\" class=\\\"recycle-bin mt-4\\\">\\n        Recycle Bin\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import {\n  type AureliaGridInstance,\n  type Column,\n  Formatters,\n  type GridOption,\n  SlickGlobalEditorLock,\n} from 'aurelia-slickgrid';\n\nimport './example41.scss';\n\nexport class Example41 {\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions!: Column[];\n  dataset: any[] = [];\n  dragHelper?: HTMLElement;\n  dragRows: number[] = [];\n  dragMode = '';\n  hideSubTitle = false;\n\n  constructor() {\n    this.defineGrid();\n\n    // mock a dataset\n    this.dataset = this.mockData();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'name',\n        name: 'Name',\n        field: 'name',\n        width: 300,\n        cssClass: 'cell-title',\n      },\n      {\n        id: 'complete',\n        name: 'Complete',\n        width: 60,\n        cssClass: 'cell-effort-driven',\n        field: 'complete',\n        cannotTriggerInsert: true,\n        formatter: Formatters.checkmarkMaterial,\n      }\n    ];\n\n    this.gridOptions = {\n      enableAutoResize: false,\n      gridHeight: 225,\n      gridWidth: 800,\n      rowHeight: 33,\n      enableCellNavigation: true,\n      enableRowSelection: true,\n      enableRowMoveManager: true,\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: false\n      },\n      rowMoveManager: {\n        columnIndexPosition: 0,\n        cancelEditOnDrag: true,\n        disableRowSelection: true,\n        hideRowMoveShadow: false,\n        onBeforeMoveRows: this.onBeforeMoveRows.bind(this),\n        onMoveRows: this.onMoveRows.bind(this),\n\n        // you can also override the usability of the rows, for example make every 2nd row the only moveable rows,\n        // usabilityOverride: (row, dataContext, grid) => dataContext.id % 2 === 1\n      },\n    };\n  }\n\n  mockData() {\n    return [\n      { id: 0, name: 'Make a list', complete: true },\n      { id: 1, name: 'Check it twice', complete: false },\n      { id: 2, name: `Find out who's naughty`, complete: false },\n      { id: 3, name: `Find out who's nice`, complete: false }\n    ];\n  }\n\n  onBeforeMoveRows(e: MouseEvent | TouchEvent, data: { rows: number[]; insertBefore: number; }) {\n    for (const dataRow of data.rows) {\n      // no point in moving before or after itself\n      if (dataRow === data.insertBefore || dataRow === data.insertBefore - 1) {\n        e.stopPropagation();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  onMoveRows(_e: MouseEvent | TouchEvent, args: { rows: number[]; insertBefore: number; }) {\n    const extractedRows: any[] = [];\n    const rows = args.rows;\n    const insertBefore = args.insertBefore;\n    const left = this.dataset.slice(0, insertBefore);\n    const right = this.dataset.slice(insertBefore, this.dataset.length);\n\n    rows.sort((a, b) => a - b);\n\n    for (const row of rows) {\n      extractedRows.push(this.dataset[row]);\n    }\n\n    rows.reverse();\n\n    for (const row of rows) {\n      if (row < insertBefore) {\n        left.splice(row, 1);\n      } else {\n        right.splice(row - insertBefore, 1);\n      }\n    }\n\n    this.dataset = left.concat(extractedRows.concat(right));\n\n    const selectedRows: number[] = [];\n    for (let i = 0; i < rows.length; i++) {\n      selectedRows.push(left.length + i);\n    }\n\n    this.aureliaGrid.slickGrid?.resetActiveCell();\n    this.aureliaGrid.slickGrid?.invalidate();\n  }\n\n  handleOnDragInit(e: CustomEvent) {\n    // prevent the grid from cancelling drag'n'drop by default\n    e.stopImmediatePropagation();\n  }\n\n  handleOnDragStart(e: CustomEvent) {\n    const cell = this.aureliaGrid.slickGrid?.getCellFromEvent(e);\n\n    if (!cell || cell.cell === 0) {\n      this.dragMode = '';\n      return;\n    }\n\n    const row = cell.row;\n    if (!this.dataset[row]) {\n      return;\n    }\n\n    if (SlickGlobalEditorLock.isActive()) {\n      return;\n    }\n\n    e.stopImmediatePropagation();\n    this.dragMode = 'recycle';\n\n    let selectedRows: number[] = this.aureliaGrid.slickGrid?.getSelectedRows() || [];\n\n    if (!selectedRows.length || selectedRows.findIndex(row => row === row) === -1) {\n      selectedRows = [row];\n      this.aureliaGrid.slickGrid?.setSelectedRows(selectedRows);\n    }\n\n    this.dragRows = selectedRows;\n    const dragCount = selectedRows.length;\n\n    const dragMsgElm = document.createElement('span');\n    dragMsgElm.className = 'drag-message';\n    dragMsgElm.textContent = `Drag to Recycle Bin to delete ${dragCount} selected row(s)`;\n    this.dragHelper = dragMsgElm;\n    document.body.appendChild(dragMsgElm);\n    document.querySelector<HTMLDivElement>('#dropzone')?.classList.add('drag-dropzone');\n\n    return dragMsgElm;\n  }\n\n  handleOnDrag(e: MouseEvent, args: any) {\n    if (this.dragMode !== 'recycle') {\n      return;\n    }\n    if (this.dragHelper instanceof HTMLElement) {\n      this.dragHelper.style.top = `${e.pageY + 5}px`;\n      this.dragHelper.style.left = `${e.pageX + 5}px`;\n    }\n\n    // add/remove pink background color when hovering recycle bin\n    const dropzoneElm = document.querySelector<HTMLDivElement>('#dropzone')!;\n    if (args.target instanceof HTMLElement && (args.target.id === 'dropzone' || args.target === dropzoneElm)) {\n      dropzoneElm.classList.add('drag-hover'); // OR: dd.target.style.background = 'pink';\n    } else {\n      dropzoneElm.classList.remove('drag-hover');\n    }\n  }\n\n  handleOnDragEnd(e: CustomEvent, args: any) {\n    if (this.dragMode != 'recycle') {\n      return;\n    }\n    this.dragHelper?.remove();\n    document.querySelector<HTMLDivElement>('#dropzone')?.classList.remove('drag-dropzone', 'drag-hover');\n\n    if (this.dragMode != 'recycle' || args.target.id !== 'dropzone') {\n      return;\n    }\n\n    // reaching here means that we'll remove the row that we started dragging from the dataset\n    const rowsToDelete = this.dragRows.sort().reverse();\n    for (const rowToDelete of rowsToDelete) {\n      this.dataset.splice(rowToDelete, 1);\n    }\n    this.aureliaGrid.slickGrid?.invalidate();\n    this.aureliaGrid.slickGrid?.setSelectedRows([]);\n    this.dataset = [...this.dataset];\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example41_decorators","_init","customElement","__au2ViewDef","Example41","__publicField","aureliaGrid","Formatters","data","dataRow","args","extractedRows","rows","insertBefore","left","right","a","b","row","selectedRows","i","_a","_b","cell","SlickGlobalEditorLock","_c","dragCount","dragMsgElm","_d","dropzoneElm","rowsToDelete","rowToDelete","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}