{"version":3,"file":"example2-Cc9jK5Wh.js","sources":["../../src/examples/slickgrid/example2.$au.ts","../../src/examples/slickgrid/example2.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example2\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n      href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example2.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"togglePauseResizer()\\\">\\n  Pause auto-resize: <b>${resizerPaused}</b>\\n</button>\\n\\n<aurelia-slickgrid\\n  grid-id=\\\"grid2\\\"\\n  column-definitions.bind=\\\"columnDefinitions\\\"\\n  grid-options.bind=\\\"gridOptions\\\"\\n  dataset.bind=\\\"dataset\\\"\\n  instances.bind=\\\"aureliaGrid\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import {\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  type Formatter,\n  Formatters,\n  type GridOption,\n} from 'aurelia-slickgrid';\n\ninterface DataItem {\n  id: number;\n  title: string;\n  duration: string;\n  percentComplete: number;\n  percentComplete2: number;\n  start: Date;\n  finish: Date;\n  effortDriven: boolean;\n  phone: string;\n  completed: number;\n}\n\n// create my custom Formatter with the Formatter type\nconst myCustomCheckmarkFormatter: Formatter<DataItem> = (_row, _cell, value) => {\n  // you can return a string of a object (of type FormatterResultObject), the 2 types are shown below\n  return value ? `<i class=\"mdi mdi-fire red\" aria-hidden=\"true\"></i>` : { text: '<i class=\"mdi mdi-snowflake\" aria-hidden=\"true\"></i>', addClasses: 'lightblue', toolTip: 'Freezing' };\n};\n\nconst customEnableButtonFormatter: Formatter<DataItem> = (_row: number, _cell: number, value: any) => {\n  return `<span style=\"margin-left: 5px\">\n      <button class=\"btn btn-xs btn-default btn-icon\">\n        <i class=\"mdi ${value ? 'mdi-check-circle' : 'mdi-circle'}\" style=\"color: ${value ? 'black' : 'lavender'}\"></i>\n      </button>\n    </span>`;\n};\n\nexport class Example2 {\n  title = 'Example 2: Grid with Formatters';\n  subTitle = `\n    Grid with Custom and/or included Slickgrid Formatters (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/column-functionalities/formatters\" target=\"_blank\">Wiki docs</a>).\n    <ul>\n      <li>The 2 last columns are using Custom Formatters</li>\n      <ul><li>The \"Completed\" column uses a the \"onCellClick\" event and a formatter to simulate a toggle action</li></ul>\n      <li>\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling \"enableExcelCopyBuffer\" flag.\n        Note that it will only evaluate Formatter when the \"exportWithFormatter\" flag is enabled (through \"ExcelExportOptions\" or \"TextExportOptions\" or the column definition)\n      </li>\n      <li>This example also has auto-resize enabled, and we also demo how you can pause the resizer if you wish to</li>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column<DataItem>[] = [];\n  dataset: any[] = [];\n  hideSubTitle = false;\n  resizerPaused = false;\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData();\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    // the columns field property is type-safe, try to add a different string not representing one of DataItems properties\n    this.columnDefinitions = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, width: 70 },\n      { id: 'phone', name: 'Phone Number using mask', field: 'phone', sortable: true, type: FieldType.number, minWidth: 100, formatter: Formatters.mask, params: { mask: '(000) 000-0000' } },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', formatter: Formatters.decimal, params: { minDecimal: 1, maxDecimal: 2 }, sortable: true, type: FieldType.number, minWidth: 90, exportWithFormatter: true },\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, sortable: true, minWidth: 100 },\n      { id: 'percent2', name: '% Complete', field: 'percentComplete2', formatter: Formatters.progressBar, type: FieldType.number, sortable: true, minWidth: 100 },\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true },\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true },\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', formatter: myCustomCheckmarkFormatter, type: FieldType.number, sortable: true, minWidth: 100 },\n      {\n        id: 'completed', name: 'Completed', field: 'completed', type: FieldType.number, sortable: true, minWidth: 100,\n        formatter: customEnableButtonFormatter,\n        onCellClick: (_e, args) => {\n          this.toggleCompletedProperty(args && args.dataContext);\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableCellNavigation: true,\n      showCustomFooter: true, // display some metrics in the bottom custom footer\n      customFooterOptions: {\n        // optionally display some text on the left footer container\n        leftFooterText: 'custom footer text',\n        hideTotalItemCount: true,\n        hideLastUpdateTimestamp: true\n      },\n\n      // you customize all formatter at once certain options through \"formatterOptions\" in the Grid Options\n      // or independently through the column definition \"params\", the option names are the same\n      /*\n      formatterOptions: {\n        dateSeparator: '.',\n        decimalSeparator: ',',\n        displayNegativeNumberWithParentheses: true,\n        minDecimal: 0,\n        maxDecimal: 2,\n        thousandSeparator: '_'\n      },\n      */\n\n      // when using the ExcelCopyBuffer, you can see what the selection range is\n      enableExcelCopyBuffer: true,\n      // excelCopyBufferOptions: {\n      //   onCopyCells: (e, args: { ranges: SelectedRange[] }) => console.log('onCopyCells', args.ranges),\n      //   onPasteCells: (e, args: { ranges: SelectedRange[] }) => console.log('onPasteCells', args.ranges),\n      //   onCopyCancelled: (e, args: { ranges: SelectedRange[] }) => console.log('onCopyCancelled', args.ranges),\n      // }\n    };\n  }\n\n  getData() {\n    // mock a dataset\n    const dataset: any[] = [];\n    for (let i = 0; i < 500; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      dataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        phone: this.generatePhoneNumber(),\n        duration: (i % 33 === 0) ? null : Math.random() * 100 + '',\n        percentComplete: randomPercent,\n        percentComplete2: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = dataset;\n  }\n\n  generatePhoneNumber() {\n    let phone = '';\n    for (let i = 0; i < 10; i++) {\n      phone += Math.round(Math.random() * 9) + '';\n    }\n    return phone;\n  }\n\n  togglePauseResizer() {\n    this.resizerPaused = !this.resizerPaused;\n    this.aureliaGrid.resizerService.pauseResizer(this.resizerPaused);\n  }\n\n  toggleCompletedProperty(item: any) {\n    // toggle property\n    if (typeof item === 'object') {\n      item.completed = !item.completed;\n\n      // simulate a backend http call and refresh the grid row after delay\n      window.setTimeout(() => {\n        this.aureliaGrid.gridService.updateItemById(item.id, item, { highlightRow: false });\n      }, 250);\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example2_decorators","_init","myCustomCheckmarkFormatter","_row","_cell","value","customEnableButtonFormatter","customElement","__au2ViewDef","Example2","__publicField","FieldType","Formatters","args","dataset","i","randomYear","randomMonth","randomDay","randomPercent","phone","item","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}