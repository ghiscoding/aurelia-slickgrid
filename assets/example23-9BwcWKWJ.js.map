{"version":3,"file":"example23-9BwcWKWJ.js","sources":["../../src/examples/slickgrid/example23.$au.ts","../../src/examples/slickgrid/example23.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example23\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example23.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<br />\\n\\n<span if.bind=\\\"metrics\\\">\\n  <b>Metrics:</b>\\n  ${metrics.endTime | dateFormat: 'DD MMM, h:mm:ss a'} | ${metrics.itemCount} of ${metrics.totalItemCount} items\\n</span>\\n\\n<div class=\\\"row row-cols-lg-auto g-1 align-items-center\\\">\\n  <div class=\\\"col\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-filters\\\"\\n            click.trigger=\\\"aureliaGrid.filterService.clearFilters()\\\">\\n      Clear Filters\\n    </button>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-sorting\\\"\\n            click.trigger=\\\"aureliaGrid.sortService.clearSorting()\\\">\\n      Clear Sorting\\n    </button>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-filter\\\"\\n            click.trigger=\\\"setFiltersDynamically()\\\">\\n      Set Filters Dynamically\\n    </button>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-sorting\\\"\\n            click.trigger=\\\"setSortingDynamically()\\\">\\n      Set Sorting Dynamically\\n    </button>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <label for=\\\"selectedFilter\\\" style=\\\"margin-left: 10px\\\">Predefined Filters</label>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <select name=\\\"selectedFilter\\\" class=\\\"form-select\\\" data-test=\\\"select-dynamic-filter\\\"\\n            value.bind=\\\"selectedPredefinedFilter\\\" change.trigger=\\\"predefinedFilterChanged(selectedPredefinedFilter)\\\">\\n      <option model.bind=\\\"filter.value\\\" repeat.for=\\\"filter of filterList\\\">${filter.label}</option>\\n    </select>\\n  </div>\\n</div>\\n\\n<div class=\\\"row mt-2\\\">\\n  <div class=\\\"col\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"language\\\" click.trigger=\\\"switchLanguage()\\\">\\n      <i class=\\\"mdi mdi-translate\\\"></i>\\n      Switch Language\\n    </button>\\n    <b>Locale:</b> <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">${selectedLanguage + '.json'}</span>\\n  </div>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid23\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    instances.bind=\\\"aureliaGrid\\\"\\n                    on-grid-state-changed.trigger=\\\"gridStateChanged($event.detail)\\\"\\n                    on-row-count-changed.trigger=\\\"refreshMetrics($event.detail.eventData, $event.detail.args)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { I18N } from '@aurelia/i18n';\n// import { TOptions as I18NOptions } from 'i18next';\nimport { addDay, format } from '@formkit/tempo';\n\nimport { SlickCustomTooltip } from '@slickgrid-universal/custom-tooltip-plugin';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\n\nimport { CustomInputFilter } from './custom-inputFilter';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  type CurrentFilter,\n  FieldType,\n  Filters,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  type GridStateChange,\n  type Metrics,\n  type MultipleSelectOption,\n  OperatorType,\n  type SlickGrid,\n  type SliderRangeOption,\n} from 'aurelia-slickgrid';\nimport { resolve } from 'aurelia';\n\nconst NB_ITEMS = 1500;\n\nfunction randomBetween(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// create a custom translate Formatter (typically you would move that a separate file, for separation of concerns)\nconst taskTranslateFormatter: Formatter = (_row, _cell, value, _columnDef, _dataContext, grid: SlickGrid) => {\n  const gridOptions = grid.getOptions() as GridOption;\n  const i18n = gridOptions.i18n;\n\n  return i18n?.tr('TASK_X', { x: value } as any) ?? '';\n};\n\nexport class Example23 {\n  title = 'Example 23: Filtering from Range of Search Values';\n  subTitle = `\n    This demo shows how to use Filters with Range of Search Values (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/column-functionalities/filters/range-filters\" target=\"_blank\">Wiki docs</a>)\n    <br/>\n    <ul class=\"small\">\n      <li>All input filters support the following operators: (>, >=, <, <=, <>, !=, =, ==, *) and now also the (..) for an input range</li>\n      <li>All filters (which support ranges) can be defined via the 2 dots (..) which represents a range, this also works for dates and slider in the \"presets\"</li>\n      <ul>\n        <li>For a numeric range defined in an input filter (must be of type text), you can use 2 dots (..) to represent a range</li>\n        <li>example: typing \"10..90\" will filter values between 10 and 90 (but excluding the number 10 and 90)</li>\n      </ul>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n  selectedLanguage: string;\n  metrics!: Metrics;\n  filterList = [\n    { value: '', label: '' },\n    { value: 'currentYearTasks', label: 'Current Year Completed Tasks' },\n    { value: 'nextYearTasks', label: 'Next Year Active Tasks' }\n  ];\n  selectedPredefinedFilter = '';\n\n  constructor(private readonly i18n: I18N = resolve(I18N)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.mockData(NB_ITEMS);\n  }\n\n  detaching() {\n    this.saveCurrentGridState();\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: 'Title', field: 'id', nameKey: 'TITLE', minWidth: 100,\n        formatter: taskTranslateFormatter,\n        sortable: true,\n        filterable: true,\n        params: { useFormatterOuputToFilter: true }\n      },\n      {\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80,\n        type: FieldType.string,\n        filter: {\n          model: CustomInputFilter, // create a new instance to make each Filter independent from each other\n          enableTrimWhiteSpace: true // or use global \"enableFilterTrimWhiteSpace\" to trim on all Filters\n        }\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', minWidth: 120,\n        sortable: true,\n        customTooltip: { position: 'center' },\n        formatter: Formatters.progressBar,\n        type: FieldType.number,\n        filterable: true,\n        filter: {\n          model: Filters.sliderRange,\n          maxValue: 100, // or you can use the filterOptions as well\n          operator: OperatorType.rangeInclusive, // defaults to inclusive\n          filterOptions: {\n            hideSliderNumbers: false, // you can hide/show the slider numbers on both side\n            min: 0, step: 5\n          } as SliderRangeOption\n        }\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', formatter: Formatters.dateIso, sortable: true, minWidth: 75, width: 100, exportWithFormatter: true,\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', formatter: Formatters.dateIso, sortable: true, minWidth: 75, width: 120, exportWithFormatter: true,\n        type: FieldType.date,\n        filterable: true,\n        filter: {\n          model: Filters.dateRange,\n        }\n      },\n      {\n        id: 'duration', field: 'duration', nameKey: 'DURATION', maxWidth: 90,\n        type: FieldType.number,\n        sortable: true,\n        filterable: true, filter: {\n          model: Filters.input,\n          operator: OperatorType.rangeExclusive // defaults to exclusive\n        }\n      },\n      {\n        id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', minWidth: 85, maxWidth: 90,\n        formatter: Formatters.checkmarkMaterial,\n        exportWithFormatter: true, // you can set this property in the column definition OR in the grid options, column def has priority over grid options\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect,\n          filterOptions: { autoAdjustDropHeight: true } as MultipleSelectOption\n        }\n      }\n    ];\n\n    const presetLowestDay = format(addDay(new Date(), -2), 'YYYY-MM-DD');\n    const presetHighestDay = format(addDay(new Date(), 25), 'YYYY-MM-DD');\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableExcelCopyBuffer: true,\n      enableFiltering: true,\n      // enableFilterTrimWhiteSpace: true,\n      enableTranslate: true,\n      i18n: this.i18n,\n\n      // use columnDef searchTerms OR use presets as shown below\n      presets: {\n        filters: [\n          //  you can use the 2 dots separator on all Filters which support ranges\n          { columnId: 'duration', searchTerms: ['4..88'] },\n          // { columnId: 'percentComplete', searchTerms: ['5..80'] }, // without operator will default to 'RangeExclusive'\n          // { columnId: 'finish', operator: 'RangeInclusive', searchTerms: [`${presetLowestDay}..${presetHighestDay}`] },\n\n          // or you could also use 2 searchTerms values, instead of using the 2 dots (only works with SliderRange & DateRange Filters)\n          // BUT make sure to provide the operator, else the filter service won't know that this is really a range\n          { columnId: 'percentComplete', operator: 'RangeInclusive', searchTerms: [5, 80] }, // same result with searchTerms: ['5..80']\n          { columnId: 'finish', operator: 'RangeInclusive', searchTerms: [presetLowestDay, presetHighestDay] },\n        ],\n        sorters: [\n          { columnId: 'percentComplete', direction: 'DESC' },\n          { columnId: 'duration', direction: 'ASC' },\n        ],\n      },\n      externalResources: [new SlickCustomTooltip(), new ExcelExportService()],\n    };\n  }\n\n  mockData(itemCount: number, startingIndex = 0): any[] {\n    // mock a dataset\n    const tempDataset: any[] = [];\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\n      const randomDuration = randomBetween(0, 365);\n      const randomYear = randomBetween(new Date().getFullYear(), new Date().getFullYear() + 1);\n      const randomMonth = randomBetween(0, 12);\n      const randomDay = randomBetween(10, 28);\n      const randomPercent = randomBetween(0, 100);\n\n      tempDataset.push({\n        id: i,\n        title: 'Task ' + i,\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\n        duration: randomDuration,\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: (i % 4) ? null : new Date(randomYear, randomMonth, randomDay),          // provide a Date format\n        finish: new Date(randomYear, randomMonth, randomDay),\n        completed: (randomPercent === 100) ? true : false,\n      });\n    }\n\n    return tempDataset;\n  }\n\n  clearFilters() {\n    this.selectedPredefinedFilter = '';\n    this.aureliaGrid.filterService.clearFilters();\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  gridStateChanged(gridState: GridStateChange) {\n    console.log('Client sample, Grid State changed:: ', gridState);\n  }\n\n  /** Save current Filters, Sorters in LocaleStorage or DB */\n  saveCurrentGridState() {\n    console.log('Client sample, current Grid State:: ', this.aureliaGrid.gridStateService.getCurrentGridState());\n  }\n\n  refreshMetrics(_e: Event, args: any) {\n    if (args && args.current >= 0) {\n      window.setTimeout(() => {\n        this.metrics = {\n          startTime: new Date(),\n          itemCount: args && args.current || 0,\n          totalItemCount: this.dataset.length || 0\n        };\n      });\n    }\n  }\n\n  setFiltersDynamically() {\n    const presetLowestDay = format(addDay(new Date(), -5), 'YYYY-MM-DD');\n    const presetHighestDay = format(addDay(new Date(), 25), 'YYYY-MM-DD');\n\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\n    this.aureliaGrid.filterService.updateFilters([\n      { columnId: 'duration', searchTerms: ['14..78'], operator: 'RangeInclusive' },\n      { columnId: 'percentComplete', operator: 'RangeExclusive', searchTerms: [15, 85] },\n      { columnId: 'finish', operator: 'RangeInclusive', searchTerms: [presetLowestDay, presetHighestDay] },\n    ]);\n  }\n\n  setSortingDynamically() {\n    this.aureliaGrid.sortService.updateSorting([\n      // orders matter, whichever is first in array will be the first sorted column\n      { columnId: 'finish', direction: 'DESC' },\n      { columnId: 'percentComplete', direction: 'ASC' },\n    ]);\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  predefinedFilterChanged(newPredefinedFilter: string) {\n    let filters: CurrentFilter[] = [];\n    const currentYear = new Date().getFullYear();\n\n    switch (newPredefinedFilter) {\n      case 'currentYearTasks':\n        filters = [\n          { columnId: 'finish', operator: OperatorType.rangeInclusive, searchTerms: [`${currentYear}-01-01`, `${currentYear}-12-31`] },\n          { columnId: 'completed', operator: OperatorType.equal, searchTerms: [true] },\n        ];\n        break;\n      case 'nextYearTasks':\n        filters = [{ columnId: 'start', operator: '>=', searchTerms: [`${currentYear + 1}-01-01`] }];\n        break;\n    }\n    this.aureliaGrid.filterService.updateFilters(filters);\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example23_decorators","_init","NB_ITEMS","randomBetween","min","max","taskTranslateFormatter","_row","_cell","value","_columnDef","_dataContext","grid","i18n","customElement","__au2ViewDef","Example23","resolve","I18N","__publicField","defaultLang","FieldType","CustomInputFilter","Formatters","Filters","OperatorType","presetLowestDay","format","addDay","presetHighestDay","SlickCustomTooltip","ExcelExportService","itemCount","startingIndex","tempDataset","i","randomDuration","randomYear","randomMonth","randomDay","randomPercent","gridState","args","nextLanguage","newPredefinedFilter","filters","currentYear","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}