{"version":3,"file":"example44-BtQBgHqG.js","sources":["../../src/examples/slickgrid/example44.$au.ts","../../src/examples/slickgrid/example44.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example44.scss\";\nexport const name = \"example44\";\nexport const template = \"<h2>\\n  Example 44: colspan/rowspan with large dataset\\n  <span class=\\\"float-end\\\">\\n    <a\\n      style=\\\"font-size: 18px\\\"\\n      target=\\\"_blank\\\"\\n      href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example44.ts\\\"\\n    >\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" >\\n  <p class=\\\"italic example-details\\\">\\n    This page demonstrates <code>colspan</code> & <code>rowspan</code> using DataView with item metadata. <b>Note</b>:\\n    <code>colspan</code> & <code>rowspan</code> are rendered via row/cell indexes, any operations that could change these\\n    indexes (i.e. Filtering/Sorting/Paging/Column Reorder) will require you to implement proper logic to recalculate these\\n    indexes (it becomes your responsability). This demo does not show this because it is up to you to decide what to do when the\\n    span changes shape (i.e. you default to 3 rowspan but you filter a row in the middle, how do you want to proceed?).\\n  </p>\\n</div>\\n\\n<section class=\\\"row mb-2\\\">\\n  <div class=\\\"d-flex\\\">\\n    <button class=\\\"ms-1 btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-500-rows-btn\\\" click.trigger=\\\"loadData(500)\\\">500 rows</button>\\n    <button class=\\\"ms-1 btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-5k-rows-btn\\\" click.trigger=\\\"loadData(5000)\\\">5k rows</button>\\n    <button class=\\\"ms-1 btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-50k-rows-btn\\\" click.trigger=\\\"loadData(50000)\\\">\\n      50k rows\\n    </button>\\n    <button class=\\\"mx-1 btn btn-outline-secondary btn-sm\\\" data-test=\\\"add-50k-rows-btn\\\" click.trigger=\\\"loadData(500000)\\\">\\n      500k rows\\n    </button>\\n    <div class=\\\"mx-2\\\"><label>data length: </label><span id=\\\"dataLn\\\">${dataLn}</span></div>\\n    <button\\n      id=\\\"toggleSpans\\\"\\n      class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon mx-1\\\"\\n      click.trigger=\\\"handleToggleSpans()\\\"\\n      data-test=\\\"toggleSpans\\\"\\n    >\\n      <span class=\\\"mdi mdi-flip-vertical\\\"></span>\\n      <span>Toggle blue cell colspan &amp; rowspan</span>\\n    </button>\\n    <button\\n      id=\\\"scrollTo\\\"\\n      class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      click.trigger=\\\"handleScrollTo()\\\"\\n      data-test=\\\"scrollToBtn\\\"\\n    >\\n      <span class=\\\"mdi mdi-arrow-down\\\"></span>\\n      <span>Scroll To Row</span>\\n    </button>\\n    <div class=\\\"input-group input-group-sm ms-1\\\" style=\\\"width: 100px\\\">\\n      <input\\n        value.bind=\\\"scrollToRow\\\"\\n        id=\\\"nRow\\\"\\n        type=\\\"text\\\"\\n        data-test=\\\"nbrows\\\"\\n        class=\\\"form-control search-string\\\"\\n        placeholder=\\\"search value\\\"\\n        autocomplete=\\\"off\\\"\\n      />\\n      <button\\n        class=\\\"btn btn-sm btn-outline-secondary d-flex align-items-center\\\"\\n        data-test=\\\"clearScrollTo\\\"\\n        click.trigger=\\\"clearScrollTo()\\\"\\n      >\\n        <span class=\\\"icon mdi mdi-close-thick\\\"></span>\\n      </button>\\n    </div>\\n  </div>\\n</section>\\n\\n<aurelia-slickgrid\\n  grid-id=\\\"grid44\\\"\\n  column-definitions.bind=\\\"columnDefinitions\\\"\\n  grid-options.bind=\\\"gridOptions\\\"\\n  dataset.bind=\\\"dataset\\\"\\n  instances.bind=\\\"aureliaGrid\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  type Formatter,\n  type GridOption,\n  type ItemMetadata,\n} from 'aurelia-slickgrid';\n\nimport './example44.scss';\n\nconst rowCellValueFormatter: Formatter = (row, cell, value) =>\n  `<div class=\"cellValue\">${value.toFixed(2)}</div><div class=\"valueComment\">${row}.${cell}</div>`;\nconst rowCellValueExportFormatter: Formatter = (_row, _cell, value) => value.toFixed(2);\n\nexport class Example44 {\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataLn: number | string = 'loading...';\n  dataset: any[] = [];\n  hideSubTitle = false;\n  scrollToRow = 100;\n  metadata: Record<number, ItemMetadata> = {\n    0: {\n      columns: {\n        1: { rowspan: 3 },\n      },\n    },\n    2: {\n      columns: {\n        0: { rowspan: 3 },\n        3: { colspan: 3 },\n      },\n    },\n    3: {\n      columns: {\n        1: { rowspan: 5, colspan: 1, cssClass: 'cell-var-span' },\n        // 1: { rowspan: 3, colspan: 2, cssClass: \"cell-var-span\" },\n        3: { rowspan: 3, colspan: 5 },\n      },\n    },\n    8: {\n      columns: {\n        1: { rowspan: 80 },\n        3: { rowspan: 1999, colspan: 2, cssClass: 'cell-very-high' },\n      },\n    },\n    12: {\n      columns: {\n        11: { rowspan: 3 },\n      },\n    },\n    15: {\n      columns: {\n        18: { colspan: 4, rowspan: 3 },\n      },\n    },\n    85: {\n      columns: {\n        5: { rowspan: 20 },\n      },\n    },\n  };\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // mock a dataset\n    this.loadData(500);\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    // the columns field property is type-safe, try to add a different string not representing one of DataItems properties\n    this.columnDefinitions = [\n      { id: 'title', name: 'Title', field: 'title', minWidth: 80 },\n      {\n        id: 'revenueGrowth',\n        name: 'Revenue Growth',\n        field: 'revenueGrowth',\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n        minWidth: 120,\n      },\n      {\n        id: 'pricingPolicy',\n        name: 'Pricing Policy',\n        field: 'pricingPolicy',\n        minWidth: 110,\n        sortable: true,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'policyIndex',\n        name: 'Policy Index',\n        field: 'policyIndex',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'expenseControl',\n        name: 'Expense Control',\n        field: 'expenseControl',\n        minWidth: 110,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'excessCash',\n        name: 'Excess Cash',\n        field: 'excessCash',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'netTradeCycle',\n        name: 'Net Trade Cycle',\n        field: 'netTradeCycle',\n        minWidth: 110,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'costCapital',\n        name: 'Cost of Capital',\n        field: 'costCapital',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'revenueGrowth2',\n        name: 'Revenue Growth',\n        field: 'revenueGrowth2',\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n        minWidth: 120,\n      },\n      {\n        id: 'pricingPolicy2',\n        name: 'Pricing Policy',\n        field: 'pricingPolicy2',\n        minWidth: 110,\n        sortable: true,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'policyIndex2',\n        name: 'Policy Index',\n        field: 'policyIndex2',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'expenseControl2',\n        name: 'Expense Control',\n        field: 'expenseControl2',\n        minWidth: 110,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'excessCash2',\n        name: 'Excess Cash',\n        field: 'excessCash2',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'netTradeCycle2',\n        name: 'Net Trade Cycle',\n        field: 'netTradeCycle2',\n        minWidth: 110,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'costCapital2',\n        name: 'Cost of Capital',\n        field: 'costCapital2',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'revenueGrowth3',\n        name: 'Revenue Growth',\n        field: 'revenueGrowth3',\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n        minWidth: 120,\n      },\n      {\n        id: 'pricingPolicy3',\n        name: 'Pricing Policy',\n        field: 'pricingPolicy3',\n        minWidth: 110,\n        sortable: true,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'policyIndex3',\n        name: 'Policy Index',\n        field: 'policyIndex3',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'expenseControl3',\n        name: 'Expense Control',\n        field: 'expenseControl3',\n        minWidth: 110,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'excessCash3',\n        name: 'Excess Cash',\n        field: 'excessCash3',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'netTradeCycle3',\n        name: 'Net Trade Cycle',\n        field: 'netTradeCycle3',\n        minWidth: 110,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n      {\n        id: 'costCapital3',\n        name: 'Cost of Capital',\n        field: 'costCapital3',\n        minWidth: 100,\n        exportCustomFormatter: rowCellValueExportFormatter,\n        formatter: rowCellValueFormatter,\n        type: 'number',\n      },\n    ];\n\n    this.gridOptions = {\n      enableCellNavigation: true,\n      enableColumnReorder: true,\n      enableCellRowSpan: true,\n      enableHeaderMenu: false,\n      gridHeight: 600,\n      gridWidth: 900,\n      rowHeight: 30,\n      dataView: {\n        globalItemMetadataProvider: {\n          getRowMetadata: (item: any, row: any) => this.renderDifferentColspan(item, row),\n        },\n      },\n      enableExcelExport: true,\n      externalResources: [new ExcelExportService()],\n      rowTopOffsetRenderType: 'top', // rowspan doesn't render well with 'transform', default is 'top'\n    };\n  }\n\n  clearScrollTo() {\n    this.scrollToRow = 0;\n    document.querySelector<HTMLInputElement>('#nRow')?.focus();\n  }\n\n  loadData(count: number) {\n    this.dataLn = 'loading...';\n\n    // add a delay just to show the \"loading\" text before it loads all data\n    setTimeout(() => {\n      // mock data\n      const tmpArray: any[] = [];\n      for (let i = 0; i < count; i++) {\n        tmpArray[i] = {\n          id: i,\n          title: 'Task ' + i,\n          revenueGrowth: Math.random() * Math.pow(10, Math.random() * 3),\n          pricingPolicy: Math.random() * Math.pow(10, Math.random() * 3),\n          policyIndex: Math.random() * Math.pow(10, Math.random() * 3),\n          expenseControl: Math.random() * Math.pow(10, Math.random() * 3),\n          excessCash: Math.random() * Math.pow(10, Math.random() * 3),\n          netTradeCycle: Math.random() * Math.pow(10, Math.random() * 3),\n          costCapital: Math.random() * Math.pow(10, Math.random() * 3),\n          revenueGrowth2: Math.random() * Math.pow(10, Math.random() * 3),\n          pricingPolicy2: Math.random() * Math.pow(10, Math.random() * 3),\n          policyIndex2: Math.random() * Math.pow(10, Math.random() * 3),\n          expenseControl2: Math.random() * Math.pow(10, Math.random() * 3),\n          excessCash2: Math.random() * Math.pow(10, Math.random() * 3),\n          netTradeCycle2: Math.random() * Math.pow(10, Math.random() * 3),\n          costCapital2: Math.random() * Math.pow(10, Math.random() * 3),\n          revenueGrowth3: Math.random() * Math.pow(10, Math.random() * 3),\n          pricingPolicy3: Math.random() * Math.pow(10, Math.random() * 3),\n          policyIndex3: Math.random() * Math.pow(10, Math.random() * 3),\n          expenseControl3: Math.random() * Math.pow(10, Math.random() * 3),\n          excessCash3: Math.random() * Math.pow(10, Math.random() * 3),\n          netTradeCycle3: Math.random() * Math.pow(10, Math.random() * 3),\n          costCapital3: Math.random() * Math.pow(10, Math.random() * 3),\n        };\n      }\n\n      // let's keep column 3-4 as the row spanning from row 8 until the end of the grid\n      this.metadata[8].columns![3].rowspan = tmpArray.length - 8;\n\n      this.aureliaGrid?.dataView?.beginUpdate();\n      this.aureliaGrid?.dataView?.setItems(tmpArray);\n      this.aureliaGrid?.dataView?.endUpdate();\n      this.dataLn = count;\n    }, 20);\n  }\n\n  /**\n   * A callback to render different row column span\n   * Your callback will always have the \"item\" argument which you can use to decide on the colspan\n   * Your return object must always be in the form of:: { columns: { [columnName]: { colspan: number|'*' } }}\n   */\n  renderDifferentColspan(_item: any, row: any): any {\n    // return (this.metadata[row] as ItemMetadata)?.attributes\n    return this.metadata[row]?.attributes\n      ? this.metadata[row]\n      : (this.metadata[row] = { attributes: { 'data-row': row }, ...this.metadata[row] });\n  }\n\n  handleToggleSpans() {\n    const cell = this.metadata[3].columns![1];\n    if (cell.colspan === 1) {\n      cell.rowspan = 3;\n      cell.colspan = 2;\n    } else {\n      cell.rowspan = 5;\n      cell.colspan = 1;\n    }\n\n    // row index 3 can have a rowspan of up to 5 rows, so we need to invalidate from row 3 + 5 (-1 because of zero index)\n    // so: 3 + 5 - 1 => row indexes 3 to 7\n    this.aureliaGrid.slickGrid?.invalidateRows([3, 4, 5, 6, 7]);\n    this.aureliaGrid.slickGrid?.render();\n  }\n\n  handleScrollTo() {\n    // const args = event.detail && event.detail.args;\n    this.aureliaGrid.slickGrid?.scrollRowToTop(this.scrollToRow);\n    return false;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example44_decorators","_init","rowCellValueFormatter","row","cell","value","rowCellValueExportFormatter","_row","_cell","customElement","__au2ViewDef","Example44","__publicField","item","ExcelExportService","_a","count","tmpArray","i","_b","_d","_c","_f","_item","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}