{"version":3,"file":"groupingFormatters.index-B6oGpPhz.js","sources":["../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsDollarFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsDollarColoredFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsDollarColoredBoldFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsDollarBoldFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsColoredFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsBoldFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/minTotalsFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/maxTotalsFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/avgTotalsPercentageFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/avgTotalsDollarFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/avgTotalsCurrencyFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/avgTotalsFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsCurrencyFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/sumTotalsCurrencyColoredFormatter.js","../../../../node_modules/.pnpm/@slickgrid-universal+common@5.13.3/node_modules/@slickgrid-universal/common/dist/esm/grouping-formatters/groupingFormatters.index.js"],"sourcesContent":["import { isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const sumTotalsFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'regular', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '', '', decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from './../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const sumTotalsDollarFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '$', '', decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsDollarFormatter.js.map","import { createDomElement, isNumber } from '@slickgrid-universal/utils';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nimport { formatNumber } from '../services/index.js';\nexport const sumTotalsDollarColoredFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const colorStyle = val >= 0 ? 'green' : 'red';\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '$', '', decimalSeparator, thousandSeparator);\n        return createDomElement('span', { style: { color: colorStyle }, textContent: `${prefix}${formattedNumber}${suffix}` });\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsDollarColoredFormatter.js.map","import { createDomElement, isNumber } from '@slickgrid-universal/utils';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nimport { formatNumber } from '../services/index.js';\nexport const sumTotalsDollarColoredBoldFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const colorStyle = val >= 0 ? 'green' : 'red';\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '$', '', decimalSeparator, thousandSeparator);\n        return createDomElement('span', {\n            style: { color: colorStyle, fontWeight: 'bold' },\n            textContent: `${prefix}${formattedNumber}${suffix}`,\n        });\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsDollarColoredBoldFormatter.js.map","import { createDomElement, isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from './../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const sumTotalsDollarBoldFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '$', '', decimalSeparator, thousandSeparator);\n        return createDomElement('span', { style: { fontWeight: 'bold' }, textContent: `${prefix}${formattedNumber}${suffix}` });\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsDollarBoldFormatter.js.map","import { createDomElement, isNumber } from '@slickgrid-universal/utils';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nimport { formatNumber } from '../services/index.js';\nexport const sumTotalsColoredFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'regular', 'group');\n    if (isNumber(val)) {\n        const colorStyle = val >= 0 ? 'green' : 'red';\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '', '', decimalSeparator, thousandSeparator);\n        return createDomElement('span', { style: { color: colorStyle }, textContent: `${prefix}${formattedNumber}${suffix}` });\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsColoredFormatter.js.map","import { createDomElement, isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const sumTotalsBoldFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'regular', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '', '', decimalSeparator, thousandSeparator);\n        return createDomElement('span', { style: { fontWeight: 'bold' }, textContent: `${prefix}${formattedNumber}${suffix}` });\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsBoldFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const minTotalsFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.min?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'regular', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '', '', decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=minTotalsFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const maxTotalsFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.max?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'regular', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '', '', decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=maxTotalsFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const avgTotalsPercentageFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    let val = totals.avg?.[field];\n    const params = columnDef?.params;\n    let prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'percent', 'group');\n    if (isNumber(val)) {\n        if (val < 0) {\n            val = Math.abs(val);\n            if (!wrapNegativeNumber) {\n                prefix += '-';\n            }\n            else {\n                if (isNaN(minDecimal) && isNaN(maxDecimal)) {\n                    const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\n                    return `${prefix}(${outputVal}%)${suffix}`;\n                }\n                return `${prefix}(${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%)${suffix}`;\n            }\n        }\n        if (isNaN(minDecimal) && isNaN(maxDecimal)) {\n            const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\n            return `${prefix}${outputVal}%${suffix}`;\n        }\n        return `${prefix}${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=avgTotalsPercentageFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport { formatNumber } from './../services/utilities.js';\nimport {} from '../core/index.js';\nexport const avgTotalsDollarFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.avg?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, '$', '', decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=avgTotalsDollarFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport { formatNumber } from '../services/utilities.js';\nimport {} from '../core/index.js';\nexport const avgTotalsCurrencyFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.avg?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const currencyPrefix = params?.groupFormatterCurrencyPrefix || '';\n    const currencySuffix = params?.groupFormatterCurrencySuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, currencyPrefix, currencySuffix, decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=avgTotalsCurrencyFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const avgTotalsFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    let val = totals.avg?.[field];\n    const params = columnDef?.params;\n    let prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'regular', 'group');\n    if (isNumber(val)) {\n        if (val < 0) {\n            val = Math.abs(val);\n            if (!wrapNegativeNumber) {\n                prefix += '-';\n            }\n            else {\n                if (isNaN(minDecimal) && isNaN(maxDecimal)) {\n                    const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\n                    return `${prefix}(${outputVal})${suffix}`;\n                }\n                return `${prefix}(${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)})${suffix}`;\n            }\n        }\n        if (isNaN(minDecimal) && isNaN(maxDecimal)) {\n            const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);\n            return `${prefix}${outputVal}${suffix}`;\n        }\n        return `${prefix}${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=avgTotalsFormatter.js.map","import { isNumber } from '@slickgrid-universal/utils';\nimport { formatNumber } from '../services/utilities.js';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nexport const sumTotalsCurrencyFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const currencyPrefix = params?.groupFormatterCurrencyPrefix || '';\n    const currencySuffix = params?.groupFormatterCurrencySuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, currencyPrefix, currencySuffix, decimalSeparator, thousandSeparator);\n        return `${prefix}${formattedNumber}${suffix}`;\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsCurrencyFormatter.js.map","import { createDomElement, isNumber } from '@slickgrid-universal/utils';\nimport { retrieveFormatterOptions } from '../formatters/formatterUtilities.js';\nimport {} from '../core/index.js';\nimport { formatNumber } from '../services/index.js';\nexport const sumTotalsCurrencyColoredFormatter = (totals, columnDef, grid) => {\n    const field = columnDef.field ?? '';\n    const val = totals.sum?.[field];\n    const params = columnDef?.params;\n    const prefix = params?.groupFormatterPrefix || '';\n    const suffix = params?.groupFormatterSuffix || '';\n    const currencyPrefix = params?.groupFormatterCurrencyPrefix || '';\n    const currencySuffix = params?.groupFormatterCurrencySuffix || '';\n    const { minDecimal, maxDecimal, decimalSeparator, thousandSeparator, wrapNegativeNumber } = retrieveFormatterOptions(columnDef, grid, 'currency', 'group');\n    if (isNumber(val)) {\n        const colorStyle = val >= 0 ? 'green' : 'red';\n        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, wrapNegativeNumber, currencyPrefix, currencySuffix, decimalSeparator, thousandSeparator);\n        return createDomElement('span', { style: { color: colorStyle }, textContent: `${prefix}${formattedNumber}${suffix}` });\n    }\n    return '';\n};\n//# sourceMappingURL=sumTotalsCurrencyColoredFormatter.js.map","import { avgTotalsPercentageFormatter } from './avgTotalsPercentageFormatter.js';\nimport { avgTotalsDollarFormatter } from './avgTotalsDollarFormatter.js';\nimport { avgTotalsCurrencyFormatter } from './avgTotalsCurrencyFormatter.js';\nimport { avgTotalsFormatter } from './avgTotalsFormatter.js';\nimport { minTotalsFormatter } from './minTotalsFormatter.js';\nimport { maxTotalsFormatter } from './maxTotalsFormatter.js';\nimport { sumTotalsColoredFormatter } from './sumTotalsColoredFormatter.js';\nimport { sumTotalsCurrencyFormatter } from './sumTotalsCurrencyFormatter.js';\nimport { sumTotalsCurrencyColoredFormatter } from './sumTotalsCurrencyColoredFormatter.js';\nimport { sumTotalsDollarColoredBoldFormatter } from './sumTotalsDollarColoredBoldFormatter.js';\nimport { sumTotalsDollarColoredFormatter } from './sumTotalsDollarColoredFormatter.js';\nimport { sumTotalsDollarBoldFormatter } from './sumTotalsDollarBoldFormatter.js';\nimport { sumTotalsDollarFormatter } from './sumTotalsDollarFormatter.js';\nimport { sumTotalsFormatter } from './sumTotalsFormatter.js';\nimport { sumTotalsBoldFormatter } from './sumTotalsBoldFormatter.js';\n/** Provides a list of different Formatters that will change the cell value displayed in the UI */\nexport const GroupTotalFormatters = {\n    /**\n     * Average all the column totals\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    avgTotals: avgTotalsFormatter,\n    /**\n     * Average all the column totals and display currency prefix/suffix via \"groupFormatterCurrencyPrefix\" and/or \"groupFormatterCurrencySuffix\"\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    avgTotalsCurrency: avgTotalsCurrencyFormatter,\n    /**\n     * Average all the column totals and display '$' at the end of the value\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    avgTotalsDollar: avgTotalsDollarFormatter,\n    /**\n     * Average all the column totals and display '%' at the end of the value\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    avgTotalsPercentage: avgTotalsPercentageFormatter,\n    /**\n     * Show max value of all the column totals\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    maxTotals: maxTotalsFormatter,\n    /**\n     * Show min value of all the column totals\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    minTotals: minTotalsFormatter,\n    /**\n     * Sums up all the column totals\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g.: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotals: sumTotalsFormatter,\n    /**\n     * Sums up all the column totals and display it in bold font weight\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsBold: sumTotalsBoldFormatter,\n    /**\n     * Sums up all the column totals, change color of text to red/green on negative/positive value\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsColored: sumTotalsColoredFormatter,\n    /**\n     * Sums up all the column totals and display currency\n     * Extra options available in \"params\":: \"groupFormatterPrefix\", \"groupFormatterSuffix\", \"groupFormatterCurrencyPrefix\" and/or \"groupFormatterCurrencySuffix\"\n     * e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsCurrency: sumTotalsCurrencyFormatter,\n    /**\n     * Sums up all the column totals and display currency with color of red/green text on negative/positive values\n     * Extra options available in \"params\":: \"groupFormatterPrefix\", \"groupFormatterSuffix\", \"groupFormatterCurrencyPrefix\" and/or \"groupFormatterCurrencySuffix\"\n     * e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsCurrencyColored: sumTotalsCurrencyColoredFormatter,\n    /**\n     * Sums up all the column totals and display dollar sign\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsDollar: sumTotalsDollarFormatter,\n    /**\n     * Sums up all the column totals and display dollar sign and show it in bold font weight\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsDollarBold: sumTotalsDollarBoldFormatter,\n    /**\n     * Sums up all the column totals, change color of text to red/green on negative/positive value\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsDollarColored: sumTotalsDollarColoredFormatter,\n    /**\n     * Sums up all the column totals, change color of text to red/green on negative/positive value, show it in bold font weight as well\n     * Extra options available in \"params\":: \"groupFormatterPrefix\" and \"groupFormatterSuffix\", e.g: params: { groupFormatterPrefix: '<i>Total</i>: ', groupFormatterSuffix: '$' }\n     */\n    sumTotalsDollarColoredBold: sumTotalsDollarColoredBoldFormatter,\n};\n//# sourceMappingURL=groupingFormatters.index.js.map"],"names":["sumTotalsFormatter","totals","columnDef","grid","field","val","_a","params","prefix","suffix","minDecimal","maxDecimal","decimalSeparator","thousandSeparator","wrapNegativeNumber","retrieveFormatterOptions","isNumber","formattedNumber","formatNumber","sumTotalsDollarFormatter","sumTotalsDollarColoredFormatter","colorStyle","createDomElement","sumTotalsDollarColoredBoldFormatter","sumTotalsDollarBoldFormatter","sumTotalsColoredFormatter","sumTotalsBoldFormatter","minTotalsFormatter","maxTotalsFormatter","avgTotalsPercentageFormatter","outputVal","thousandSeparatorFormatted","decimalFormatted","avgTotalsDollarFormatter","avgTotalsCurrencyFormatter","currencyPrefix","currencySuffix","avgTotalsFormatter","sumTotalsCurrencyFormatter","sumTotalsCurrencyColoredFormatter","GroupTotalFormatters"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}