{"version":3,"file":"example14-Buj3ezde.js","sources":["../../src/examples/slickgrid/example14.$au.ts","../../src/examples/slickgrid/example14.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example14.scss\";\nexport const name = \"example14\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example14.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"hideSubTitle = !hideSubTitle\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\" hidden.bind=\\\"hideSubTitle\\\"></div>\\n\\n<h3>Grid 1 <small>(with Header Grouping &amp; Colspan)</small></h3>\\n<aurelia-slickgrid grid-id=\\\"grid1\\\"\\n                    column-definitions.bind=\\\"columnDefinitions1\\\"\\n                    grid-options.bind=\\\"gridOptions1\\\"\\n                    dataset.bind=\\\"dataset1\\\">\\n</aurelia-slickgrid>\\n\\n<hr />\\n\\n<h3>Grid 2 <small>(with Header Grouping &amp; Frozen/Pinned Columns)</small></h3>\\n\\n<div class=\\\"col-sm 12\\\">\\n  <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"setFrozenColumns2(-1)\\\"\\n          data-test=\\\"remove-frozen-column-button\\\">\\n    <i class=\\\"mdi mdi-close\\\"></i> Remove Frozen Columns\\n  </button>\\n  <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"setFrozenColumns2(2)\\\"\\n          data-test=\\\"set-3frozen-columns\\\">\\n    <i class=\\\"mdi mdi-pin-outline\\\"></i> Set 3 Frozen Columns\\n  </button>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid2\\\"\\n                    column-definitions.bind=\\\"columnDefinitions2\\\"\\n                    grid-options.bind=\\\"gridOptions2\\\"\\n                    dataset.bind=\\\"dataset2\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady2($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport { type AureliaGridInstance, type Column, FieldType, type GridOption, type ItemMetadata } from 'aurelia-slickgrid';\nimport './example14.scss'; // provide custom CSS/SASS styling\n\nexport class Example14 {\n  title = 'Example 14: Column Span & Header Grouping';\n  subTitle = `\n  This example demonstrates how to easily span a row over multiple columns & how to group header titles.\n  <ul>\n    <li>Note that you can add Sort but remember that it will sort by the data which the row contains, even if the data is visually hidden by colspan it will still sort it</li>\n  </ul>\n  `;\n\n  aureliaGrid2!: AureliaGridInstance;\n  gridObj2: any;\n  columnDefinitions1: Column[] = [];\n  columnDefinitions2: Column[] = [];\n  gridOptions1!: GridOption;\n  gridOptions2!: GridOption;\n  dataset1: any[] = [];\n  dataset2: any[] = [];\n  hideSubTitle = false;\n\n  constructor() {\n    this.definedGrid1();\n    this.definedGrid2();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset1 = this.getData(500);\n    this.dataset2 = this.getData(500);\n  }\n\n  aureliaGridReady2(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid2 = aureliaGrid;\n    this.gridObj2 = aureliaGrid.slickGrid;\n  }\n\n  definedGrid1() {\n    this.columnDefinitions1 = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, columnGroup: 'Common Factor' },\n      { id: 'duration', name: 'Duration', field: 'duration', columnGroup: 'Common Factor' },\n      { id: 'start', name: 'Start', field: 'start', columnGroup: 'Period' },\n      { id: 'finish', name: 'Finish', field: 'finish', columnGroup: 'Period' },\n      { id: '%', name: '% Complete', field: 'percentComplete', selectable: false, columnGroup: 'Analysis' },\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', type: FieldType.boolean, columnGroup: 'Analysis' }\n    ];\n\n    this.gridOptions1 = {\n      enableAutoResize: false,\n      enableCellNavigation: true,\n      enableColumnReorder: false,\n      enableSorting: true,\n      createPreHeaderPanel: true,\n      showPreHeaderPanel: true,\n      preHeaderPanelHeight: 28,\n      gridHeight: 275,\n      gridWidth: 800,\n      enableExcelExport: true,\n      excelExportOptions: {\n        exportWithFormatter: false\n      },\n      externalResources: [new ExcelExportService()],\n      explicitInitialization: true,\n      dataView: {\n        globalItemMetadataProvider: {\n          getRowMetadata: (item: any, row: number) => this.renderDifferentColspan(item, row),\n        },\n      },\n      gridMenu: {\n        iconButtonContainer: 'preheader' // we can display the grid menu icon in either the preheader or in the column header (default)\n      },\n    };\n  }\n\n  definedGrid2() {\n    this.columnDefinitions2 = [\n      { id: 'sel', name: '#', field: 'num', behavior: 'select', cssClass: 'cell-selection', width: 40, resizable: false, selectable: false },\n      { id: 'title', name: 'Title', field: 'title', sortable: true, columnGroup: 'Common Factor' },\n      { id: 'duration', name: 'Duration', field: 'duration', columnGroup: 'Common Factor' },\n      { id: 'start', name: 'Start', field: 'start', columnGroup: 'Period' },\n      { id: 'finish', name: 'Finish', field: 'finish', columnGroup: 'Period' },\n      { id: '%', name: '% Complete', field: 'percentComplete', selectable: false, columnGroup: 'Analysis' },\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', type: FieldType.boolean, columnGroup: 'Analysis' }\n    ];\n\n    this.gridOptions2 = {\n      enableCellNavigation: true,\n      enableColumnReorder: false,\n      createPreHeaderPanel: true,\n      showPreHeaderPanel: true,\n      preHeaderPanelHeight: 25,\n      explicitInitialization: true,\n      gridHeight: 275,\n      gridWidth: 800,\n      frozenColumn: 2,\n      enableExcelExport: true,\n      excelExportOptions: {\n        exportWithFormatter: false\n      },\n      externalResources: [new ExcelExportService()],\n      gridMenu: { hideClearFrozenColumnsCommand: false },\n      headerMenu: { hideFreezeColumnsCommand: false }\n    };\n  }\n\n  getData(count: number) {\n    // Set up some test columns.\n    const mockDataset: any[] = [];\n    for (let i = 0; i < count; i++) {\n      mockDataset[i] = {\n        id: i,\n        num: i,\n        title: 'Task ' + i,\n        duration: '5 days',\n        percentComplete: Math.round(Math.random() * 100),\n        start: '01/01/2009',\n        finish: '01/05/2009',\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    return mockDataset;\n  }\n\n  setFrozenColumns2(frozenCols: number) {\n    this.gridObj2.setOptions({ frozenColumn: frozenCols });\n    this.gridOptions2 = this.gridObj2.getOptions();\n  }\n\n  /**\n   * A callback to render different row column span\n   * Your callback will always have the \"item\" argument which you can use to decide on the colspan\n   * Your return must always be in the form of:: return { columns: {}}\n   */\n  renderDifferentColspan(item: any, row: number): ItemMetadata {\n    if (item.id % 2 === 1 || row % 2 === 1) {\n      return {\n        columns: {\n          duration: {\n            colspan: 3 // \"duration\" will span over 3 columns\n          }\n        }\n      };\n    }\n    return {\n      columns: {\n        0: {\n          colspan: '*' // starting at column index 0, we will span accross all column (*)\n        }\n      }\n    };\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example14_decorators","_init","customElement","__au2ViewDef","Example14","__publicField","aureliaGrid","FieldType","ExcelExportService","item","row","count","mockDataset","i","frozenCols","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}