{"version":3,"file":"example6-BFSUp_kE.js","sources":["../../src/examples/slickgrid/example6.$au.ts","../../src/examples/slickgrid/example6.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example6\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example6.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-5\\\">\\n    <div class.bind=\\\"status.class\\\" role=\\\"alert\\\" data-test=\\\"status\\\">\\n      <strong>Status: </strong> ${status.text}\\n      <span hidden.bind=\\\"!processing\\\">\\n        <i class=\\\"mdi mdi-sync mdi-spin\\\"></i>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-filters-sorting\\\"\\n                click.trigger=\\\"clearAllFiltersAndSorts()\\\" title=\\\"Clear all Filters & Sorts\\\">\\n          <i class=\\\"mdi mdi-filter-remove-outline\\\"></i>\\n          Clear all Filter & Sorts\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-filter\\\"\\n                click.trigger=\\\"setFiltersDynamically()\\\">\\n          Set Filters Dynamically\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-sorting\\\"\\n                click.trigger=\\\"setSortingDynamically()\\\">\\n          Set Sorting Dynamically\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"reset-presets\\\"\\n                click.trigger=\\\"resetToOriginalPresets()\\\">\\n          Reset Original Presets\\n        </button>\\n        <label for=\\\"serverdelay\\\" class=\\\"ml-4\\\">Server Delay: </label>\\n        <input id=\\\"serverdelay\\\" type=\\\"number\\\" data-test=\\\"server-delay\\\" style=\\\"width: 55px\\\"\\n              value.bind=\\\"serverWaitDelay\\\"\\n              title=\\\"input a fake timer delay to simulate slow server response\\\" />\\n      </div>\\n    </div>\\n\\n    <hr>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"switchLanguage()\\\"\\n                data-test=\\\"language-button\\\">\\n          <i class=\\\"mdi mdi-translate\\\"></i>\\n          Switch Language\\n        </button>\\n        <b>Locale:</b>\\n        <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\n          ${selectedLanguage + '.json'}\\n        </span>\\n      </div>\\n\\n      <span style=\\\"margin-left: 10px\\\">\\n        <label>Pagination strategy: </label>\\n        <span data-test=\\\"radioStrategy\\\">\\n          <label class=\\\"radio-inline control-label\\\" for=\\\"radioOffset\\\">\\n            <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" data-test=\\\"offset\\\" id=\\\"radioOffset\\\" checked value.bind=\\\"false\\\"\\n            click.trigger=\\\"setIsWithCursor(false)\\\"> Offset\\n          </label>\\n          <label class=\\\"radio-inline control-label\\\" for=\\\"radioCursor\\\">\\n            <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" data-test=\\\"cursor\\\" id=\\\"radioCursor\\\" value.bind=\\\"true\\\"\\n            click.trigger=\\\"setIsWithCursor(true)\\\"> Cursor\\n          </label>\\n        </span>\\n      </span>\\n    </div>\\n    <br />\\n    <div if.bind=\\\"metrics\\\" style=\\\"margin: 10px 0px\\\">\\n      <b>Metrics:</b> ${metrics.endTime | dateFormat: 'DD MMM, h:mm:ss a'} | ${metrics.executionTime}ms |\\n      ${metrics.totalItemCount}\\n      items\\n    </div>\\n    <div class=\\\"row\\\" style=\\\"margin-bottom: 5px\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <label>Programmatically go to first/last page:</label>\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n          <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-first-page\\\" click.trigger=\\\"goToFirstPage()\\\">\\n            <i class=\\\"mdi mdi-page-first\\\"></i>\\n          </button>\\n          <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-last-page\\\" click.trigger=\\\"goToLastPage()\\\">\\n            <i class=\\\"mdi mdi-page-last icon\\\"></i>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-7\\\">\\n    <div class=\\\"alert alert-info\\\" data-test=\\\"alert-graphql-query\\\">\\n      <strong>GraphQL Query:</strong> <span data-test=\\\"graphql-query-result\\\">${graphqlQuery}</span>\\n    </div>\\n  </div>\\n</div>\\n\\n<hr />\\n\\n<aurelia-slickgrid grid-id=\\\"grid6\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                    on-grid-state-changed.trigger=\\\"gridStateChanged($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { I18N } from '@aurelia/i18n';\nimport { addDay, format as tempoFormat } from '@formkit/tempo';\nimport { GraphqlService, type GraphqlPaginatedResult, type GraphqlServiceApi, type GraphqlServiceOption } from '@slickgrid-universal/graphql';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  type CursorPageInfo,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type GridStateChange,\n  type Metrics,\n  type MultipleSelectOption,\n  OperatorType,\n  SortDirection,\n} from 'aurelia-slickgrid';\nimport { resolve } from 'aurelia';\n\nconst defaultPageSize = 20;\nconst GRAPHQL_QUERY_DATASET_NAME = 'users';\nconst FAKE_SERVER_DELAY = 250;\n\nexport class Example6 {\n  title = 'Example 6: Grid with Backend GraphQL Service';\n  subTitle = `\n  Use it when you need to support Pagination with a GraphQL endpoint (for simple JSON, use a regular grid).\n  <br/>Take a look at the (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/backend-services/graphql\" target=\"_blank\">Wiki docs</a>)\n    <ul class=\"small\">\n      <li><span class=\"red bold\">(*) NO DATA SHOWN</span> - just change filters &amp; page and look at the \"GraphQL Query\" changing</li>\n      <li>Only \"Name\" field is sortable for the demo (because we use JSON files), however \"multiColumnSort: true\" is also supported</li>\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)</li>\n      <ul>\n        <li>The (*) can be used as startsWith (ex.: \"abc*\" => startsWith \"abc\") / endsWith (ex.: \"*xyz\" => endsWith \"xyz\")</li>\n        <li>The other operators can be used on column type number for example: \">=100\" (greater or equal than 100)</li>\n      </ul>\n      <li>You can also preload a grid with certain \"presets\" like Filters / Sorters / Pagination <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grid-state-preset\" target=\"_blank\">Wiki - Grid Preset</a></li>\n      <li>Also note that the column Name has a filter with a custom %% operator that behaves like an SQL LIKE operator supporting % wildcards.</li>\n      <li>Depending on your configuration, your GraphQL Server might already support regex querying (e.g. Hasura <a href=\"https://hasura.io/docs/latest/queries/postgres/filters/text-search-operators/#_regex\" target=\"_blank\">_regex</a>)\n      or you could add your own implementation (e.g. see this SO <a href=\"https://stackoverflow.com/a/37981802/1212166\">Question</a>).</li>\n    </ul>\n  `;\n  isWithCursor = false;\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  metrics!: Metrics;\n  graphqlService = new GraphqlService();\n\n  graphqlQuery = '';\n  hideSubTitle = false;\n  processing = false;\n  selectedLanguage: string;\n  status = { text: '', class: '' };\n  serverWaitDelay = FAKE_SERVER_DELAY; // server simulation with default of 250ms but 50ms for Cypress tests\n\n  constructor(private readonly i18n: I18N = resolve(I18N)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n  }\n\n  detaching() {\n    this.saveCurrentGridState();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'name', field: 'name', nameKey: 'NAME', width: 60, columnGroupKey: 'CUSTOMER_INFORMATION',\n        type: FieldType.string,\n        sortable: true,\n        filterable: true,\n        filter: {\n          model: Filters.compoundInput,\n          compoundOperatorList: [\n            { operator: '', desc: 'Contains' },\n            { operator: '<>', desc: 'Not Contains' },\n            { operator: '=', desc: 'Equals' },\n            { operator: '!=', desc: 'Not equal to' },\n            { operator: 'a*', desc: 'Starts With' },\n            { operator: 'Custom', desc: 'SQL Like' },\n          ],\n        }\n      },\n      {\n        id: 'gender', field: 'gender', nameKey: 'GENDER', filterable: true, sortable: true, width: 60, columnGroupKey: 'CUSTOMER_INFORMATION',\n        filter: {\n          model: Filters.singleSelect,\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male', labelKey: 'MALE' }, { value: 'female', label: 'female', labelKey: 'FEMALE' }]\n        }\n      },\n      {\n        id: 'company', field: 'company', nameKey: 'COMPANY', width: 60, columnGroupKey: 'CUSTOMER_INFORMATION',\n        sortable: true,\n        filterable: true,\n        filter: {\n          model: Filters.multipleSelect,\n          collection: [{ value: 'acme', label: 'Acme' }, { value: 'abc', label: 'Company ABC' }, { value: 'xyz', label: 'Company XYZ' }],\n          filterOptions: {\n            filter: true // adds a filter on top of the multi-select dropdown\n          } as MultipleSelectOption\n        }\n      },\n      {\n        id: 'billingAddressStreet', field: 'billing.address.street', nameKey: 'BILLING.ADDRESS.STREET',\n        width: 60, filterable: true, sortable: true, columnGroupKey: 'BILLING.INFORMATION',\n      },\n      {\n        id: 'billingAddressZip', field: 'billing.address.zip', nameKey: 'BILLING.ADDRESS.ZIP', width: 60,\n        type: FieldType.number,\n        columnGroupKey: 'BILLING.INFORMATION',\n        filterable: true, sortable: true,\n        filter: {\n          model: Filters.compoundInput\n        },\n        formatter: Formatters.multiple, params: { formatters: [Formatters.complexObject, Formatters.translate] }\n      },\n      {\n        id: 'finish', field: 'finish', name: 'Date', formatter: Formatters.dateIso, sortable: true, minWidth: 90, width: 120, exportWithFormatter: true,\n        columnGroupKey: 'BILLING.INFORMATION',\n        type: FieldType.date,\n        filterable: true,\n        filter: {\n          model: Filters.dateRange,\n          filterShortcuts: [\n            {\n              titleKey: 'NEXT_20_DAYS',\n              iconCssClass: 'mdi mdi-calendar',\n              searchTerms: [tempoFormat(new Date(), 'YYYY-MM-DD'), tempoFormat(addDay(new Date(), 20), 'YYYY-MM-DD')],\n            },\n          ]\n        }\n      },\n    ];\n\n    const currentYear = new Date().getFullYear();\n    const presetLowestDay = `${currentYear}-01-01`;\n    const presetHighestDay = `${currentYear}-02-15`;\n\n    this.gridOptions = {\n      enableFiltering: true,\n      enableCellNavigation: true,\n      enableTranslate: true,\n      createPreHeaderPanel: true,\n      showPreHeaderPanel: true,\n      preHeaderPanelHeight: 28,\n      i18n: this.i18n,\n      gridHeight: 200,\n      gridWidth: 900,\n      compoundOperatorAltTexts: {\n        // where '=' is any of the `OperatorString` type shown above\n        text: { 'Custom': { operatorAlt: '%%', descAlt: 'SQL Like' } },\n      },\n      gridMenu: {\n        resizeOnShowHeaderRow: true,\n      },\n      enablePagination: true, // you could optionally disable the Pagination\n      pagination: {\n        pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\n        pageSize: defaultPageSize,\n        totalItems: 0\n      },\n      presets: {\n        columns: [\n          { columnId: 'name', width: 100 },\n          { columnId: 'gender', width: 55 },\n          { columnId: 'company' },\n          { columnId: 'billingAddressZip' }, // flip column position of Street/Zip to Zip/Street\n          { columnId: 'billingAddressStreet', width: 120 },\n          { columnId: 'finish', width: 130 },\n        ],\n        filters: [\n          // you can use OperatorType or type them as string, e.g.: operator: 'EQ'\n          { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\n          // { columnId: 'name', searchTerms: ['John Doe'], operator: OperatorType.contains },\n          { columnId: 'name', searchTerms: ['Joh*oe'], operator: OperatorType.startsWithEndsWith },\n          { columnId: 'company', searchTerms: ['xyz'], operator: 'IN' },\n\n          // use a date range with 2 searchTerms values\n          { columnId: 'finish', searchTerms: [presetLowestDay, presetHighestDay], operator: OperatorType.rangeInclusive },\n        ],\n        sorters: [\n          // direction can written as 'asc' (uppercase or lowercase) and/or use the SortDirection type\n          { columnId: 'name', direction: 'asc' },\n          { columnId: 'company', direction: SortDirection.DESC }\n        ],\n        pagination: { pageNumber: this.isWithCursor ? 1 : 2, pageSize: 20 } // if cursor based, start at page 1\n      },\n      backendServiceApi: {\n        service: this.graphqlService,\n        options: {\n          datasetName: GRAPHQL_QUERY_DATASET_NAME, // the only REQUIRED property\n          addLocaleIntoQuery: true,   // optionally add current locale into the query\n          extraQueryArguments: [{     // optionally add some extra query arguments as input query arguments\n            field: 'userId',\n            value: 123\n          }],\n          filterQueryOverride: ({ fieldName, columnDef, columnFilterOperator, searchValues }) => {\n            if (columnFilterOperator === OperatorType.custom && columnDef?.id === 'name') {\n              // technically speaking GraphQL isn't a database query language like SQL, it's an application query language.\n              // What that means is that GraphQL won't let you write arbitrary queries out of the box.\n              // It will only support the types of queries defined in your GraphQL schema.\n              // see this SO: https://stackoverflow.com/a/37981802/1212166\n              return { field: fieldName, operator: 'Like', value: searchValues[0] };\n            }\n            return;\n          },\n          useCursor: this.isWithCursor, // sets pagination strategy, if true requires a call to setPageInfo() when graphql call returns\n          // when dealing with complex objects, we want to keep our field name with double quotes\n          // example with gender: query { users (orderBy:[{field:\"gender\",direction:ASC}]) {}\n          keepArgumentFieldDoubleQuotes: true\n        },\n        // you can define the onInit callback OR enable the \"executeProcessCommandOnInit\" flag in the service init\n        // onInit: (query) => this.getCustomerApiCall(query)\n        preProcess: () => this.displaySpinner(true),\n        process: (query) => this.getCustomerApiCall(query),\n        postProcess: (result: GraphqlPaginatedResult) => {\n          this.metrics = result.metrics as Metrics;\n          this.displaySpinner(false);\n        }\n      } as GraphqlServiceApi\n    };\n  }\n\n  clearAllFiltersAndSorts() {\n    if (this.aureliaGrid && this.aureliaGrid.gridService) {\n      this.aureliaGrid.gridService.clearAllFiltersAndSorts();\n    }\n  }\n\n  displaySpinner(isProcessing: boolean) {\n    this.processing = isProcessing;\n    this.status = (isProcessing)\n      ? { text: 'processing...', class: 'alert alert-danger' }\n      : { text: 'finished', class: 'alert alert-success' };\n  }\n\n  /**\n   * Calling your GraphQL backend server should always return a Promise or Observable of type GraphqlPaginatedResult (or GraphqlResult without Pagination)\n   * @param query\n   * @return Promise<GraphqlPaginatedResult>\n   */\n  getCustomerApiCall(_query: string): Promise<GraphqlPaginatedResult> {\n    let pageInfo: CursorPageInfo;\n    if (this.aureliaGrid?.paginationService) {\n      const { paginationService } = this.aureliaGrid;\n      // there seems to a timing issue where when you click \"cursor\" it requests the data before the pagination-service is initialized...\n      const pageNumber = (paginationService as any)._initialized ? paginationService.getCurrentPageNumber() : 1;\n      // In the real world, each node item would be A,B,C...AA,AB,AC, etc and so each page would actually be something like A-T, T-AN\n      // but for this mock data it's easier to represent each page as\n      // Page1: A-B\n      // Page2: B-C\n      // Page3: C-D\n      // Page4: D-E\n      // Page5: E-F\n      const startCursor = String.fromCharCode('A'.charCodeAt(0) + pageNumber - 1);\n      const endCursor = String.fromCharCode(startCursor.charCodeAt(0) + 1);\n      pageInfo = {\n        hasPreviousPage: paginationService.dataFrom === 0,\n        hasNextPage: paginationService.dataTo === 100,\n        startCursor,\n        endCursor\n      };\n    } else {\n      pageInfo = {\n        hasPreviousPage: false,\n        hasNextPage: true,\n        startCursor: 'A',\n        endCursor: 'B'\n      };\n    }\n\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\n    // for the demo purpose, we will call a mock WebAPI function\n    const mockedResult = {\n      // the dataset name is the only unknown property\n      // will be the same defined in your GraphQL Service init, in our case GRAPHQL_QUERY_DATASET_NAME\n      data: {\n        [GRAPHQL_QUERY_DATASET_NAME]: {\n          nodes: [],\n          totalCount: 100,\n          pageInfo\n        }\n      }\n    };\n\n    return new Promise(resolve => {\n      window.setTimeout(() => {\n        this.graphqlQuery = this.graphqlService.buildQuery();\n        // this.graphqlQuery = this.gridOptions.backendServiceApi!.service.buildQuery();\n        if (this.isWithCursor) {\n          // When using cursor pagination, the pagination service needs to be updated with the PageInfo data from the latest request\n          // This might be done automatically if using a framework specific slickgrid library\n          // Note because of this timeout, this may cause race conditions with rapid clicks!\n          this.aureliaGrid?.paginationService?.setCursorPageInfo(mockedResult.data[GRAPHQL_QUERY_DATASET_NAME].pageInfo);\n        }\n        resolve(mockedResult);\n      }, this.serverWaitDelay);\n    });\n  }\n\n  goToFirstPage() {\n    this.aureliaGrid.paginationService!.goToFirstPage();\n  }\n\n  goToLastPage() {\n    this.aureliaGrid.paginationService!.goToLastPage();\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  gridStateChanged(gridStateChanges: GridStateChange) {\n    console.log('GraphQL sample, Grid State changed:: ', gridStateChanges);\n  }\n\n  saveCurrentGridState() {\n    console.log('GraphQL current grid state', this.aureliaGrid.gridStateService.getCurrentGridState());\n  }\n\n  setFiltersDynamically() {\n    const currentYear = new Date().getFullYear();\n    const presetLowestDay = `${currentYear}-01-01`;\n    const presetHighestDay = `${currentYear}-02-15`;\n\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\n    this.aureliaGrid.filterService.updateFilters([\n      { columnId: 'gender', searchTerms: ['female'], operator: OperatorType.equal },\n      { columnId: 'name', searchTerms: ['Jane'], operator: OperatorType.startsWith },\n      { columnId: 'company', searchTerms: ['acme'], operator: 'IN' },\n      { columnId: 'billingAddressZip', searchTerms: ['11'], operator: OperatorType.greaterThanOrEqual },\n      { columnId: 'finish', searchTerms: [presetLowestDay, presetHighestDay], operator: OperatorType.rangeInclusive },\n    ]);\n  }\n\n  setSortingDynamically() {\n    this.aureliaGrid.sortService.updateSorting([\n      // orders matter, whichever is first in array will be the first sorted column\n      { columnId: 'billingAddressZip', direction: 'DESC' },\n      { columnId: 'company', direction: 'ASC' },\n    ]);\n  }\n\n  resetToOriginalPresets() {\n    const currentYear = new Date().getFullYear();\n    const presetLowestDay = `${currentYear}-01-01`;\n    const presetHighestDay = `${currentYear}-02-15`;\n\n    this.aureliaGrid.filterService.updateFilters([\n      // you can use OperatorType or type them as string, e.g.: operator: 'EQ'\n      { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\n      // { columnId: 'name', searchTerms: ['John Doe'], operator: OperatorType.contains },\n      { columnId: 'name', searchTerms: ['Joh*oe'], operator: OperatorType.startsWithEndsWith },\n      { columnId: 'company', searchTerms: ['xyz'], operator: 'IN' },\n\n      // use a date range with 2 searchTerms values\n      { columnId: 'finish', searchTerms: [presetLowestDay, presetHighestDay], operator: OperatorType.rangeInclusive },\n    ]);\n    this.aureliaGrid.sortService.updateSorting([\n      // direction can written as 'asc' (uppercase or lowercase) and/or use the SortDirection type\n      { columnId: 'name', direction: 'asc' },\n      { columnId: 'company', direction: SortDirection.DESC }\n    ]);\n    window.setTimeout(() => {\n      this.aureliaGrid.paginationService?.changeItemPerPage(20);\n      this.aureliaGrid.paginationService?.goToPageNumber(2);\n    });\n  }\n\n  setIsWithCursor(isWithCursor: boolean) {\n    this.isWithCursor = isWithCursor;\n    this.resetOptions({ useCursor: this.isWithCursor });\n    return true;\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  private resetOptions(options: Partial<GraphqlServiceOption>) {\n    this.displaySpinner(true);\n    const graphqlService = this.gridOptions.backendServiceApi!.service as GraphqlService;\n    this.aureliaGrid.paginationService!.setCursorBased(options.useCursor!);\n    graphqlService.updateOptions(options);\n    this.gridOptions = { ...this.gridOptions };\n    this.aureliaGrid.paginationService?.goToFirstPage();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example6_decorators","_init","defaultPageSize","GRAPHQL_QUERY_DATASET_NAME","FAKE_SERVER_DELAY","customElement","__au2ViewDef","Example6","i18n","resolve","I18N","__publicField","GraphqlService","defaultLang","aureliaGrid","FieldType","Filters","Formatters","tempoFormat","addDay","currentYear","presetLowestDay","presetHighestDay","OperatorType","SortDirection","fieldName","columnDef","columnFilterOperator","searchValues","query","result","isProcessing","_query","pageInfo","_a","paginationService","pageNumber","startCursor","endCursor","mockedResult","_b","gridStateChanges","isWithCursor","nextLanguage","options","graphqlService","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"ke,CAAG,EAClBC,EAAY,CAAC,EAC1B,IAAIC,EACG,SAASC,EAASC,EAAW,CAC7BF,IACHA,EAAKG,EAAc,OAAO,CAAE,KAAAP,EAAM,SAAAC,EAAU,aAAAC,EAAc,UAAAC,EAAW,GAEvEG,EAAU,SAASF,CAAE,CACvB,4lCCZAI,EAAAC,EAmBA,MAAMC,EAAkB,GAClBC,EAA6B,QAC7BC,GAAoB,IAAIJ,EAAA,CAAAK,EAAAC,CAAA,CAAA,EAEvB,MAAMC,CAAS,CAkCpB,YAA6BC,EAAaC,EAAQC,CAAI,EAAG,CAA5B,KAAA,KAAAF,EAjCrBG,EAAA,KAAA,QAAA,8CAAA,EACGA,EAAA,KAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAiBIA,EAAA,KAAA,eAAA,EAAA,EACfA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,oBAA8B,EAAC,EAC/BA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,UAAiB,EAAC,EAClBA,EAAA,KAAA,SAAA,EACAA,EAAA,KAAA,iBAAiB,IAAIC,CAAe,EAErBD,EAAA,KAAA,eAAA,EAAA,EACAA,EAAA,KAAA,eAAA,EAAA,EACFA,EAAA,KAAA,aAAA,EAAA,EACbA,EAAA,KAAA,kBAAA,EACAA,EAAA,KAAA,SAAS,CAAE,KAAM,GAAI,MAAO,GAAG,EACbA,EAAA,KAAA,kBAAAP,EAAA,EAIhB,KAAK,WAAW,EAGhB,MAAMS,EAAc,KACf,KAAA,KAAK,UAAUA,CAAW,EAC/B,KAAK,iBAAmBA,CAAA,CAG1B,WAAY,CACV,KAAK,qBAAqB,CAAA,CAG5B,iBAAiBC,EAAkC,CACjD,KAAK,YAAcA,CAAA,CAGrB,YAAa,CACX,KAAK,kBAAoB,CACvB,CACE,GAAI,OAAQ,MAAO,OAAQ,QAAS,OAAQ,MAAO,GAAI,eAAgB,uBACvE,KAAMC,EAAU,OAChB,SAAU,GACV,WAAY,GACZ,OAAQ,CACN,MAAOC,EAAQ,cACf,qBAAsB,CACpB,CAAE,SAAU,GAAI,KAAM,UAAW,EACjC,CAAE,SAAU,KAAM,KAAM,cAAe,EACvC,CAAE,SAAU,IAAK,KAAM,QAAS,EAChC,CAAE,SAAU,KAAM,KAAM,cAAe,EACvC,CAAE,SAAU,KAAM,KAAM,aAAc,EACtC,CAAE,SAAU,SAAU,KAAM,UAAW,CAAA,CACzC,CAEJ,EACA,CACE,GAAI,SAAU,MAAO,SAAU,QAAS,SAAU,WAAY,GAAM,SAAU,GAAM,MAAO,GAAI,eAAgB,uBAC/G,OAAQ,CACN,MAAOA,EAAQ,aACf,WAAY,CAAC,CAAE,MAAO,GAAI,MAAO,EAAM,EAAA,CAAE,MAAO,OAAQ,MAAO,OAAQ,SAAU,MAAO,EAAG,CAAE,MAAO,SAAU,MAAO,SAAU,SAAU,QAAU,CAAA,CAAA,CAEvJ,EACA,CACE,GAAI,UAAW,MAAO,UAAW,QAAS,UAAW,MAAO,GAAI,eAAgB,uBAChF,SAAU,GACV,WAAY,GACZ,OAAQ,CACN,MAAOA,EAAQ,eACf,WAAY,CAAC,CAAE,MAAO,OAAQ,MAAO,MAAU,EAAA,CAAE,MAAO,MAAO,MAAO,eAAiB,CAAE,MAAO,MAAO,MAAO,cAAe,EAC7H,cAAe,CACb,OAAQ,EAAA,CACV,CAEJ,EACA,CACE,GAAI,uBAAwB,MAAO,yBAA0B,QAAS,yBACtE,MAAO,GAAI,WAAY,GAAM,SAAU,GAAM,eAAgB,qBAC/D,EACA,CACE,GAAI,oBAAqB,MAAO,sBAAuB,QAAS,sBAAuB,MAAO,GAC9F,KAAMD,EAAU,OAChB,eAAgB,sBAChB,WAAY,GAAM,SAAU,GAC5B,OAAQ,CACN,MAAOC,EAAQ,aACjB,EACA,UAAWC,EAAW,SAAU,OAAQ,CAAE,WAAY,CAACA,EAAW,cAAeA,EAAW,SAAS,CAAE,CACzG,EACA,CACE,GAAI,SAAU,MAAO,SAAU,KAAM,OAAQ,UAAWA,EAAW,QAAS,SAAU,GAAM,SAAU,GAAI,MAAO,IAAK,oBAAqB,GAC3I,eAAgB,sBAChB,KAAMF,EAAU,KAChB,WAAY,GACZ,OAAQ,CACN,MAAOC,EAAQ,UACf,gBAAiB,CACf,CACE,SAAU,eACV,aAAc,mBACd,YAAa,CAACE,EAAgB,IAAA,KAAQ,YAAY,EAAGA,EAAYC,MAAW,KAAQ,EAAE,EAAG,YAAY,CAAC,CAAA,CACxG,CACF,CACF,CAEJ,EAEA,MAAMC,EAAc,IAAI,KAAK,EAAE,YAAY,EACrCC,EAAkB,aAClBC,EAAmB,aAEzB,KAAK,YAAc,CACjB,gBAAiB,GACjB,qBAAsB,GACtB,gBAAiB,GACjB,qBAAsB,GACtB,mBAAoB,GACpB,qBAAsB,GACtB,KAAM,KAAK,KACX,WAAY,IACZ,UAAW,IACX,yBAA0B,CAExB,KAAM,CAAE,OAAU,CAAE,YAAa,KAAM,QAAS,UAAa,CAAA,CAC/D,EACA,SAAU,CACR,sBAAuB,EACzB,EACA,iBAAkB,GAClB,WAAY,CACV,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAG,EAC/C,SAAUpB,EACV,WAAY,CACd,EACA,QAAS,CACP,QAAS,CACP,CAAE,SAAU,OAAQ,MAAO,GAAI,EAC/B,CAAE,SAAU,SAAU,MAAO,EAAG,EAChC,CAAE,SAAU,SAAU,EACtB,CAAE,SAAU,mBAAoB,EAChC,CAAE,SAAU,uBAAwB,MAAO,GAAI,EAC/C,CAAE,SAAU,SAAU,MAAO,GAAI,CACnC,EACA,QAAS,CAEP,CAAE,SAAU,SAAU,YAAa,CAAC,MAAM,EAAG,SAAUqB,EAAa,KAAM,EAE1E,CAAE,SAAU,OAAQ,YAAa,CAAC,QAAQ,EAAG,SAAUA,EAAa,kBAAmB,EACvF,CAAE,SAAU,UAAW,YAAa,CAAC,KAAK,EAAG,SAAU,IAAK,EAG5D,CAAE,SAAU,SAAU,YAAa,CAACF,EAAiBC,CAAgB,EAAG,SAAUC,EAAa,cAAe,CAChH,EACA,QAAS,CAEP,CAAE,SAAU,OAAQ,UAAW,KAAM,EACrC,CAAE,SAAU,UAAW,UAAWC,EAAc,IAAK,CACvD,EACA,WAAY,CAAE,WAAY,KAAK,aAAe,EAAI,EAAG,SAAU,EAAG,CACpE,EACA,kBAAmB,CACjB,QAAS,KAAK,eACd,QAAS,CACP,YAAarB,EACb,mBAAoB,GACpB,oBAAqB,CAAC,CACpB,MAAO,SACP,MAAO,GAAA,CACR,EACD,oBAAqB,CAAC,CAAE,UAAAsB,EAAW,UAAAC,EAAW,qBAAAC,EAAsB,aAAAC,KAAmB,CACrF,GAAID,IAAyBJ,EAAa,SAAUG,GAAA,YAAAA,EAAW,MAAO,OAK7D,MAAA,CAAE,MAAOD,EAAW,SAAU,OAAQ,MAAOG,EAAa,CAAC,CAAE,CAGxE,EACA,UAAW,KAAK,aAGhB,8BAA+B,EACjC,EAGA,WAAY,IAAM,KAAK,eAAe,EAAI,EAC1C,QAAUC,GAAU,KAAK,mBAAmBA,CAAK,EACjD,YAAcC,GAAmC,CAC/C,KAAK,QAAUA,EAAO,QACtB,KAAK,eAAe,EAAK,CAAA,CAC3B,CAEJ,CAAA,CAGF,yBAA0B,CACpB,KAAK,aAAe,KAAK,YAAY,aAClC,KAAA,YAAY,YAAY,wBAAwB,CACvD,CAGF,eAAeC,EAAuB,CACpC,KAAK,WAAaA,EAClB,KAAK,OAAUA,EACX,CAAE,KAAM,gBAAiB,MAAO,oBAAqB,EACrD,CAAE,KAAM,WAAY,MAAO,qBAAsB,CAAA,CAQvD,mBAAmBC,EAAiD,OAC9D,IAAAC,EACA,IAAAC,EAAA,KAAK,cAAL,MAAAA,EAAkB,kBAAmB,CACjC,KAAA,CAAE,kBAAAC,GAAsB,KAAK,YAE7BC,EAAcD,EAA0B,aAAeA,EAAkB,qBAAyB,EAAA,EAQlGE,EAAc,OAAO,aAAa,GAAoBD,EAAa,CAAC,EACpEE,EAAY,OAAO,aAAaD,EAAY,WAAW,CAAC,EAAI,CAAC,EACxDJ,EAAA,CACT,gBAAiBE,EAAkB,WAAa,EAChD,YAAaA,EAAkB,SAAW,IAC1C,YAAAE,EACA,UAAAC,CACF,CAAA,MAEWL,EAAA,CACT,gBAAiB,GACjB,YAAa,GACb,YAAa,IACb,UAAW,GACb,EAKF,MAAMM,EAAe,CAGnB,KAAM,CACJ,CAACpC,CAA0B,EAAG,CAC5B,MAAO,CAAC,EACR,WAAY,IACZ,SAAA8B,CAAA,CACF,CAEJ,EAEO,OAAA,IAAI,QAAQxB,GAAW,CAC5B,OAAO,WAAW,IAAM,SACjB,KAAA,aAAe,KAAK,eAAe,WAAW,EAE/C,KAAK,gBAIP+B,GAAAN,EAAA,KAAK,cAAL,YAAAA,EAAkB,oBAAlB,MAAAM,EAAqC,kBAAkBD,EAAa,KAAKpC,CAA0B,EAAE,WAEvGM,EAAQ8B,CAAY,CAAA,EACnB,KAAK,eAAe,CAAA,CACxB,CAAA,CAGH,eAAgB,CACT,KAAA,YAAY,kBAAmB,cAAc,CAAA,CAGpD,cAAe,CACR,KAAA,YAAY,kBAAmB,aAAa,CAAA,CAInD,iBAAiBE,EAAmC,CAC1C,QAAA,IAAI,wCAAyCA,CAAgB,CAAA,CAGvE,sBAAuB,CACrB,QAAQ,IAAI,6BAA8B,KAAK,YAAY,iBAAiB,qBAAqB,CAAA,CAGnG,uBAAwB,CACtB,MAAMrB,EAAc,IAAI,KAAK,EAAE,YAAY,EACrCC,EAAkB,aAClBC,EAAmB,aAGpB,KAAA,YAAY,cAAc,cAAc,CAC3C,CAAE,SAAU,SAAU,YAAa,CAAC,QAAQ,EAAG,SAAUC,EAAa,KAAM,EAC5E,CAAE,SAAU,OAAQ,YAAa,CAAC,MAAM,EAAG,SAAUA,EAAa,UAAW,EAC7E,CAAE,SAAU,UAAW,YAAa,CAAC,MAAM,EAAG,SAAU,IAAK,EAC7D,CAAE,SAAU,oBAAqB,YAAa,CAAC,IAAI,EAAG,SAAUA,EAAa,kBAAmB,EAChG,CAAE,SAAU,SAAU,YAAa,CAACF,EAAiBC,CAAgB,EAAG,SAAUC,EAAa,cAAe,CAAA,CAC/G,CAAA,CAGH,uBAAwB,CACjB,KAAA,YAAY,YAAY,cAAc,CAEzC,CAAE,SAAU,oBAAqB,UAAW,MAAO,EACnD,CAAE,SAAU,UAAW,UAAW,KAAM,CAAA,CACzC,CAAA,CAGH,wBAAyB,CACvB,MAAMH,EAAc,IAAI,KAAK,EAAE,YAAY,EACrCC,EAAkB,aAClBC,EAAmB,aAEpB,KAAA,YAAY,cAAc,cAAc,CAE3C,CAAE,SAAU,SAAU,YAAa,CAAC,MAAM,EAAG,SAAUC,EAAa,KAAM,EAE1E,CAAE,SAAU,OAAQ,YAAa,CAAC,QAAQ,EAAG,SAAUA,EAAa,kBAAmB,EACvF,CAAE,SAAU,UAAW,YAAa,CAAC,KAAK,EAAG,SAAU,IAAK,EAG5D,CAAE,SAAU,SAAU,YAAa,CAACF,EAAiBC,CAAgB,EAAG,SAAUC,EAAa,cAAe,CAAA,CAC/G,EACI,KAAA,YAAY,YAAY,cAAc,CAEzC,CAAE,SAAU,OAAQ,UAAW,KAAM,EACrC,CAAE,SAAU,UAAW,UAAWC,EAAc,IAAK,CAAA,CACtD,EACD,OAAO,WAAW,IAAM,UACjBU,EAAA,KAAA,YAAY,oBAAZ,MAAAA,EAA+B,kBAAkB,KACjDM,EAAA,KAAA,YAAY,oBAAZ,MAAAA,EAA+B,eAAe,EAAC,CACrD,CAAA,CAGH,gBAAgBE,EAAuB,CACrC,YAAK,aAAeA,EACpB,KAAK,aAAa,CAAE,UAAW,KAAK,aAAc,EAC3C,EAAA,CAGT,MAAM,gBAAiB,CACrB,MAAMC,EAAgB,KAAK,mBAAqB,KAAQ,KAAO,KACzD,MAAA,KAAK,KAAK,UAAUA,CAAY,EACtC,KAAK,iBAAmBA,CAAA,CAGlB,aAAaC,EAAwC,OAC3D,KAAK,eAAe,EAAI,EAClB,MAAAC,EAAiB,KAAK,YAAY,kBAAmB,QAC3D,KAAK,YAAY,kBAAmB,eAAeD,EAAQ,SAAU,EACrEC,EAAe,cAAcD,CAAO,EACpC,KAAK,YAAc,CAAE,GAAG,KAAK,WAAY,GACpCV,EAAA,KAAA,YAAY,oBAAZ,MAAAA,EAA+B,eAAc,CAGpD,gBAAiB,OACV,KAAA,aAAe,CAAC,KAAK,aACpB,MAAAY,EAAS,KAAK,aAAe,MAAQ,UAC3CZ,EAAA,SAAS,cAAc,WAAW,IAAlC,MAAAA,EAAqC,UAAUY,GAAQ,UAClD,KAAA,YAAY,eAAe,WAAW,CAAC,CAAA,CAEhD,CA7XO7C,EAAA8C,EAAA,EAAMxC,EAANyC,iBAFuBhD,EAEjBO,CAAA,EAAN0C,EAAMhD,EAAA,EAAAM,CAAA"}