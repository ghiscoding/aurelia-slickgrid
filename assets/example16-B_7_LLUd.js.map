{"version":3,"file":"example16-B_7_LLUd.js","sources":["../../src/examples/slickgrid/example16.$au.ts","../../src/examples/slickgrid/example16.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example16\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example16.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"hide-duration-btn\\\"\\n            click.trigger=\\\"hideDurationColumnDynamically()\\\">\\n      <i class=\\\"mdi mdi-eye-off-outline\\\"></i>\\n      Dynamically Hide \\\"Duration\\\"\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"disable-filters-btn\\\"\\n            click.trigger=\\\"disableFilters()\\\">\\n      <i class=\\\"mdi mdi-close\\\"></i>\\n      Disable Filters\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"disable-sorting-btn\\\"\\n            click.trigger=\\\"disableSorting()\\\">\\n      <i class=\\\"mdi mdi-close\\\"></i>\\n      Disable Sorting\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"toggle-filtering-btn\\\" click.trigger=\\\"toggleFilter()\\\">\\n      <i class=\\\"mdi mdi-swap-vertical\\\"></i>\\n      Toggle Filtering\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"toggle-sorting-btn\\\" click.trigger=\\\"toggleSorting()\\\">\\n      <i class=\\\"mdi mdi-swap-vertical\\\"></i>\\n      Toggle Sorting\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"add-crud-columns-btn\\\" click.trigger=\\\"addEditDeleteColumns()\\\">\\n      <i class=\\\"mdi mdi-shape-square-plus\\\"></i>\\n      Add Edit/Delete Columns\\n    </button>\\n  </div>\\n</div>\\n\\n<br />\\n\\n<aurelia-slickgrid grid-id=\\\"grid16\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { type AureliaGridInstance, type Column, ExtensionName, Filters, Formatters, type GridOption, type OnEventArgs } from 'aurelia-slickgrid';\n\nexport class Example16 {\n  title = 'Example 16: Row Move & Checkbox Selector';\n  subTitle = `\n    This example demonstrates using the <b>Slick.Plugins.RowMoveManager</b> plugin to easily move a row in the grid.<br/>\n    <ul>\n      <li>Click to select, Ctrl+Click to toggle selection, Shift+Click to select a range.</li>\n      <li>Drag one or more rows by the handle (icon) to reorder</li>\n      <li>If you plan to use Row Selection + Row Move, then use \"singleRowMove: true\" and \"disableRowSelection: true\"</li>\n      <li>You can change \"columnIndexPosition\" to move the icon position of any extension (RowMove, RowDetail or RowSelector icon)</li>\n      <ul>\n        <li>You will also want to enable the DataView \"syncGridSelection: true\" to keep row selection even after a row move</li>\n      </ul>\n      <li>If you plan to use only Row Move, then you could keep default values (or omit them completely) of \"singleRowMove: false\" and \"disableRowSelection: false\"</li>\n      <ul>\n        <li>SingleRowMove has the name suggest will only move 1 row at a time, by default it will move any row(s) that are selected unless you disable the flag</li>\n      </ul>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n\n  constructor() {\n    this.defineGrid();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  get rowMoveInstance() {\n    return this.aureliaGrid?.extensionService.getExtensionInstanceByName(ExtensionName.rowMoveManager);\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData();\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      { id: 'title', name: 'Title', field: 'title', filterable: true, },\n      { id: 'duration', name: 'Duration', field: 'duration', filterable: true, sortable: true },\n      { id: '%', name: '% Complete', field: 'percentComplete', filterable: true, sortable: true },\n      {\n        id: 'start', name: 'Start', field: 'start', filterable: true, sortable: true,\n        filter: { model: Filters.compoundDate },\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        filterable: true, sortable: true,\n        filter: { model: Filters.compoundDate },\n      },\n      {\n        id: 'effort-driven', name: 'Completed', field: 'effortDriven',\n        formatter: Formatters.checkmarkMaterial,\n        filterable: true, sortable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        },\n      }\n    ];\n\n    this.gridOptions = {\n      enableAutoResize: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableFiltering: true,\n      enableCheckboxSelector: true,\n      checkboxSelector: {\n        hideSelectAllCheckbox: false, // hide the \"Select All\" from title bar\n        columnIndexPosition: 1,\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true\n      },\n      enableRowSelection: true,\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: false\n      },\n      dataView: {\n        syncGridSelection: true, // enable this flag so that the row selection follows the row even if we move it to another position\n      },\n      enableRowMoveManager: true,\n      rowMoveManager: {\n        columnIndexPosition: 0,\n        // when using Row Move + Row Selection, you want to move only a single row and we will enable the following flags so it doesn't cancel row selection\n        singleRowMove: true,\n        disableRowSelection: true,\n        cancelEditOnDrag: true,\n        hideRowMoveShadow: false,\n        width: 30,\n        onBeforeMoveRows: this.onBeforeMoveRow.bind(this),\n        onMoveRows: this.onMoveRows.bind(this),\n\n        // you can change the move icon position of any extension (RowMove, RowDetail or RowSelector icon)\n        // note that you might have to play with the position when using multiple extension\n        // since it really depends on which extension get created first to know what their real position are\n        // columnIndexPosition: 1,\n\n        // you can also override the usability of the rows, for example make every 2nd row the only moveable rows,\n        // usabilityOverride: (row, dataContext, grid) => dataContext.id % 2 === 1\n      },\n      showCustomFooter: true,\n      presets: {\n        // you can presets row selection here as well, you can choose 1 of the following 2 ways of setting the selection\n        // by their index position in the grid (UI) or by the object IDs, the default is \"dataContextIds\" and if provided it will use it and disregard \"gridRowIndexes\"\n        // the RECOMMENDED is to use \"dataContextIds\" since that will always work even with Pagination, while \"gridRowIndexes\" is only good for 1 page\n        rowSelection: {\n          // gridRowIndexes: [2],       // the row position of what you see on the screen (UI)\n          dataContextIds: [1, 2, 6, 7]  // (recommended) select by your data object IDs\n        }\n      },\n    };\n  }\n\n  getData() {\n    // Set up some test columns.\n    const mockDataset: any[] = [];\n    for (let i = 0; i < 500; i++) {\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 25) + ' days',\n        percentComplete: Math.round(Math.random() * 100),\n        start: '01/01/2009',\n        finish: '01/05/2009',\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = mockDataset;\n  }\n\n  onBeforeMoveRow(e: MouseEvent | TouchEvent, data: { rows: number[]; insertBefore: number; }) {\n    for (const rowIdx of data.rows) {\n      // no point in moving before or after itself\n      if (rowIdx === data.insertBefore || (rowIdx === data.insertBefore - 1 && ((data.insertBefore - 1) !== this.aureliaGrid.dataView.getItemCount()))) {\n        e.preventDefault(); // OR eventData.preventDefault();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  onMoveRows(_e: MouseEvent | TouchEvent, args: any) {\n    // rows and insertBefore references,\n    // note that these references are assuming that the dataset isn't filtered at all\n    // which is not always the case so we will recalcualte them and we won't use these reference afterward\n    const rows = args.rows as number[];\n    const insertBefore = args.insertBefore;\n    const extractedRows: number[] = [];\n\n    // when moving rows, we need to cancel any sorting that might happen\n    // we can do this by providing an undefined sort comparer\n    // which basically destroys the current sort comparer without resorting the dataset, it basically keeps the previous sorting\n    this.aureliaGrid.dataView.sort(undefined as any, true);\n\n    // the dataset might be filtered/sorted,\n    // so we need to get the same dataset as the one that the SlickGrid DataView uses\n    const tmpDataset = this.aureliaGrid.dataView.getItems();\n    const filteredItems = this.aureliaGrid.dataView.getFilteredItems();\n\n    const itemOnRight = this.aureliaGrid.dataView.getItem(insertBefore);\n    const insertBeforeFilteredIdx = itemOnRight ? this.aureliaGrid.dataView.getIdxById(itemOnRight.id) : this.aureliaGrid.dataView.getItemCount();\n\n    const filteredRowItems: any[] = [];\n    rows.forEach(row => filteredRowItems.push(filteredItems[row]));\n    const filteredRows = filteredRowItems.map(item => this.aureliaGrid.dataView.getIdxById(item.id));\n\n    const left = tmpDataset.slice(0, insertBeforeFilteredIdx);\n    const right = tmpDataset.slice(insertBeforeFilteredIdx, tmpDataset.length);\n\n    // convert into a final new dataset that has the new order\n    // we need to resort with\n    rows.sort((a: number, b: number) => a - b);\n    for (const filteredRow of filteredRows) {\n      if (filteredRow) {\n        extractedRows.push(tmpDataset[filteredRow]);\n      }\n    }\n    filteredRows.reverse();\n    for (const row of filteredRows) {\n      if (row !== undefined && insertBeforeFilteredIdx !== undefined) {\n        if (row < insertBeforeFilteredIdx) {\n          left.splice(row, 1);\n        } else {\n          right.splice(row - insertBeforeFilteredIdx, 1);\n        }\n      }\n    }\n\n    // final updated dataset, we need to overwrite the DataView dataset (and our local one) with this new dataset that has a new order\n    const finalDataset = left.concat(extractedRows.concat(right));\n    this.dataset = finalDataset; // update dataset and re-render the grid\n  }\n\n  hideDurationColumnDynamically() {\n    // -- you can hide by one Id or multiple Ids:\n    // hideColumnById(id, options), hideColumnByIds([ids], options)\n    // you can also provide options, defaults are: { autoResizeColumns: true, triggerEvent: true, hideFromColumnPicker: false, hideFromGridMenu: false }\n\n    this.aureliaGrid.gridService.hideColumnById('duration');\n\n    // or with multiple Ids and extra options\n    // this.aureliaGrid.gridService.hideColumnByIds(['duration', 'finish'], { hideFromColumnPicker: true, hideFromGridMenu: false });\n  }\n\n  // Disable/Enable Filtering/Sorting functionalities\n  // --------------------------------------------------\n\n  disableFilters() {\n    this.aureliaGrid.filterService.disableFilterFunctionality(true);\n  }\n\n  disableSorting() {\n    this.aureliaGrid.sortService.disableSortFunctionality(true);\n  }\n\n  addEditDeleteColumns() {\n    if (this.columnDefinitions[0].id !== 'change-symbol') {\n      const newCols = [\n        {\n          id: 'change-symbol',\n          field: 'id',\n          excludeFromColumnPicker: true,\n          excludeFromGridMenu: true,\n          excludeFromHeaderMenu: true,\n          formatter: Formatters.icon,\n          params: { iconCssClass: 'mdi mdi-pencil pointer' },\n          minWidth: 30,\n          maxWidth: 30,\n          onCellClick: (_clickEvent: Event, args: OnEventArgs) => {\n            alert(`Technically we should Edit \"Task ${args.dataContext.id}\"`);\n          }\n        }, {\n          id: 'delete-symbol',\n          field: 'id',\n          excludeFromColumnPicker: true,\n          excludeFromGridMenu: true,\n          excludeFromHeaderMenu: true,\n          formatter: Formatters.icon,\n          params: { iconCssClass: 'mdi mdi-trash-can pointer' },\n          minWidth: 30,\n          maxWidth: 30,\n          onCellClick: (_e: Event, args: OnEventArgs) => {\n            if (confirm('Are you sure?')) {\n              this.aureliaGrid.gridService.deleteItemById(args.dataContext.id);\n            }\n          }\n        }\n      ];\n\n      // NOTE if you use an Extensions (Checkbox Selector, Row Detail, ...) that modifies the column definitions in any way\n      // you MUST use \"getAllColumnDefinitions()\" from the GridService, using this will be ALL columns including the 1st column that is created internally\n      // for example if you use the Checkbox Selector (row selection), you MUST use the code below\n      const allColumns = this.aureliaGrid.gridService.getAllColumnDefinitions();\n      allColumns.unshift(newCols[0], newCols[1]);\n      this.columnDefinitions = [...allColumns]; // (or use slice) reassign to column definitions for Aurelia to do dirty checking\n    }\n  }\n\n  // or Toggle Filtering/Sorting functionalities\n  // ---------------------------------------------\n\n  toggleFilter() {\n    this.aureliaGrid.filterService.toggleFilterFunctionality();\n  }\n\n  toggleSorting() {\n    this.aureliaGrid.sortService.toggleSortFunctionality();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example16_decorators","_init","customElement","__au2ViewDef","Example16","__publicField","aureliaGrid","_a","ExtensionName","Filters","Formatters","mockDataset","i","data","rowIdx","args","rows","insertBefore","extractedRows","tmpDataset","filteredItems","itemOnRight","insertBeforeFilteredIdx","filteredRowItems","row","filteredRows","item","left","right","a","b","filteredRow","finalDataset","newCols","_clickEvent","allColumns","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}