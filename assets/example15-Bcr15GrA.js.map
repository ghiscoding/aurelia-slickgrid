{"version":3,"file":"example15-Bcr15GrA.js","sources":["../../src/examples/slickgrid/example15.$au.ts","../../src/examples/slickgrid/example15.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example15\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example15.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"reset-button\\\"\\n        click.trigger=\\\"clearGridStateFromLocalStorage()\\\">\\n  <i class=\\\"mdi mdi-close\\\"></i>\\n  Clear Grid State from Local Storage &amp; Reset Grid\\n</button>\\n\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"language-button\\\" click.trigger=\\\"switchLanguage()\\\">\\n  <i class=\\\"mdi mdi-translate\\\"></i>\\n  Switch Language\\n</button>\\n<strong>Locale:</strong>\\n<span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\n  ${selectedLanguage + '.json'}\\n</span>\\n\\n<aurelia-slickgrid grid-id=\\\"grid15\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                    on-grid-state-changed.trigger=\\\"gridStateChanged($event.detail)\\\"\\n                    >\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { I18N } from '@aurelia/i18n';\nimport { format as tempoFormat } from '@formkit/tempo';\nimport { resolve } from 'aurelia';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type GridState,\n  type GridStateChange,\n  type MultipleSelectOption,\n} from 'aurelia-slickgrid';\n\nfunction randomBetween(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nconst DEFAULT_PAGE_SIZE = 25;\nconst LOCAL_STORAGE_KEY = 'gridState';\nconst NB_ITEMS = 500;\n\nexport class Example15 {\n  title = 'Example 15: Grid State & Presets using Local Storage';\n  subTitle = `\n  Grid State & Preset (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grid-state-preset\" target=\"_blank\">Wiki docs</a>)\n  <br/>\n  <ul class=\"small\">\n    <li>Uses Local Storage to persist the Grid State and uses Grid Options \"presets\" to put the grid back to it's previous state</li>\n    <ul>\n       <li>to demo this, simply change any columns (position reorder, visibility, size, filter, sort), then refresh your browser with (F5)</li>\n    </ul>\n    <li>Local Storage is just one option, you can use whichever is more convenient for you (Local Storage, Session Storage, DB, ...)</li>\n  </ul>\n`;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n  selectedLanguage: string;\n\n  constructor(private readonly i18n: I18N = resolve(I18N)) {\n    const presets = JSON.parse(localStorage[LOCAL_STORAGE_KEY] || null);\n\n    // use some Grid State preset defaults if you wish or just restore from Locale Storage\n    // presets = presets || this.useDefaultPresets();\n    this.defineGrid(presets);\n\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.getData(NB_ITEMS);\n  }\n\n  detaching() {\n    this.saveCurrentGridState();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  /** Clear the Grid State from Local Storage and reset the grid to it's original state */\n  clearGridStateFromLocalStorage() {\n    this.aureliaGrid.gridService.resetGrid(this.columnDefinitions);\n    this.aureliaGrid.paginationService!.changeItemPerPage(DEFAULT_PAGE_SIZE);\n    window.setTimeout(() => localStorage[LOCAL_STORAGE_KEY] = null);\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid(gridStatePresets?: GridState) {\n    // prepare a multiple-select array to filter with\n    const multiSelectFilterArray: Array<{ value: number; label: number; }> = [];\n    for (let i = 0; i < NB_ITEMS; i++) {\n      multiSelectFilterArray.push({ value: i, label: i });\n    }\n\n    this.columnDefinitions = [\n      {\n        id: 'title',\n        name: 'Title',\n        field: 'title',\n        nameKey: 'TITLE',\n        filterable: true,\n        sortable: true,\n        type: FieldType.string,\n        minWidth: 45, width: 100,\n        filter: {\n          model: Filters.compoundInput\n        }\n      },\n      {\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80, width: 100,\n        type: FieldType.string,\n        filter: {\n          model: Filters.input,\n          filterShortcuts: [\n            { titleKey: 'BLANK_VALUES', searchTerms: ['< A'], iconCssClass: 'mdi mdi-filter-minus-outline', },\n            { titleKey: 'NON_BLANK_VALUES', searchTerms: ['> A'], iconCssClass: 'mdi mdi-filter-plus-outline', },\n          ]\n        }\n      },\n      {\n        id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, exportCsvForceToKeepAsString: true,\n        minWidth: 55, width: 100,\n        nameKey: 'DURATION',\n        filterable: true,\n        filter: {\n          collection: multiSelectFilterArray,\n          model: Filters.multipleSelect,\n          // we could add certain option(s) to the \"multiple-select\" plugin\n          filterOptions: {\n            maxHeight: 250,\n            width: 175\n          } as MultipleSelectOption\n        }\n      },\n      {\n        id: 'complete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', minWidth: 70, type: FieldType.number, sortable: true, width: 100,\n        formatter: Formatters.percentCompleteBar, filterable: true, filter: { model: Filters.slider, operator: '>' }\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', nameKey: 'START', formatter: Formatters.dateIso, sortable: true, minWidth: 75, exportWithFormatter: true, width: 100,\n        type: FieldType.date, filterable: true,\n        filter: {\n          model: Filters.compoundDate,\n          filterShortcuts: [\n            { titleKey: 'PAST', searchTerms: [tempoFormat(new Date(), 'YYYY-MM-DD')], operator: '<', iconCssClass: 'mdi mdi-calendar', },\n            { titleKey: 'FUTURE', searchTerms: [tempoFormat(new Date(), 'YYYY-MM-DD')], operator: '>', iconCssClass: 'mdi mdi-calendar-clock', },\n          ]\n        }\n      },\n      {\n        id: 'completed', field: 'completed', nameKey: 'COMPLETED', minWidth: 85, maxWidth: 85, formatter: Formatters.checkmarkMaterial, width: 100,\n        type: FieldType.boolean,\n        sortable: true,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableCheckboxSelector: true,\n      enableFiltering: true,\n      enableTranslate: true,\n      i18n: this.i18n,\n      columnPicker: {\n        hideForceFitButton: true\n      },\n      gridMenu: {\n        hideForceFitButton: true,\n        hideClearFrozenColumnsCommand: false,\n      },\n      headerMenu: {\n        hideFreezeColumnsCommand: false,\n      },\n      enablePagination: true,\n      pagination: {\n        pageSizes: [5, 10, 15, 20, 25, 30, 40, 50, 75, 100],\n        pageSize: DEFAULT_PAGE_SIZE\n      },\n    };\n\n    // reload the Grid State with the grid options presets\n    // but make sure the colums array is part of the Grid State before using them as presets\n    if (gridStatePresets) {\n      this.gridOptions.presets = gridStatePresets;\n    }\n  }\n\n  getData(count: number) {\n    // mock a dataset\n    const currentYear = new Date().getFullYear();\n    const tmpData: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomDuration = Math.round(Math.random() * 100);\n      const randomYear = randomBetween(currentYear - 15, currentYear + 8);\n      const randomYearShort = randomBetween(10, 25);\n      const randomMonth = randomBetween(1, 12);\n      const randomMonthStr = (randomMonth < 10) ? `0${randomMonth}` : randomMonth;\n      const randomDay = randomBetween(10, 28);\n      const randomPercent = randomBetween(0, 100);\n      const randomHour = randomBetween(10, 23);\n      const randomTime = randomBetween(10, 59);\n\n      tmpData[i] = {\n        id: i,\n        title: 'Task ' + i,\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\n        duration: randomDuration,\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),          // provide a Date format\n        usDateShort: `${randomMonth}/${randomDay}/${randomYearShort}`, // provide a date US Short in the dataset\n        utcDate: `${randomYear}-${randomMonthStr}-${randomDay}T${randomHour}:${randomTime}:${randomTime}Z`,\n        completed: (i % 3 === 0)\n      };\n    }\n    return tmpData;\n  }\n\n  /** Dispatched event of a Grid State Changed event (which contain a \"change\" and the \"gridState\") */\n  gridStateChanged(gridStateChanges: GridStateChange) {\n    console.log('Client sample, Grid State changed:: ', gridStateChanges);\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridStateChanges.gridState);\n  }\n\n  /** Save Grid State in LocaleStorage */\n  saveCurrentGridState() {\n    const gridState: GridState = this.aureliaGrid.gridStateService.getCurrentGridState();\n    console.log('Client sample, current Grid State:: ', gridState);\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridState);\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  useDefaultPresets() {\n    // use columnDef searchTerms OR use presets as shown below\n    return {\n      columns: [\n        { columnId: 'description', width: 170 }, // flip column position of Title/Description to Description/Title\n        { columnId: 'title', width: 55 },\n        { columnId: 'duration' },\n        { columnId: 'complete' },\n        { columnId: 'start' },\n        { columnId: 'usDateShort' },\n        { columnId: 'utcDate' },\n        // { columnId: 'effort-driven' }, // to HIDE a column, simply ommit it from the preset array\n      ],\n      filters: [\n        { columnId: 'duration', searchTerms: [2, 22, 44] },\n        // { columnId: 'complete', searchTerms: ['5'], operator: '>' },\n        { columnId: 'usDateShort', operator: '<', searchTerms: ['4/20/25'] },\n        // { columnId: 'effort-driven', searchTerms: [true] }\n      ],\n      sorters: [\n        { columnId: 'duration', direction: 'DESC' },\n        { columnId: 'complete', direction: 'ASC' }\n      ],\n    } as GridState;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example15_decorators","_init","randomBetween","min","max","DEFAULT_PAGE_SIZE","LOCAL_STORAGE_KEY","NB_ITEMS","customElement","__au2ViewDef","Example15","i18n","resolve","I18N","__publicField","presets","defaultLang","aureliaGrid","gridStatePresets","multiSelectFilterArray","i","FieldType","Filters","Formatters","tempoFormat","count","currentYear","tmpData","randomDuration","randomYear","randomYearShort","randomMonth","randomMonthStr","randomDay","randomPercent","randomHour","randomTime","gridStateChanges","gridState","nextLanguage","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}