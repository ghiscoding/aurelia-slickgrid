{"version":3,"file":"example9-DRLSKJy8.js","sources":["../../src/examples/slickgrid/example9.$au.ts","../../src/examples/slickgrid/example9.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example9.scss\";\nexport const name = \"example9\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example9.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"external-gridmenu\\\"\\n        click.trigger=\\\"toggleGridMenu($event)\\\">\\n  <i class=\\\"mdi mdi-menu\\\"></i>\\n  Grid Menu\\n</button>\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"language\\\" click.trigger=\\\"switchLanguage()\\\">\\n  <i class=\\\"mdi mdi-translate\\\"></i>\\n  Switch Language\\n</button>\\n<b>Locale:</b> <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">${selectedLanguage + '.json'}</span>\\n\\n<aurelia-slickgrid grid-id=\\\"grid9\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { I18N } from '@aurelia/i18n';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  ExtensionName,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type SlickDataView,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\nimport './example9.scss'; // provide custom CSS/SASS styling\nimport { resolve } from 'aurelia';\n\nexport class Example9 {\n  title = 'Example 9: Grid Menu Control';\n  subTitle = `\n    This example demonstrates using the <b>Slick.Controls.GridMenu</b> plugin to easily add a Grid Menu (aka hamburger menu) on the top right corner of the grid.<br/>\n    (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grid-menu\" target=\"_blank\">Wiki docs</a>)\n    <ul>\n      <li>You can change the Grid Menu icon, for example \"mdi-dots-vertical\"&nbsp;&nbsp;<span class=\"mdi mdi-dots-vertical\"></span>&nbsp;&nbsp;(which is shown in this example)</li>\n      <li>By default the Grid Menu shows all columns which you can show/hide them</li>\n      <li>You can configure multiple custom \"commands\" to show up in the Grid Menu and use the \"onGridMenuCommand()\" callback</li>\n      <li>Doing a \"right + click\" over any column header will also provide a way to show/hide a column (via the Column Picker Plugin)</li>\n      <li>You can change the icons of both picker via SASS variables as shown in this demo (check all SASS variables)</li>\n      <li><i class=\"mdi mdi-arrow-down icon\"></i> You can also show the Grid Menu anywhere on your page</li>\n    </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  dataView!: SlickDataView;\n  gridObj!: SlickGrid;\n  hideSubTitle = false;\n  selectedLanguage: string;\n\n  constructor(private readonly i18n: I18N = resolve(I18N)) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.getData();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n    this.gridObj = aureliaGrid && aureliaGrid.slickGrid;\n    this.dataView = aureliaGrid && aureliaGrid.dataView;\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      { id: 'title', name: 'Title', field: 'title', nameKey: 'TITLE', filterable: true, type: FieldType.string },\n      { id: 'duration', name: 'Duration', field: 'duration', nameKey: 'DURATION', sortable: true, filterable: true, type: FieldType.string },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', nameKey: 'PERCENT_COMPLETE', sortable: true, filterable: true,\n        type: FieldType.number,\n        formatter: Formatters.percentCompleteBar,\n        filter: { model: Filters.compoundSlider, filterOptions: { hideSliderNumber: false } }\n      },\n      { id: 'start', name: 'Start', field: 'start', nameKey: 'START', filterable: true, type: FieldType.dateUs, filter: { model: Filters.compoundDate } },\n      { id: 'finish', name: 'Finish', field: 'finish', nameKey: 'FINISH', filterable: true, type: FieldType.dateUs, filter: { model: Filters.compoundDate } },\n      {\n        id: 'completed', name: 'Completed', field: 'completed', nameKey: 'COMPLETED', maxWidth: 80, formatter: Formatters.checkmarkMaterial,\n        type: FieldType.boolean,\n        minWidth: 100,\n        sortable: true,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\n          model: Filters.singleSelect,\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      columnPicker: {\n        hideForceFitButton: true,\n        hideSyncResizeButton: true,\n        onColumnsChanged: (_e, args) => {\n          console.log('Column selection changed from Column Picker, visible columns: ', args.visibleColumns);\n        }\n      },\n      enableAutoResize: true,\n      enableGridMenu: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableFiltering: true,\n      enableCellNavigation: true,\n      gridMenu: {\n        // we could disable the menu entirely by returning false depending on some code logic\n        menuUsabilityOverride: () => true,\n\n        // all titles optionally support translation keys, if you wish to use that feature then use the title properties with the 'Key' suffix (e.g: titleKey)\n        // example \"commandTitle\" for a plain string OR \"commandTitleKey\" to use a translation key\n        commandTitleKey: 'CUSTOM_COMMANDS',\n        iconCssClass: 'mdi mdi-dots-vertical', // defaults to \"mdi-menu\"\n        hideForceFitButton: true,\n        hideSyncResizeButton: true,\n        hideToggleFilterCommand: false, // show/hide internal custom commands\n        menuWidth: 17,\n        resizeOnShowHeaderRow: true,\n        subItemChevronClass: 'mdi mdi-chevron-down mdi-rotate-270',\n        commandItems: [\n          // add Custom Items Commands which will be appended to the existing internal custom items\n          // you cannot override an internal items but you can hide them and create your own\n          // also note that the internal custom commands are in the positionOrder range of 50-60,\n          // if you want yours at the bottom then start with 61, below 50 will make your command(s) show on top\n          {\n            iconCssClass: 'mdi mdi-help-circle',\n            titleKey: 'HELP',\n            disabled: false,\n            command: 'help',\n            positionOrder: 90,\n            cssClass: 'bold',     // container css class\n            textCssClass: 'blue'  // just the text css class\n          },\n          // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\n          // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\n          { divider: true, command: '', positionOrder: 89 },\n          // 'divider',\n          {\n            title: 'Command 1',\n            command: 'command1',\n            positionOrder: 91,\n            cssClass: 'orange',\n            iconCssClass: 'mdi mdi-alert',\n            // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\n            action: (_e, args) => alert(args.command),\n            itemUsabilityOverride: (args) => {\n              // for example disable the command if there's any hidden column(s)\n              if (args && Array.isArray(args.columns)) {\n                return args.columns.length === args.visibleColumns.length;\n              }\n              return true;\n            },\n          },\n          {\n            title: 'Command 2',\n            command: 'command2',\n            positionOrder: 92,\n            cssClass: 'red',        // container css class\n            textCssClass: 'italic', // just the text css class\n            action: (_e, args) => alert(args.command),\n            itemVisibilityOverride: () => {\n              // for example hide this command from the menu if there's any filter entered\n              if (this.aureliaGrid) {\n                return this.isObjectEmpty(this.aureliaGrid.filterService.getColumnFilters());\n              }\n              return true;\n            },\n          },\n          {\n            title: 'Disabled command',\n            disabled: true,\n            command: 'disabled-command',\n            positionOrder: 98\n          },\n          { command: '', divider: true, positionOrder: 98 },\n          {\n            // we can also have multiple nested sub-menus\n            command: 'export', title: 'Exports', positionOrder: 99,\n            commandItems: [\n              { command: 'exports-txt', title: 'Text (tab delimited)' },\n              {\n                command: 'sub-menu', title: 'Excel', cssClass: 'green', subMenuTitle: 'available formats', subMenuTitleCssClass: 'text-italic orange',\n                commandItems: [\n                  { command: 'exports-csv', title: 'Excel (csv)' },\n                  { command: 'exports-xlsx', title: 'Excel (xlsx)' },\n                ]\n              }\n            ]\n          },\n          {\n            command: 'feedback', title: 'Feedback', positionOrder: 100,\n            commandItems: [\n              { command: 'request-update', title: 'Request update from supplier', iconCssClass: 'mdi mdi-star', tooltip: 'this will automatically send an alert to the shipping team to contact the user for an update' },\n              'divider',\n              {\n                command: 'sub-menu', title: 'Contact Us', iconCssClass: 'mdi mdi-account', subMenuTitle: 'contact us...', subMenuTitleCssClass: 'italic',\n                commandItems: [\n                  { command: 'contact-email', title: 'Email us', iconCssClass: 'mdi mdi-pencil-outline' },\n                  { command: 'contact-chat', title: 'Chat with us', iconCssClass: 'mdi mdi-message-text-outline' },\n                  { command: 'contact-meeting', title: 'Book an appointment', iconCssClass: 'mdi mdi-coffee' },\n                ]\n              }\n            ]\n          }\n        ],\n        // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\n        onCommand: (_e: Event, args: any) => {\n          // e.preventDefault(); // preventing default event would keep the menu open after the execution\n          const command = args.item?.command;\n          if (command.includes('exports-')) {\n            alert('Exporting as ' + args?.item.title);\n          } else if (command.includes('contact-') || command === 'help') {\n            alert('Command: ' + args.command);\n          } else {\n            console.log('onGridMenuCommand', args.command);\n          }\n        },\n        onColumnsChanged: (_e, args) => {\n          console.log('Column selection changed from Grid Menu, visible columns: ', args.visibleColumns);\n        }\n      },\n      enableTranslate: true,\n      i18n: this.i18n\n    };\n  }\n\n  getData() {\n    // Set up some test columns.\n    const mockDataset: any[] = [];\n    for (let i = 0; i < 500; i++) {\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        phone: this.generatePhoneNumber(),\n        duration: Math.round(Math.random() * 25) + ' days',\n        percentComplete: Math.round(Math.random() * 100),\n        start: '01/01/2009',\n        finish: '01/05/2009',\n        completed: (i % 5 === 0)\n      };\n    }\n    this.dataset = mockDataset;\n  }\n\n  generatePhoneNumber() {\n    let phone = '';\n    for (let i = 0; i < 10; i++) {\n      phone += Math.round(Math.random() * 9) + '';\n    }\n    return phone;\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  toggleGridMenu(e: MouseEvent) {\n    if (this.aureliaGrid?.extensionService) {\n      const gridMenuInstance = this.aureliaGrid.extensionService.getExtensionInstanceByName(ExtensionName.gridMenu);\n      // open the external button Grid Menu, you can also optionally pass Grid Menu options as 2nd argument\n      // for example we want to align our external button on the right without affecting the menu within the grid which will stay aligned on the left\n      gridMenuInstance.showGridMenu(e, { dropSide: 'right' });\n    }\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n\n  private isObjectEmpty(obj: any) {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] !== '') {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example9_decorators","_init","customElement","__au2ViewDef","Example9","i18n","resolve","I18N","__publicField","defaultLang","aureliaGrid","FieldType","Formatters","Filters","args","command","_a","mockDataset","i","phone","nextLanguage","ExtensionName","action","obj","key","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}