{"version":3,"file":"example33-DUSjN4YK.js","sources":["../../src/examples/slickgrid/example33.$au.ts","../../src/examples/slickgrid/example33.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example33.scss\";\nexport const name = \"example33\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example33.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div style=\\\"margin-bottom: 20px;\\\">\\n  <label for=\\\"pinned-rows\\\">Simulated Server Delay (ms): </label>\\n  <input type=\\\"number\\\" id=\\\"server-delay\\\" data-test=\\\"server-delay\\\" style=\\\"width: 60px\\\" value.bind=\\\"serverApiDelay\\\" />\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid33\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    instances.bind=\\\"aureliaGrid\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { SlickCustomTooltip } from '@slickgrid-universal/custom-tooltip-plugin';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\n\nimport {\n  type AureliaGridInstance,\n  type Column,\n  type EditCommand,\n  Editors,\n  FieldType,\n  Filters,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  type MenuCommandItemCallbackArgs,\n  OperatorType,\n  type SlickGrid,\n  type VanillaCalendarOption,\n} from 'aurelia-slickgrid';\nimport './example33.scss';\n\nconst NB_ITEMS = 500;\n\nexport class Example33 {\n  title = 'Example 33: Regular & Custom Tooltips';\n  subTitle = `\n  This demo shows how to create Regular & Custom Tooltips (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/custom-tooltip\" target=\"_blank\">Wiki docs</a>)\n  <br/>\n  <ul class=\"small\">\n    <li>optionally parse regular [title] attributes and transform them into tooltips</li>\n    <li>create your own Custom Tooltip via a Custom Formatter</li>\n    <li>create an Async Custom Tooltip (Promise/Observable) to allowing fetching data from an API</li>\n    <li>optionally add Custom Tooltip on Column Header & Column Header-Row (filters)</li>\n  </ul>`;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  editCommandQueue: EditCommand[] = [];\n  dataset: any[] = [];\n  hideSubTitle = false;\n  serverApiDelay = 500;\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.loadData(NB_ITEMS);\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string,\n        editor: {\n          model: Editors.longText,\n          required: true,\n          alwaysSaveOnEnterKey: true,\n          minLength: 5,\n          maxLength: 255,\n        },\n        filterable: true,\n        customTooltip: {\n          position: 'right-align', // defaults to \"auto\"\n          // you can use the Custom Tooltip in 2 ways (synchronous or asynchronous)\n          // example 1 (sync):\n          // formatter: this.tooltipTaskFormatter,\n\n          // example 2 (async):\n          // when using async, the `formatter` will contain the loading spinner\n          // you will need to provide an `asyncPost` function returning a Promise and also `asyncPostFormatter` formatter to display the result once the Promise resolves\n          formatter: () => `<div><span class=\"mdi mdi-load mdi-spin\"></span> loading...</div>`,\n          asyncProcess: () => new Promise(resolve => {\n            window.setTimeout(() => resolve({ ratio: Math.random() * 10 / 10, lifespan: Math.random() * 100 }), this.serverApiDelay);\n          }),\n          asyncPostFormatter: this.tooltipTaskAsyncFormatter as Formatter,\n\n          // optional conditional usability callback\n          // usabilityOverride: (args) => !!(args.dataContext?.id % 2) // show it only every second row\n        },\n      },\n      {\n        id: 'duration', name: 'Duration', field: 'duration', sortable: true, filterable: true,\n        editor: {\n          model: Editors.float,\n          // required: true,\n          decimal: 2,\n          valueStep: 1,\n          maxValue: 10000,\n          alwaysSaveOnEnterKey: true,\n        },\n        formatter: (_row, _cell, value) => value > 1 ? `${value} days` : `${value} day`,\n        type: FieldType.number,\n      },\n      {\n        id: 'desc', name: `<span title='custom title tooltip text'>Description</span>`, field: 'description', width: 100, filterable: true,\n        editor: {\n          model: Editors.longText,\n          required: true,\n          alwaysSaveOnEnterKey: true,\n          minLength: 5,\n          maxLength: 255,\n        },\n        formatter: (_row, _cell, value: any, _column, dataContext) => `<span title=\"regular tooltip (from title attribute)\\r${dataContext.title} cell value:\\r${value || ''}\">${value || ''}</span>`,\n        // define tooltip options here OR for the entire grid via the grid options (cell tooltip options will have precedence over grid options)\n        customTooltip: {\n          useRegularTooltip: true, // note regular tooltip will try to find a \"title\" attribute in the cell formatter (it won't work without a cell formatter)\n          useRegularTooltipFromCellTextOnly: true,\n        },\n      },\n      {\n        id: 'desc2', name: `<span title='custom title tooltip text'>Description 2</span>`, field: 'description', width: 100, filterable: true,\n        editor: {\n          model: Editors.longText,\n          required: true,\n          alwaysSaveOnEnterKey: true,\n          minLength: 5,\n          maxLength: 255,\n        },\n        formatter: (_row, _cell, value: any, _column, dataContext) => `<span title=\"regular tooltip (from title attribute)\\r${dataContext.title} cell value:\\r\\r${value || ''}\">${value || ''}</span>`,\n        // define tooltip options here OR for the entire grid via the grid options (cell tooltip options will have precedence over grid options)\n        customTooltip: {\n          useRegularTooltip: true, // note regular tooltip will try to find a \"title\" attribute in the cell formatter (it won't work without a cell formatter)\n          useRegularTooltipFromFormatterOnly: true,\n          // renderRegularTooltipAsHtml: true, // defaults to false, regular \"title\" tooltip won't be rendered as html unless specified via this flag (also \"\\r\\n\" will be replaced by <br>)\n          // maxWidth: 75,\n          // maxHeight: 30,\n        },\n      },\n      {\n        id: 'cost', name: '<span title=\"custom cost title tooltip text\">Cost</span>', field: 'cost',\n        width: 90,\n        sortable: true,\n        filterable: true,\n        // filter: { model: Filters.compoundInput },\n        // formatter: Formatters.dollar,\n        formatter: Formatters.multiple,\n        // params: { formatters: [Formatters.dollar, (row, cell, value) => `<span title=\"regular tooltip, cost: ${value}\">${value || ''}</span>`] },\n        params: { formatters: [Formatters.dollar, (_row: number, _cell: number, value: any) => `<span title=\"regular tooltip (from title attribute) -\\rcell value:\\n\\n${value || ''}\">${value || ''}</span>`] },\n        customTooltip: {\n          useRegularTooltip: true,\n          useRegularTooltipFromFormatterOnly: true,\n        },\n        type: FieldType.number,\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', type: FieldType.number,\n        editor: {\n          model: Editors.slider,\n          minValue: 0,\n          maxValue: 100,\n          // editorOptions: { hideSliderNumber: true },\n        },\n        formatter: Formatters.percentCompleteBar,\n        sortable: true, filterable: true,\n        filter: { model: Filters.slider, operator: '>=' },\n        customTooltip: {\n          position: 'center',\n          formatter: (_row, _cell, value) => typeof value === 'string' && value.includes('%') ? value : `${value}%`,\n          headerFormatter: undefined,\n          headerRowFormatter: undefined\n        },\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', sortable: true,\n        // formatter: Formatters.dateIso,\n        type: FieldType.date, outputType: FieldType.dateIso,\n        filterable: true, filter: { model: Filters.compoundDate },\n        formatter: Formatters.dateIso,\n        editor: { model: Editors.date },\n        // we can delay a tooltip via the async process\n        customTooltip: {\n          // 1- loading formatter\n          formatter: () => ``, // return empty so it won't show any pre-tooltip\n\n          // 2- delay the opening by a simple Promise and `setTimeout`\n          asyncProcess: () => new Promise(resolve => {\n            window.setTimeout(() => resolve({}), this.serverApiDelay); // delayed by half a second\n          }),\n          asyncPostFormatter: this.tooltipFormatter.bind(this) as Formatter,\n        },\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish', sortable: true,\n        editor: {\n          model: Editors.date,\n          editorOptions: { range: { min: 'today' } } as VanillaCalendarOption,\n        },\n        // formatter: Formatters.dateIso,\n        type: FieldType.date, outputType: FieldType.dateIso,\n        formatter: Formatters.dateIso,\n        filterable: true, filter: { model: Filters.dateRange },\n        // you could disable the custom/regular tooltip via either of the following 2 options\n        disableTooltip: true,\n        // customTooltip: {\n        //   usabilityOverride: (args) => false,\n        // },\n      },\n      {\n        id: 'effortDriven', name: 'Effort Driven', field: 'effortDriven',\n        width: 80, minWidth: 20, maxWidth: 100,\n        cssClass: 'cell-effort-driven',\n        sortable: true,\n        filterable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        },\n        exportWithFormatter: false,\n        formatter: Formatters.checkmarkMaterial,\n      },\n      {\n        id: 'prerequisites', name: 'Prerequisites', field: 'prerequisites', filterable: true,\n        formatter: (_row, _cell, value) => {\n          if (value && Array.isArray(value)) {\n            const values = value.map((val) => `Task ${val}`).join(', ');\n            return `<span title=\"${values}\">${values}</span>`;\n          }\n          return '';\n        },\n        customTooltip: {\n          useRegularTooltip: true,\n          maxWidth: 500,\n        },\n        exportWithFormatter: true,\n        sanitizeDataExport: true,\n        minWidth: 100,\n        sortable: true,\n        type: FieldType.string,\n        editor: {\n          // OR 1- use \"fetch client\", they are both supported\n          // collectionAsync: fetch(SAMPLE_COLLECTION_DATA_URL),\n\n          // OR 2- use a Promise\n          collectionAsync: new Promise<any>((resolve) => {\n            window.setTimeout(() => {\n              resolve(Array.from(Array(this.dataset.length).keys()).map(k => ({ value: k, label: k, prefix: 'Task', suffix: 'days' })));\n            }, 500);\n          }),\n          customStructure: {\n            label: 'label',\n            value: 'value',\n            labelPrefix: 'prefix',\n          },\n          collectionOptions: {\n            separatorBetweenTextLabels: ' '\n          },\n          model: Editors.multipleSelect,\n        },\n        filter: {\n          // collectionAsync: fetch(SAMPLE_COLLECTION_DATA_URL),\n          collectionAsync: new Promise((resolve) => {\n            window.setTimeout(() => {\n              resolve(Array.from(Array(this.dataset.length).keys()).map(k => ({ value: k, label: `Task ${k}` })));\n            });\n          }),\n          customStructure: {\n            label: 'label',\n            value: 'value',\n            labelPrefix: 'prefix',\n          },\n          collectionOptions: {\n            separatorBetweenTextLabels: ' '\n          },\n          model: Filters.multipleSelect,\n          operator: OperatorType.inContains,\n        },\n      },\n      {\n        id: 'action', name: 'Action', field: 'action', width: 70, minWidth: 70, maxWidth: 70,\n        formatter: () => `<div class=\"button-style margin-auto\" style=\"width: 35px;\"><span class=\"mdi mdi-chevron-down text-primary\"></span></div>`,\n        excludeFromExport: true,\n        cellMenu: {\n          hideCloseButton: false,\n          commandTitle: 'Commands',\n          commandItems: [\n            // array of command item objects, you can also use the \"positionOrder\" that will be used to sort the items in the list\n            {\n              command: 'command2', title: 'Command 2', positionOrder: 62,\n              // you can use the \"action\" callback and/or use \"onCallback\" callback from the grid options, they both have the same arguments\n              action: (_e, args) => {\n                console.log(args.dataContext, args.column);\n                // action callback.. do something\n              },\n              // only enable command when the task is not completed\n              itemUsabilityOverride: (args) => {\n                return !args.dataContext.completed;\n              }\n            },\n            { command: 'command1', title: 'Command 1', cssClass: 'orange', positionOrder: 61 },\n            {\n              command: 'delete-row', title: 'Delete Row', positionOrder: 64,\n              iconCssClass: 'mdi mdi-close', cssClass: 'red', textCssClass: 'bold',\n              // only show command to 'Delete Row' when the task is not completed\n              itemVisibilityOverride: (args) => {\n                return !args.dataContext.completed;\n              }\n            },\n            // you can pass divider as a string or an object with a boolean (if sorting by position, then use the object)\n            // note you should use the \"divider\" string only when items array is already sorted and positionOrder are not specified\n            { divider: true, command: '', positionOrder: 63 },\n            // 'divider',\n            {\n              command: 'help',\n              title: 'Help',\n              iconCssClass: 'mdi mdi-help-circle-outline',\n              positionOrder: 66,\n            },\n            { command: 'something', title: 'Disabled Command', disabled: true, positionOrder: 67, }\n          ],\n        }\n      },\n    ];\n\n    this.gridOptions = {\n      autoEdit: true, // true single click (false for double-click)\n      autoCommitEdit: true,\n      editable: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableAutoSizeColumns: true,\n      enableAutoResize: true,\n      enableCellNavigation: true,\n      enableExcelExport: true,\n      excelExportOptions: {\n        exportWithFormatter: true\n      },\n      // Custom Tooltip options can be defined in a Column or Grid Options or a mixed of both (first options found wins)\n      externalResources: [new SlickCustomTooltip(), new ExcelExportService()],\n      customTooltip: {\n        formatter: this.tooltipFormatter.bind(this) as Formatter,\n        headerFormatter: this.headerFormatter,\n        headerRowFormatter: this.headerRowFormatter,\n        usabilityOverride: (args) => (args.cell !== 0 && args?.column?.id !== 'action'), // don't show on first/last columns\n        // hideArrow: true, // defaults to False\n      },\n      presets: {\n        filters: [{ columnId: 'prerequisites', searchTerms: [1, 3, 5, 7, 9, 12, 15, 18, 21, 25, 28, 29, 30, 32, 34] }],\n      },\n      rowHeight: 33,\n      enableFiltering: true,\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: false\n      },\n      showCustomFooter: true,\n      enableCheckboxSelector: true,\n      enableRowSelection: true,\n      checkboxSelector: {\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true,\n      },\n      editCommandHandler: (_item: any, _column: Column, editCommand: EditCommand) => {\n        this.editCommandQueue.push(editCommand);\n        editCommand.execute();\n      },\n      // when using the cellMenu, you can change some of the default options and all use some of the callback methods\n      enableCellMenu: true,\n      cellMenu: {\n        // all the Cell Menu callback methods (except the action callback)\n        // are available under the grid options as shown below\n        onCommand: (e, args) => this.executeCommand(e, args),\n        onOptionSelected: (_e, args) => {\n          // change \"Completed\" property with new option selected from the Cell Menu\n          const dataContext = args && args.dataContext;\n          if (dataContext && dataContext.hasOwnProperty('completed')) {\n            dataContext.completed = args.item.option;\n            this.aureliaGrid.gridService.updateItem(dataContext);\n          }\n        },\n      },\n    };\n  }\n\n  loadData(itemCount: number): any[] {\n    // mock a dataset\n    // mock data\n    const tmpArray: any[] = [];\n    for (let i = 0; i < itemCount; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomFinishYear = (new Date().getFullYear() - 3) + Math.floor(Math.random() * 10); // use only years not lower than 3 years ago\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomFinish = new Date(randomFinishYear, (randomMonth + 1), randomDay);\n\n      tmpArray[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100),\n        description: `This is a sample task description.\\nIt can be multiline\\r\\rAnother line...`,\n        percentComplete: Math.floor(Math.random() * (100 - 5 + 1) + 5),\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: randomFinish < new Date() ? '' : randomFinish, // make sure the random date is earlier than today\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\n        effortDriven: (i % 5 === 0),\n        prerequisites: (i % 2 === 0) && i !== 0 && i < 50 ? [i, i - 1] : [],\n      };\n    }\n\n    return tmpArray;\n  }\n\n  executeCommand(_e: any, args: MenuCommandItemCallbackArgs) {\n    // const columnDef = args.column;\n    const command = args.command;\n    const dataContext = args.dataContext;\n\n    switch (command) {\n      case 'command1':\n        alert('Command 1');\n        break;\n      case 'command2':\n        alert('Command 2');\n        break;\n      case 'help':\n        alert('Please help!');\n        break;\n      case 'delete-row':\n        if (confirm(`Do you really want to delete row (${(args.row || 0) + 1}) with \"${dataContext.title}\"`)) {\n          this.aureliaGrid?.gridService.deleteItemById(dataContext.id);\n        }\n        break;\n    }\n  }\n\n  headerFormatter: Formatter = (_row, _cell, _value: any, column: Column) => {\n    const tooltipTitle = 'Custom Tooltip - Header';\n    return `<div class=\"header-tooltip-title\">${tooltipTitle}</div>\n    <div class=\"tooltip-2cols-row\"><div>Column:</div> <div>${column.name}</div></div>`;\n  };\n\n  headerRowFormatter: Formatter = (_row, _cell, _value: any, column: Column) => {\n    const tooltipTitle = 'Custom Tooltip - Header Row (filter)';\n    return `<div class=\"headerrow-tooltip-title\">${tooltipTitle}</div>\n    <div class=\"tooltip-2cols-row\"><div>Column:</div> <div>${column.field}</div></div>`;\n  };\n\n  tooltipFormatter: Formatter = (row, cell, _value: any, column: Column, dataContext: any, grid: SlickGrid) => {\n    const tooltipTitle = 'Custom Tooltip';\n    const effortDrivenHtml = Formatters.checkmarkMaterial(row, cell, dataContext.effortDriven, column, dataContext, grid) as HTMLElement;\n\n    return `<div class=\"header-tooltip-title\">${tooltipTitle}</div>\n    <div class=\"tooltip-2cols-row\"><div>Id:</div> <div>${dataContext.id}</div></div>\n    <div class=\"tooltip-2cols-row\"><div>Title:</div> <div>${dataContext.title}</div></div>\n    <div class=\"tooltip-2cols-row\"><div>Effort Driven:</div> <div>${effortDrivenHtml.outerHTML || ''}</div></div>\n    <div class=\"tooltip-2cols-row\"><div>Completion:</div> <div>${this.loadCompletionIcons(dataContext.percentComplete)}</div></div>\n    `;\n  };\n\n  tooltipTaskAsyncFormatter: Formatter = (row, cell, _value, column: Column, dataContext: any, grid: SlickGrid) => {\n    const tooltipTitle = `Task ${dataContext.id} - (async tooltip)`;\n\n    // use a 2nd Formatter to get the percent completion\n    // any properties provided from the `asyncPost` will end up in the `__params` property (unless a different prop name is provided via `asyncParamsPropName`)\n    const completionBar = Formatters.percentCompleteBarWithText(row, cell, dataContext.percentComplete, column, dataContext, grid) as HTMLElement;\n    const out = `<div class=\"color-sf-primary-dark header-tooltip-title\">${tooltipTitle}</div>\n      <div class=\"tooltip-2cols-row\"><div>Completion:</div> <div>${completionBar.outerHTML || ''}</div></div>\n      <div class=\"tooltip-2cols-row\"><div>Lifespan:</div> <div>${dataContext.__params.lifespan.toFixed(2)}</div></div>\n      <div class=\"tooltip-2cols-row\"><div>Ratio:</div> <div>${dataContext.__params.ratio.toFixed(2)}</div></div>\n    `;\n    return out;\n  };\n\n  loadCompletionIcons(percentComplete: number) {\n    let output = '';\n    let iconCount = 0;\n    if (percentComplete > 5 && percentComplete < 25) {\n      iconCount = 1;\n    } else if (percentComplete >= 25 && percentComplete < 50) {\n      iconCount = 2;\n    } else if (percentComplete >= 50 && percentComplete < 75) {\n      iconCount = 3;\n    } else if (percentComplete >= 75 && percentComplete < 100) {\n      iconCount = 4;\n    } else if (percentComplete === 100) {\n      iconCount = 5;\n    }\n    for (let i = 0; i < iconCount; i++) {\n      const iconColor = iconCount === 5 ? 'text-success' : iconCount >= 3 ? 'text-warning' : 'text-secondary';\n      output += `<span class=\"mdi mdi-check-circle-outline ${iconColor}\"></span>`;\n    }\n    return output;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example33_decorators","_init","NB_ITEMS","customElement","__au2ViewDef","Example33","__publicField","_row","_cell","_value","column","row","cell","dataContext","grid","tooltipTitle","effortDrivenHtml","Formatters","completionBar","aureliaGrid","FieldType","Editors","resolve","value","_column","Filters","values","val","k","OperatorType","args","SlickCustomTooltip","ExcelExportService","_a","_item","editCommand","itemCount","tmpArray","i","randomYear","randomFinishYear","randomMonth","randomDay","randomFinish","command","percentComplete","output","iconCount","iconColor","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}