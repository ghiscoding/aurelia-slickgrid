{"version":3,"file":"example4-CHIA5W77.js","sources":["../../src/examples/slickgrid/example4.$au.ts","../../src/examples/slickgrid/data/collection_500_numbers.json?url","../../src/examples/slickgrid/example4.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example4\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example4.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<br />\\n<span if.bind=\\\"metrics\\\">\\n  <b>Metrics:</b> ${metrics.endTime | dateFormat: 'DD MMM, h:mm:ss a'} | ${metrics.itemCount} of\\n  ${metrics.totalItemCount}\\n  items\\n</span>\\n\\n<div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"...\\\">\\n  <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"scroll-top-btn\\\" click.trigger=\\\"scrollGridTop()\\\">\\n    <i class=\\\"mdi mdi-arrow-down mdi-rotate-180 icon\\\"></i>\\n  </button>\\n  <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"scroll-bottom-btn\\\" click.trigger=\\\"scrollGridBottom()\\\">\\n    <i class=\\\"mdi mdi-arrow-down icon\\\"></i>\\n  </button>\\n</div>\\n\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-filters\\\"\\n        click.trigger=\\\"aureliaGrid.filterService.clearFilters()\\\">\\n  Clear Filters\\n</button>\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-sorting\\\"\\n        click.trigger=\\\"aureliaGrid.sortService.clearSorting()\\\">\\n  Clear Sorting\\n</button>\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-filter\\\"\\n        click.trigger=\\\"setFiltersDynamically()\\\">\\n  Set Filters Dynamically\\n</button>\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-sorting\\\"\\n        click.trigger=\\\"setSortingDynamically()\\\">\\n  Set Sorting Dynamically\\n</button>\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"logItems()\\\">\\n  <span title=\\\"console.log all dataset items\\\">Log Items</span>\\n</button>\\n\\n<aurelia-slickgrid grid-id=\\\"grid4\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                    on-grid-state-changed.trigger=\\\"gridStateChanged($event.detail)\\\"\\n                    on-row-count-changed.trigger=\\\"refreshMetrics($event.detail.eventData, $event.detail.args)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","export default \"__VITE_ASSET__CIzHv0n7__\"","import { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  Filters,\n  Formatters,\n  type GridOption,\n  type GridStateChange,\n  type Metrics,\n  type MultipleSelectOption,\n  OperatorType,\n  type VanillaCalendarOption,\n} from 'aurelia-slickgrid';\n\nimport { CustomInputFilter } from './custom-inputFilter';\nimport SAMPLE_COLLECTION_DATA_URL from './data/collection_500_numbers.json?url';\n\nfunction randomBetween(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nconst NB_ITEMS = 10500;\n\nexport class Example4 {\n  title = 'Example 4: Client Side Sort/Filter';\n  subTitle = `\n  Sort/Filter on client side only using SlickGrid DataView (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/column-functionalities/sorting\" target=\"_blank\">Wiki docs</a>)\n  <br/>\n  <ul class=\"small\">\n    <li>Support multi-sort (by default), hold \"Shift\" key and click on the next column to sort.</li>\n    <li>All column types support the following operators: (>, >=, <, <=, <>, !=, =, ==, *)</li>\n    <ul>\n      <li>Example: >100 ... >=2001-01-01 ... >02/28/17</li>\n      <li><b>Note:</b> For filters to work properly (default is string), make sure to provide a FieldType (type is against the dataset, not the Formatter)</li>\n    </ul>\n    <li>Date Filters</li>\n    <ul>\n      <li>\n        FieldType of dateUtc/date (from dataset) can use an extra option of \"filterSearchType\" to let user filter more easily.\n        For example, in the \"UTC Date\" field below, you can type \"&gt;02/28/2017\", also when dealing with UTC you have to take the time difference in consideration.\n      </li>\n    </ul>\n    <li>On String filters, (*) can be used as startsWith (Hello* => matches \"Hello Word\") ... endsWith (*Doe => matches: \"John Doe\")</li>\n    <li>Custom Filter are now possible, \"Description\" column below, is a customized InputFilter with different placeholder. See <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/column-functionalities/filters/custom-filter\" target=\"_blank\">Wiki - Custom Filter</a></li>\n  </ul>\n`;\n\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n  metrics!: Metrics;\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient))) {\n    this.defineGrid();\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset = this.mockData(NB_ITEMS);\n  }\n\n  detaching() {\n    this.saveCurrentGridState();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title',\n        name: 'Title',\n        field: 'title',\n        filterable: true,\n        sortable: true,\n        type: FieldType.string,\n        minWidth: 45,\n        filter: {\n          model: Filters.compoundInputText\n        }\n      },\n      {\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80,\n        type: FieldType.string,\n        filter: {\n          model: CustomInputFilter, // create a new instance to make each Filter independent from each other customFilter\n          enableTrimWhiteSpace: true\n        }\n      },\n      {\n        id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, exportCsvForceToKeepAsString: true,\n        minWidth: 55,\n        filterable: true,\n        filter: {\n          model: Filters.multipleSelect,\n          // We can load the \"collection\" asynchronously (on first load only, after that we will simply use \"collection\")\n          // 3 ways are supported (aurelia-http-client, aurelia-fetch-client OR even Promise)\n\n          // 1- USE HttpClient from \"aurelia-http-client\" to load collection asynchronously\n          // collectionAsync: this.http.createRequest(SAMPLE_COLLECTION_DATA_URL).asGet().send(),\n\n          // OR 2- use \"aurelia-fetch-client\", they are both supported\n          collectionAsync: this.http.fetch(SAMPLE_COLLECTION_DATA_URL),\n\n          // collectionFilterBy & collectionSortBy accept a single or multiple options\n          // we can exclude certains values 365 & 360 from the dropdown filter\n          collectionFilterBy: [{\n            property: 'value',\n            operator: OperatorType.notEqual,\n            value: 360\n          }, {\n            property: 'value',\n            operator: OperatorType.notEqual,\n            value: 365\n          }],\n\n          // sort the select dropdown in a descending order\n          collectionSortBy: {\n            property: 'value',\n            sortDesc: true,\n            fieldType: FieldType.number\n          },\n          customStructure: {\n            value: 'value',\n            label: 'label',\n            optionLabel: 'value', // if selected text is too long, we can use option labels instead\n            labelSuffix: 'text',\n          },\n          collectionOptions: {\n            separatorBetweenTextLabels: ' ',\n            filterResultAfterEachPass: 'chain' // options are \"merge\" or \"chain\" (defaults to \"chain\")\n          },\n          // we could add certain option(s) to the \"multiple-select\" plugin\n          filterOptions: {\n            maxHeight: 250,\n            width: 175,\n\n            // if we want to display shorter text as the selected text (on the select filter itself, parent element)\n            // we can use \"useSelectOptionLabel\" or \"useSelectOptionLabelToHtml\" the latter will parse html\n            useSelectOptionLabelToHtml: true\n          } as MultipleSelectOption\n        }\n      },\n      {\n        id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, minWidth: 70, type: FieldType.number, sortable: true,\n        filterable: true, filter: { model: Filters.compoundInputNumber }\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, minWidth: 75,\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\n      },\n      {\n        id: 'usDateShort', name: 'US Date Short', field: 'usDateShort', sortable: true, minWidth: 70, width: 70,\n        type: FieldType.dateUsShort, filterable: true, filter: { model: Filters.compoundDate }\n      },\n      {\n        id: 'utcDate', name: 'UTC Date', field: 'utcDate', formatter: Formatters.dateTimeIsoAmPm, sortable: true, minWidth: 115,\n        type: FieldType.dateUtc, outputType: FieldType.dateTimeIsoAmPm,\n        filterable: true,\n        filter: {\n          model: Filters.compoundDate,\n          // override any of the calendar options through \"filterOptions\"\n          filterOptions: { range: { min: 'today' } } as VanillaCalendarOption\n        }\n      },\n      {\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven.isEffort', minWidth: 85, maxWidth: 95,\n        type: FieldType.boolean,\n        sortable: true,\n\n        // to pass multiple formatters, use the params property\n        // also these formatters are executed in sequence, so if you want the checkmark to work correctly, it has to be the last formatter defined\n        formatter: Formatters.multiple,\n        params: { formatters: [Formatters.complexObject, Formatters.checkmarkMaterial] },\n\n        // when the \"field\" string includes the dot \".\" notation, the library will consider this to be a complex object and Filter accordingly\n        filterable: true,\n        filter: {\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\n          // enableRenderHtml: true,\n          // collection: [{ value: '', label: '' }, { value: true, label: 'True', labelPrefix: `<i class=\"mdi mdi-check\"></i> ` }, { value: false, label: 'False' }],\n\n          collection: ['', 'True', 'False'],\n          model: Filters.singleSelect,\n\n          // we could add certain option(s) to the \"multiple-select\" plugin\n          filterOptions: {\n            maxHeight: 250\n          } as MultipleSelectOption,\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableExcelExport: true,\n      enableExcelCopyBuffer: true,\n      enableFiltering: true,\n      // enableFilterTrimWhiteSpace: true,\n      showCustomFooter: true, // display some metrics in the bottom custom footer\n\n      // use columnDef searchTerms OR use presets as shown below\n      presets: {\n        filters: [\n          { columnId: 'duration', searchTerms: [10, 98] },\n          // { columnId: 'complete', searchTerms: ['5'], operator: '>' },\n          { columnId: 'usDateShort', operator: '<', searchTerms: ['4/20/25'] },\n          // { columnId: 'effort-driven', searchTerms: [true] }\n        ],\n        sorters: [\n          { columnId: 'duration', direction: 'DESC' },\n          { columnId: 'complete', direction: 'ASC' }\n        ],\n      },\n      externalResources: [new ExcelExportService()],\n      preParseDateColumns: '__' // or true\n    };\n  }\n\n  logItems() {\n    console.log(this.aureliaGrid.dataView?.getItems());\n  }\n\n  mockData(itemCount: number, startingIndex = 0): any[] {\n    // mock a dataset\n    const tempDataset: any[] = [];\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\n      const randomDuration = Math.round(Math.random() * 100);\n      const randomYear = randomBetween(2000, 2035);\n      const randomYearShort = randomBetween(10, 35);\n      const randomMonth = randomBetween(1, 12);\n      const randomMonthStr = (randomMonth < 10) ? `0${randomMonth}` : randomMonth;\n      const randomDay = randomBetween(10, 28);\n      const randomPercent = randomBetween(0, 100);\n      const randomHour = randomBetween(10, 23);\n      const randomTime = randomBetween(10, 59);\n      const randomMilliseconds = `${randomBetween(1, 9)}${randomBetween(10, 99)}`;\n      const randomIsEffort = (i % 3 === 0);\n\n      tempDataset.push({\n        id: i,\n        title: 'Task ' + i,\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\n        duration: randomDuration,\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: (i % 4) ? null : new Date(randomYear, randomMonth, randomDay),          // provide a Date format\n        usDateShort: `${randomMonth}/${randomDay}/${randomYearShort}`, // provide a date US Short in the dataset\n        utcDate: `${randomYear}-${randomMonthStr}-${randomDay}T${randomHour}:${randomTime}:${randomTime}.${randomMilliseconds}Z`,\n        effortDriven: {\n          isEffort: randomIsEffort,\n          label: randomIsEffort ? 'Effort' : 'NoEffort',\n        }\n      });\n    }\n\n    return tempDataset;\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  gridStateChanged(gridState: GridStateChange) {\n    console.log('Client sample, Grid State changed:: ', gridState.change);\n  }\n\n  /** Save current Filters, Sorters in LocaleStorage or DB */\n  saveCurrentGridState() {\n    console.log('Client sample, current Grid State:: ', this.aureliaGrid.gridStateService.getCurrentGridState());\n  }\n\n  setFiltersDynamically() {\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\n    this.aureliaGrid.filterService.updateFilters([\n      { columnId: 'duration', searchTerms: [2, 25, 48, 50] },\n      { columnId: 'complete', searchTerms: [95], operator: '<' },\n      { columnId: 'effort-driven', searchTerms: [true] },\n      { columnId: 'start', operator: '>=', searchTerms: ['2001-02-28'] },\n    ]);\n  }\n\n  setSortingDynamically() {\n    this.aureliaGrid.sortService.updateSorting([\n      // orders matter, whichever is first in array will be the first sorted column\n      { columnId: 'duration', direction: 'ASC' },\n      { columnId: 'start', direction: 'DESC' },\n    ]);\n  }\n\n  refreshMetrics(_e: Event, args: any) {\n    if (args && args.current >= 0) {\n      window.setTimeout(() => {\n        this.metrics = {\n          startTime: new Date(),\n          endTime: new Date(),\n          itemCount: args && args.current || 0,\n          totalItemCount: this.dataset.length || 0\n        };\n      });\n    }\n  }\n\n  scrollGridBottom() {\n    this.aureliaGrid.slickGrid.navigateBottom();\n  }\n\n  scrollGridTop() {\n    this.aureliaGrid.slickGrid.navigateTop();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","SAMPLE_COLLECTION_DATA_URL","_Example4_decorators","_init","randomBetween","min","max","NB_ITEMS","customElement","__au2ViewDef","Example4","http","resolve","newInstanceOf","IHttpClient","__publicField","aureliaGrid","FieldType","Filters","CustomInputFilter","OperatorType","Formatters","ExcelExportService","_a","itemCount","startingIndex","tempDataset","i","randomDuration","randomYear","randomYearShort","randomMonth","randomMonthStr","randomDay","randomPercent","randomHour","randomTime","randomMilliseconds","randomIsEffort","gridState","args","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}