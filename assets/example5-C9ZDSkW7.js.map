{"version":3,"file":"example5-C9ZDSkW7.js","sources":["../../src/examples/slickgrid/example5.$au.ts","../../src/examples/slickgrid/example5.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example5\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example5.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-9\\\">\\n    <div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n  </div>\\n  <div class=\\\"col-sm-3\\\">\\n    <div class=\\\"alert alert-danger\\\" show.bind=\\\"errorStatus\\\" data-test=\\\"error-status\\\">\\n      <em><strong>Backend Error:</strong> <span innerhtml.bind=\\\"errorStatus\\\"></span></em>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-2\\\">\\n    <div class.bind=\\\"status.class\\\" role=\\\"alert\\\" data-test=\\\"status\\\">\\n      <strong>Status: </strong> ${status.text}\\n      <span hidden.bind=\\\"!processing\\\">\\n        <i class=\\\"mdi mdi-sync mdi-spin\\\"></i>\\n      </span>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-10\\\">\\n    <div class=\\\"alert alert-info\\\" data-test=\\\"alert-odata-query\\\">\\n      <strong>OData Query:</strong> <span data-test=\\\"odata-query-result\\\">${odataQuery}</span>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\">\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-filter\\\"\\n            click.trigger=\\\"setFiltersDynamically()\\\">\\n      Set Filters Dynamically\\n    </button>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"set-dynamic-sorting\\\"\\n            click.trigger=\\\"setSortingDynamically()\\\">\\n      Set Sorting Dynamically\\n    </button>\\n    <br>\\n    <span if.bind=\\\"metrics\\\">\\n      <b>Metrics:</b> ${metrics.endTime | dateFormat: 'DD MMM, h:mm:ss a'} | ${metrics.executionTime}ms |\\n      ${metrics.totalItemCount}\\n      items\\n    </span>\\n  </div>\\n\\n  <div class=\\\"col-sm-8\\\">\\n    <label>OData Version: </label>\\n    <span data-test=\\\"radioVersion\\\">\\n      <label class=\\\"radio-inline control-label\\\" for=\\\"radio2\\\">\\n        <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" data-test=\\\"version2\\\" id=\\\"radio2\\\" checked value.bind=\\\"2\\\"\\n                click.trigger=\\\"setOdataVersion(2)\\\"> 2\\n      </label>\\n      <label class=\\\"radio-inline control-label\\\" for=\\\"radio4\\\">\\n        <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" data-test=\\\"version4\\\" id=\\\"radio4\\\" value.bind=\\\"4\\\"\\n                click.trigger=\\\"setOdataVersion(4)\\\"> 4\\n      </label>\\n    </span>\\n    <label class=\\\"checkbox-inline control-label\\\" for=\\\"enableCount\\\" style=\\\"margin-left: 20px\\\">\\n      <input type=\\\"checkbox\\\" id=\\\"enableCount\\\" data-test=\\\"enable-count\\\" checked.bind=\\\"isCountEnabled\\\"\\n              click.trigger=\\\"changeCountEnableFlag()\\\">\\n      <span style=\\\"font-weight: bold\\\">Enable Count</span> (add to OData query)\\n    </label>\\n    <label class=\\\"checkbox-inline control-label\\\" for=\\\"enableSelect\\\" style=\\\"margin-left: 20px\\\">\\n      <input type=\\\"checkbox\\\" id=\\\"enableSelect\\\" data-test=\\\"enable-select\\\" checked.bind=\\\"isSelectEnabled\\\"\\n              click.trigger=\\\"changeEnableSelectFlag()\\\">\\n      <span style=\\\"font-weight: bold\\\">Enable Select</span> (add to OData query)\\n    </label>\\n    <label class=\\\"checkbox-inline control-label\\\" for=\\\"enableExpand\\\" style=\\\"margin-left: 20px\\\">\\n      <input type=\\\"checkbox\\\" id=\\\"enableExpand\\\" data-test=\\\"enable-expand\\\" checked.bind=\\\"isExpandEnabled\\\"\\n              click.trigger=\\\"changeEnableExpandFlag()\\\">\\n      <span style=\\\"font-weight: bold\\\">Enable Expand</span> (add to OData query)\\n    </label>\\n  </div>\\n</div>\\n<div class=\\\"row mt-2 mb-1\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <button class=\\\"btn btn-outline-danger btn-sm btn-icon\\\" data-test=\\\"throw-page-error-btn\\\"\\n            click.trigger=\\\"throwPageChangeError()\\\">\\n      <span>Throw Error Going to Last Page... </span>\\n      <i class=\\\"mdi mdi-page-last\\\"></i>\\n    </button>\\n\\n    <span class=\\\"ms-2\\\">\\n      <label>Programmatically go to first/last page:</label>\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n        <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-first-page\\\" click.trigger=\\\"goToFirstPage()\\\">\\n          <i class=\\\"mdi mdi-page-first\\\"></i>\\n        </button>\\n        <button class=\\\"btn btn-outline-secondary btn-xs btn-icon px-2\\\" data-test=\\\"goto-last-page\\\" click.trigger=\\\"goToLastPage()\\\">\\n          <i class=\\\"mdi mdi-page-last\\\"></i>\\n        </button>\\n      </div>\\n    </span>\\n  </div>\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid5\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    pagination-options.bind=\\\"paginationOptions\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                    on-grid-state-changed.trigger=\\\"gridStateChanged($event.detail)\\\"\\n                    on-before-sort.trigger=\\\"handleOnBeforeSort($event)\\\"\\n                    on-before-search-change.trigger=\\\"handleOnBeforeSearchChange($event)\\\"\\n                    on-before-pagination-change.trigger=\\\"handleOnBeforePaginationChange($event)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\nimport { GridOdataService, type OdataServiceApi, type OdataOption } from '@slickgrid-universal/odata';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  Filters,\n  type GridOption,\n  type GridStateChange,\n  type Metrics,\n  OperatorType,\n  type Pagination,\n} from 'aurelia-slickgrid';\n\nimport SAMPLE_DATA_URL from './data/customers_100.json?url';\n\nconst defaultPageSize = 20;\nconst CARET_HTML_ESCAPED = '%5E';\nconst PERCENT_HTML_ESCAPED = '%25';\n\nexport class Example5 {\n  title = 'Example 5: Grid with Backend OData Service';\n  subTitle = `\n    Use it when you need to support Pagination with a OData endpoint (for simple JSON, use a regular grid)<br/>\n    Take a look at the (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/backend-services/odata\" target=\"_blank\">Wiki documentation</a>)\n    <br/>\n    <ul class=\"small\">\n      <li>Only \"Name\" field is sortable for the demo (because we use JSON files), however \"multiColumnSort: true\" is also supported</li>\n      <li>This example also demos the Grid State feature, open the console log to see the changes</li>\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)</li>\n      <ul>\n        <li>The (*) can be used as startsWith (ex.: \"abc*\" => startsWith \"abc\") / endsWith (ex.: \"*xyz\" => endsWith \"xyz\")</li>\n        <li>The other operators can be used on column type number for example: \">=100\" (greater than or equal to 100)</li>\n      </ul>\n      <li>OData Service could be replaced by other Service type in the future (GraphQL or whichever you provide)</li>\n      <li>You can also preload a grid with certain \"presets\" like Filters / Sorters / Pagination <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grid-state-preset\" target=\"_blank\">Wiki - Grid Preset</a>\n      <li><span class=\"text-danger\">NOTE:</span> For demo purposes, the last column (filter & sort) will always throw an\n        error and its only purpose is to demo what would happen when you encounter a backend server error\n        (the UI should rollback to previous state before you did the action).\n        Also changing Page Size to 50,000 will also throw which again is for demo purposes.\n      </li>\n    </ul>\n  `;\n  aureliaGrid!: AureliaGridInstance;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n  metrics!: Metrics;\n  paginationOptions!: Pagination;\n\n  isCountEnabled = true;\n  isSelectEnabled = false;\n  isExpandEnabled = false;\n  odataVersion = 2;\n  odataQuery = '';\n  processing = false;\n  errorStatus = '';\n  isPageErrorTest = false;\n  status = { text: '', class: '' };\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient))) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'name', name: 'Name', field: 'name', sortable: true,\n        type: FieldType.string,\n        filterable: true,\n        filter: {\n          model: Filters.compoundInput,\n          compoundOperatorList: [\n            { operator: '', desc: 'Contains' },\n            { operator: '<>', desc: 'Not Contains' },\n            { operator: '=', desc: 'Equals' },\n            { operator: '!=', desc: 'Not equal to' },\n            { operator: 'a*', desc: 'Starts With' },\n            { operator: 'Custom', desc: 'SQL Like' },\n          ],\n        }\n      },\n      {\n        id: 'gender', name: 'Gender', field: 'gender', filterable: true, sortable: true,\n        filter: {\n          model: Filters.singleSelect,\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male' }, { value: 'female', label: 'female' }]\n        }\n      },\n      { id: 'company', name: 'Company', field: 'company', filterable: true, sortable: true },\n      { id: 'category_name', name: 'Category', field: 'category/name', filterable: true, sortable: true },\n    ];\n\n    this.gridOptions = {\n      enableAutoResize: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      checkboxSelector: {\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true\n      },\n      compoundOperatorAltTexts: {\n        // where '=' is any of the `OperatorString` type shown above\n        text: { 'Custom': { operatorAlt: '%%', descAlt: 'SQL Like' } },\n      },\n      enableCellNavigation: true,\n      enableFiltering: true,\n      enableCheckboxSelector: true,\n      enableRowSelection: true,\n      enablePagination: true, // you could optionally disable the Pagination\n      pagination: {\n        pageSizes: [10, 20, 50, 100, 500, 50000],\n        pageSize: defaultPageSize,\n        totalItems: 0\n      },\n      presets: {\n        // you can also type operator as string, e.g.: operator: 'EQ'\n        filters: [\n          { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\n        ],\n        sorters: [\n          // direction can be written as 'asc' (uppercase or lowercase) and/or use the SortDirection type\n          { columnId: 'name', direction: 'asc' },\n        ],\n        pagination: { pageNumber: 2, pageSize: 20 }\n      },\n      backendServiceApi: {\n        service: new GridOdataService(),\n        options: {\n          enableCount: this.isCountEnabled, // add the count in the OData query, which will return a property named \"__count\" (v2) or \"@odata.count\" (v4)\n          enableSelect: this.isSelectEnabled,\n          enableExpand: this.isExpandEnabled,\n          filterQueryOverride: ({ fieldName, columnDef, columnFilterOperator, searchValues }) => {\n            if (columnFilterOperator === OperatorType.custom && columnDef?.id === 'name') {\n              let matchesSearch = searchValues[0].replace(/\\*/g, '.*');\n              matchesSearch = matchesSearch.slice(0, 1) + CARET_HTML_ESCAPED + matchesSearch.slice(1);\n              matchesSearch = matchesSearch.slice(0, -1) + '$\\'';\n\n              return `matchesPattern(${fieldName}, ${matchesSearch})`;\n            }\n            return;\n          },\n          version: this.odataVersion        // defaults to 2, the query string is slightly different between OData 2 and 4\n        },\n        onError: (error: Error) => {\n          console.log('ERROR', error);\n          this.errorStatus = error.message;\n          this.displaySpinner(false, true);\n        },\n        preProcess: () => {\n          this.errorStatus = '';\n          this.displaySpinner(true);\n        },\n        process: (query) => this.getCustomerApiCall(query),\n        postProcess: (response) => {\n          this.metrics = response.metrics;\n          this.displaySpinner(false);\n          this.getCustomerCallback(response);\n        }\n      } as OdataServiceApi\n    };\n  }\n\n  displaySpinner(isProcessing: boolean, isError?: boolean) {\n    this.processing = isProcessing;\n    if (isError) {\n      this.status = { text: 'ERROR!!!', class: 'alert alert-danger' };\n    } else {\n      this.status = (isProcessing)\n        ? { text: 'loading', class: 'alert alert-warning' }\n        : { text: 'finished', class: 'alert alert-success' };\n    }\n  }\n\n  getCustomerCallback(data: any) {\n    // totalItems property needs to be filled for pagination to work correctly\n    // however we need to force Aurelia to do a dirty check, doing a clone object will do just that\n    let totalItemCount: number = data['totalRecordCount']; // you can use \"totalRecordCount\" or any name or \"odata.count\" when \"enableCount\" is set\n    if (this.isCountEnabled) {\n      totalItemCount = (this.odataVersion === 4) ? data['@odata.count'] : data['d']['__count'];\n    }\n    if (this.metrics) {\n      this.metrics.totalItemCount = totalItemCount;\n    }\n\n    // once pagination totalItems is filled, we can update the dataset\n    this.paginationOptions = { ...this.gridOptions.pagination, totalItems: totalItemCount } as Pagination;\n    this.dataset = this.odataVersion === 4 ? data.value : data.d.results;\n    this.odataQuery = data['query'];\n  }\n\n  getCustomerApiCall(query: string) {\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\n    // for the demo purpose, we will call a mock WebAPI function\n    return this.getCustomerDataApiMock(query);\n  }\n\n  /**\n   * This function is only here to mock a WebAPI call (since we are using a JSON file for the demo)\n   *  in your case the getCustomer() should be a WebAPI function returning a Promise\n   */\n  getCustomerDataApiMock(query: string): Promise<any> {\n    // the mock is returning a Promise, just like a WebAPI typically does\n    return new Promise(resolve => {\n      const queryParams = query.toLowerCase().split('&');\n      let top: number;\n      let skip = 0;\n      let orderBy = '';\n      let countTotalItems = 100;\n      const columnFilters = {};\n\n      if (this.isPageErrorTest) {\n        this.isPageErrorTest = false;\n        throw new Error('Server timed out trying to retrieve data for the last page');\n      }\n\n      for (const param of queryParams) {\n        if (param.includes('$top=')) {\n          top = +(param.substring('$top='.length));\n          if (top === 50000) {\n            throw new Error('Server timed out retrieving 50,000 rows');\n          }\n        }\n        if (param.includes('$skip=')) {\n          skip = +(param.substring('$skip='.length));\n        }\n        if (param.includes('$orderby=')) {\n          orderBy = param.substring('$orderby='.length);\n        }\n        if (param.includes('$filter=')) {\n          const filterBy = param.substring('$filter='.length).replace('%20', ' ');\n          if (filterBy.includes('matchespattern')) {\n            const regex = new RegExp(`matchespattern\\\\(([a-zA-Z]+),\\\\s'${CARET_HTML_ESCAPED}(.*?)'\\\\)`, 'i');\n            const filterMatch = filterBy.match(regex);\n            const fieldName = filterMatch[1].trim();\n            columnFilters[fieldName] = { type: 'matchespattern', term: '^' + filterMatch[2].trim() };\n          }\n          if (filterBy.includes('contains')) {\n            const filterMatch = filterBy.match(/contains\\(([a-zA-Z/]+),\\s?'(.*?)'/);\n            const fieldName = filterMatch![1].trim();\n            (columnFilters as any)[fieldName] = { type: 'substring', term: filterMatch![2].trim() };\n          }\n          if (filterBy.includes('substringof')) {\n            const filterMatch = filterBy.match(/substringof\\('(.*?)',\\s([a-zA-Z/]+)/);\n            const fieldName = filterMatch![2].trim();\n            (columnFilters as any)[fieldName] = { type: 'substring', term: filterMatch![1].trim() };\n          }\n          for (const operator of ['eq', 'ne', 'le', 'lt', 'gt', 'ge']) {\n            if (filterBy.includes(operator)) {\n              const re = new RegExp(`([a-zA-Z ]*) ${operator} '(.*?)'`);\n              const filterMatch = re.exec(filterBy);\n              if (Array.isArray(filterMatch)) {\n                const fieldName = filterMatch[1].trim();\n                (columnFilters as any)[fieldName] = { type: operator, term: filterMatch[2].trim() };\n              }\n            }\n          }\n          if (filterBy.includes('startswith') && filterBy.includes('endswith')) {\n            const filterStartMatch = filterBy.match(/startswith\\(([a-zA-Z ]*),\\s?'(.*?)'/) || [];\n            const filterEndMatch = filterBy.match(/endswith\\(([a-zA-Z ]*),\\s?'(.*?)'/) || [];\n            const fieldName = filterStartMatch[1].trim();\n            columnFilters[fieldName] = { type: 'starts+ends', term: [filterStartMatch[2].trim(), filterEndMatch[2].trim()] };\n          } else if (filterBy.includes('startswith')) {\n            const filterMatch = filterBy.match(/startswith\\(([a-zA-Z ]*),\\s?'(.*?)'/);\n            const fieldName = filterMatch![1].trim();\n            (columnFilters as any)[fieldName] = { type: 'starts', term: filterMatch![2].trim() };\n          } else if (filterBy.includes('endswith')) {\n            const filterMatch = filterBy.match(/endswith\\(([a-zA-Z ]*),\\s?'(.*?)'/);\n            const fieldName = filterMatch![1].trim();\n            (columnFilters as any)[fieldName] = { type: 'ends', term: filterMatch![2].trim() };\n          }\n\n          // simulate a backend error when trying to sort on the \"Company\" field\n          if (filterBy.includes('company')) {\n            throw new Error('Server could not filter using the field \"Company\"');\n          }\n        }\n      }\n\n      // simulate a backend error when trying to sort on the \"Company\" field\n      if (orderBy.includes('company')) {\n        throw new Error('Server could not sort using the field \"Company\"');\n      }\n\n      // read the json and create a fresh copy of the data that we are free to modify\n      this.http.fetch(SAMPLE_DATA_URL)\n        .then(e => e.json())\n        .then((data: any) => {\n          // Sort the data\n          if (orderBy?.length > 0) {\n            const orderByClauses = orderBy.split(',');\n            for (const orderByClause of orderByClauses) {\n              const orderByParts = orderByClause.split(' ');\n              const orderByField = orderByParts[0];\n\n              let selector = (obj: any): string => obj;\n              for (const orderByFieldPart of orderByField.split('/')) {\n                const prevSelector = selector;\n                selector = (obj: any) => {\n                  return prevSelector(obj)[orderByFieldPart as any];\n                };\n              }\n\n              const sort = orderByParts[1] ?? 'asc';\n              switch (sort.toLocaleLowerCase()) {\n                case 'asc':\n                  data = data.sort((a: any, b: any) => selector(a).localeCompare(selector(b)));\n                  break;\n                case 'desc':\n                  data = data.sort((a: any, b: any) => selector(b).localeCompare(selector(a)));\n                  break;\n              }\n            }\n          }\n\n          // Read the result field from the JSON response.\n          let firstRow = skip;\n          let filteredData = data;\n          if (columnFilters) {\n            for (const columnId in columnFilters) {\n              if (columnFilters.hasOwnProperty(columnId)) {\n                filteredData = filteredData.filter((column: Column) => {\n                  const filterType = (columnFilters as any)[columnId].type;\n                  const searchTerm = (columnFilters as any)[columnId].term;\n                  let colId = columnId;\n                  if (columnId?.indexOf(' ') !== -1) {\n                    const splitIds = columnId.split(' ');\n                    colId = splitIds[splitIds.length - 1];\n                  }\n\n                  let filterTerm;\n                  let col = column;\n                  for (const part of colId.split('/')) {\n                    filterTerm = (col as any)[part];\n                    col = filterTerm;\n                  }\n\n                  if (filterTerm) {\n                    const [term1, term2] = Array.isArray(searchTerm) ? searchTerm : [searchTerm];\n\n                    switch (filterType) {\n                      case 'eq': return filterTerm.toLowerCase() === term1;\n                      case 'ne': return filterTerm.toLowerCase() !== term1;\n                      case 'le': return filterTerm.toLowerCase() <= term1;\n                      case 'lt': return filterTerm.toLowerCase() < term1;\n                      case 'gt': return filterTerm.toLowerCase() > term1;\n                      case 'ge': return filterTerm.toLowerCase() >= term1;\n                      case 'ends': return filterTerm.toLowerCase().endsWith(term1);\n                      case 'starts': return filterTerm.toLowerCase().startsWith(term1);\n                      case 'starts+ends': return filterTerm.toLowerCase().startsWith(term1) && filterTerm.toLowerCase().endsWith(term2);\n                      case 'substring': return filterTerm.toLowerCase().includes(term1);\n                      case 'matchespattern': return new RegExp((term1 as string).replaceAll(PERCENT_HTML_ESCAPED, '.*'), 'i').test(filterTerm);\n                    }\n                  }\n                });\n              }\n            }\n            countTotalItems = filteredData.length;\n          }\n\n          // make sure page skip is not out of boundaries, if so reset to first page & remove skip from query\n          if (firstRow > filteredData.length) {\n            query = query.replace(`$skip=${firstRow}`, '');\n            firstRow = 0;\n          }\n          const updatedData = filteredData.slice(firstRow, firstRow + top!);\n\n          window.setTimeout(() => {\n            const backendResult: any = { query };\n            if (!this.isCountEnabled) {\n              backendResult['totalRecordCount'] = countTotalItems;\n            }\n\n            if (this.odataVersion === 4) {\n              backendResult['value'] = updatedData;\n              if (this.isCountEnabled) {\n                backendResult['@odata.count'] = countTotalItems;\n              }\n            } else {\n              backendResult['d'] = { results: updatedData };\n              if (this.isCountEnabled) {\n                backendResult['d']['__count'] = countTotalItems;\n              }\n            }\n\n            // console.log('Backend Result', backendResult);\n            resolve(backendResult);\n          }, 150);\n        });\n    });\n  }\n\n  goToFirstPage() {\n    this.aureliaGrid.paginationService!.goToFirstPage();\n  }\n\n  goToLastPage() {\n    this.aureliaGrid.paginationService!.goToLastPage();\n  }\n\n  /** Dispatched event of a Grid State Changed event */\n  gridStateChanged(gridStateChanges: GridStateChange) {\n    // console.log('Client sample, Grid State changed:: ', gridStateChanges);\n    console.log('Client sample, Grid State changed:: ', gridStateChanges.change);\n  }\n\n  setFiltersDynamically() {\n    // we can Set Filters Dynamically (or different filters) afterward through the FilterService\n    this.aureliaGrid.filterService.updateFilters([\n      // { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\n      { columnId: 'name', searchTerms: ['A'], operator: 'a*' },\n    ]);\n  }\n\n  setSortingDynamically() {\n    this.aureliaGrid.sortService.updateSorting([\n      { columnId: 'name', direction: 'DESC' },\n    ]);\n  }\n\n  throwPageChangeError() {\n    this.isPageErrorTest = true;\n    this.aureliaGrid?.paginationService?.goToLastPage();\n  }\n\n  // YOU CAN CHOOSE TO PREVENT EVENT FROM BUBBLING IN THE FOLLOWING 3x EVENTS\n  // note however that internally the cancelling the search is more of a rollback\n  handleOnBeforeSort(/* e: Event */) {\n    // e.preventDefault();\n    // return false;\n    return true;\n  }\n\n  handleOnBeforeSearchChange(/* e: Event */) {\n    // e.preventDefault();\n    // return false;\n    return true;\n  }\n\n  handleOnBeforePaginationChange(/* e: Event */) {\n    // e.preventDefault();\n    // return false;\n    return true;\n  }\n\n  // THE FOLLOWING METHODS ARE ONLY FOR DEMO PURPOSES DO NOT USE THIS CODE\n  // ---\n\n  changeCountEnableFlag() {\n    this.isCountEnabled = !this.isCountEnabled;\n    this.resetOptions({ enableCount: this.isCountEnabled });\n    return true;\n  }\n\n  changeEnableSelectFlag() {\n    this.isSelectEnabled = !this.isSelectEnabled;\n    this.resetOptions({ enableSelect: this.isSelectEnabled });\n    return true;\n  }\n\n  changeEnableExpandFlag() {\n    this.isExpandEnabled = !this.isExpandEnabled;\n    this.resetOptions({ enableExpand: this.isExpandEnabled });\n    return true;\n  }\n\n  setOdataVersion(version: number) {\n    this.odataVersion = version;\n    this.resetOptions({ version: this.odataVersion });\n    return true;\n  }\n\n  private resetOptions(options: Partial<OdataOption>) {\n    this.displaySpinner(true);\n    const odataService = this.gridOptions.backendServiceApi!.service as GridOdataService;\n    odataService.updateOptions(options);\n    odataService.clearFilters();\n    this.aureliaGrid?.filterService.clearFilters();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example5_decorators","_init","defaultPageSize","CARET_HTML_ESCAPED","PERCENT_HTML_ESCAPED","customElement","__au2ViewDef","Example5","http","resolve","newInstanceOf","IHttpClient","__publicField","aureliaGrid","FieldType","Filters","OperatorType","GridOdataService","fieldName","columnDef","columnFilterOperator","searchValues","matchesSearch","error","query","response","isProcessing","isError","data","totalItemCount","queryParams","top","skip","orderBy","countTotalItems","columnFilters","param","filterBy","regex","filterMatch","operator","filterStartMatch","filterEndMatch","SAMPLE_DATA_URL","e","orderByClauses","orderByClause","orderByParts","orderByField","selector","obj","orderByFieldPart","prevSelector","a","b","firstRow","filteredData","columnId","column","filterType","searchTerm","colId","splitIds","filterTerm","col","part","term1","term2","updatedData","backendResult","gridStateChanges","_b","_a","version","options","odataService","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"me,CAAG,EAClBC,EAAY,CAAC,EAC1B,IAAIC,EACG,SAASC,EAASC,EAAW,CAC7BF,IACHA,EAAKG,EAAc,OAAO,CAAE,KAAAP,EAAM,SAAAC,EAAU,aAAAC,EAAc,UAAAC,EAAW,GAEvEG,EAAU,SAASF,CAAE,CACvB,kmCCZAI,EAAAC,EAiBA,MAAMC,GAAkB,GAClBC,EAAqB,MACrBC,GAAuB,MAAMJ,EAAA,CAAAK,EAAAC,CAAA,CAAA,EAE5B,MAAMC,CAAS,CAyCpB,YAAqBC,EAAoBC,EAAQC,EAAcC,CAAW,CAAC,EAAG,CAAzD,KAAA,KAAAH,EAxCbI,EAAA,KAAA,QAAA,4CAAA,EACGA,EAAA,KAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAqBXA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,oBAA8B,EAAC,EAC/BA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,UAAiB,EAAC,EACHA,EAAA,KAAA,eAAA,EAAA,EACfA,EAAA,KAAA,SAAA,EACAA,EAAA,KAAA,mBAAA,EAEiBA,EAAA,KAAA,iBAAA,EAAA,EACCA,EAAA,KAAA,kBAAA,EAAA,EACAA,EAAA,KAAA,kBAAA,EAAA,EACHA,EAAA,KAAA,eAAA,CAAA,EACFA,EAAA,KAAA,aAAA,EAAA,EACAA,EAAA,KAAA,aAAA,EAAA,EACCA,EAAA,KAAA,cAAA,EAAA,EACIA,EAAA,KAAA,kBAAA,EAAA,EAClBA,EAAA,KAAA,SAAS,CAAE,KAAM,GAAI,MAAO,GAAG,EAI7B,KAAK,WAAW,CAAA,CAGlB,iBAAiBC,EAAkC,CACjD,KAAK,YAAcA,CAAA,CAGrB,YAAa,CACX,KAAK,kBAAoB,CACvB,CACE,GAAI,OAAQ,KAAM,OAAQ,MAAO,OAAQ,SAAU,GACnD,KAAMC,EAAU,OAChB,WAAY,GACZ,OAAQ,CACN,MAAOC,EAAQ,cACf,qBAAsB,CACpB,CAAE,SAAU,GAAI,KAAM,UAAW,EACjC,CAAE,SAAU,KAAM,KAAM,cAAe,EACvC,CAAE,SAAU,IAAK,KAAM,QAAS,EAChC,CAAE,SAAU,KAAM,KAAM,cAAe,EACvC,CAAE,SAAU,KAAM,KAAM,aAAc,EACtC,CAAE,SAAU,SAAU,KAAM,UAAW,CAAA,CACzC,CAEJ,EACA,CACE,GAAI,SAAU,KAAM,SAAU,MAAO,SAAU,WAAY,GAAM,SAAU,GAC3E,OAAQ,CACN,MAAOA,EAAQ,aACf,WAAY,CAAC,CAAE,MAAO,GAAI,MAAO,IAAM,CAAE,MAAO,OAAQ,MAAO,QAAU,CAAE,MAAO,SAAU,MAAO,QAAU,CAAA,CAAA,CAEjH,EACA,CAAE,GAAI,UAAW,KAAM,UAAW,MAAO,UAAW,WAAY,GAAM,SAAU,EAAK,EACrF,CAAE,GAAI,gBAAiB,KAAM,WAAY,MAAO,gBAAiB,WAAY,GAAM,SAAU,EAAK,CACpG,EAEA,KAAK,YAAc,CACjB,iBAAkB,GAClB,WAAY,CACV,UAAW,kBACX,aAAc,EAChB,EACA,iBAAkB,CAEhB,sBAAuB,GACvB,qBAAsB,EACxB,EACA,yBAA0B,CAExB,KAAM,CAAE,OAAU,CAAE,YAAa,KAAM,QAAS,UAAa,CAAA,CAC/D,EACA,qBAAsB,GACtB,gBAAiB,GACjB,uBAAwB,GACxB,mBAAoB,GACpB,iBAAkB,GAClB,WAAY,CACV,UAAW,CAAC,GAAI,GAAI,GAAI,IAAK,IAAK,GAAK,EACvC,SAAUb,GACV,WAAY,CACd,EACA,QAAS,CAEP,QAAS,CACP,CAAE,SAAU,SAAU,YAAa,CAAC,MAAM,EAAG,SAAUc,EAAa,KAAM,CAC5E,EACA,QAAS,CAEP,CAAE,SAAU,OAAQ,UAAW,KAAM,CACvC,EACA,WAAY,CAAE,WAAY,EAAG,SAAU,EAAG,CAC5C,EACA,kBAAmB,CACjB,QAAS,IAAIC,EACb,QAAS,CACP,YAAa,KAAK,eAClB,aAAc,KAAK,gBACnB,aAAc,KAAK,gBACnB,oBAAqB,CAAC,CAAE,UAAAC,EAAW,UAAAC,EAAW,qBAAAC,EAAsB,aAAAC,KAAmB,CACrF,GAAID,IAAyBJ,EAAa,SAAUG,GAAA,YAAAA,EAAW,MAAO,OAAQ,CAC5E,IAAIG,EAAgBD,EAAa,CAAC,EAAE,QAAQ,MAAO,IAAI,EACvC,OAAAC,EAAAA,EAAc,MAAM,EAAG,CAAC,EAAInB,EAAqBmB,EAAc,MAAM,CAAC,EACtFA,EAAgBA,EAAc,MAAM,EAAG,EAAE,EAAI,KAEtC,kBAAAJ,CAAA,KAAAI,CAAA,GAAA,CAGX,EACA,QAAS,KAAK,YAChB,EACA,QAAUC,GAAiB,CACjB,QAAA,IAAI,QAASA,CAAK,EAC1B,KAAK,YAAcA,EAAM,QACpB,KAAA,eAAe,GAAO,EAAI,CACjC,EACA,WAAY,IAAM,CAChB,KAAK,YAAc,GACnB,KAAK,eAAe,EAAI,CAC1B,EACA,QAAUC,GAAU,KAAK,mBAAmBA,CAAK,EACjD,YAAcC,GAAa,CACzB,KAAK,QAAUA,EAAS,QACxB,KAAK,eAAe,EAAK,EACzB,KAAK,oBAAoBA,CAAQ,CAAA,CACnC,CAEJ,CAAA,CAGF,eAAeC,EAAuBC,EAAmB,CACvD,KAAK,WAAaD,EACdC,EACF,KAAK,OAAS,CAAE,KAAM,WAAY,MAAO,oBAAqB,EAE9D,KAAK,OAAUD,EACX,CAAE,KAAM,UAAW,MAAO,qBAAsB,EAChD,CAAE,KAAM,WAAY,MAAO,qBAAsB,CACvD,CAGF,oBAAoBE,EAAW,CAGzB,IAAAC,EAAyBD,EAAK,iBAC9B,KAAK,iBACWC,EAAA,KAAK,eAAiB,EAAKD,EAAK,cAAc,EAAIA,EAAK,EAAK,SAE5E,KAAK,UACP,KAAK,QAAQ,eAAiBC,GAIhC,KAAK,kBAAoB,CAAE,GAAG,KAAK,YAAY,WAAY,WAAYA,CAAe,EACtF,KAAK,QAAU,KAAK,eAAiB,EAAID,EAAK,MAAQA,EAAK,EAAE,QACxD,KAAA,WAAaA,EAAK,KAAO,CAGhC,mBAAmBJ,EAAe,CAGzB,OAAA,KAAK,uBAAuBA,CAAK,CAAA,CAO1C,uBAAuBA,EAA6B,CAE3C,OAAA,IAAI,QAAQf,GAAW,CAC5B,MAAMqB,EAAcN,EAAM,YAAY,EAAE,MAAM,GAAG,EAC7C,IAAAO,EACAC,EAAO,EACPC,EAAU,GACVC,EAAkB,IACtB,MAAMC,EAAgB,CAAC,EAEvB,GAAI,KAAK,gBACP,WAAK,gBAAkB,GACjB,IAAI,MAAM,4DAA4D,EAG9E,UAAWC,KAASN,EAAa,CAC3B,GAAAM,EAAM,SAAS,OAAO,IACxBL,EAAM,CAAEK,EAAM,UAAU,CAAc,EAClCL,IAAQ,KACJ,MAAA,IAAI,MAAM,yCAAyC,EASzD,GANAK,EAAM,SAAS,QAAQ,IACzBJ,EAAO,CAAEI,EAAM,UAAU,CAAe,GAEtCA,EAAM,SAAS,WAAW,IAClBH,EAAAG,EAAM,UAAU,CAAkB,GAE1CA,EAAM,SAAS,UAAU,EAAG,CACxB,MAAAC,EAAWD,EAAM,UAAU,CAAiB,EAAE,QAAQ,MAAO,GAAG,EAClE,GAAAC,EAAS,SAAS,gBAAgB,EAAG,CACvC,MAAMC,EAAQ,IAAI,OAAO,oCAAiEnC,CAAA,YAAE,GAAG,EACzFoC,EAAcF,EAAS,MAAMC,CAAK,EAClCpB,EAAYqB,EAAY,CAAC,EAAE,KAAK,EACxBJ,EAAAjB,CAAS,EAAI,CAAE,KAAM,iBAAkB,KAAM,IAAMqB,EAAY,CAAC,EAAE,KAAA,CAAO,CAAA,CAErF,GAAAF,EAAS,SAAS,UAAU,EAAG,CAC3B,MAAAE,EAAcF,EAAS,MAAM,mCAAmC,EAChEnB,EAAYqB,EAAa,CAAC,EAAE,KAAK,EACtCJ,EAAsBjB,CAAS,EAAI,CAAE,KAAM,YAAa,KAAMqB,EAAa,CAAC,EAAE,MAAO,CAAA,CAEpF,GAAAF,EAAS,SAAS,aAAa,EAAG,CAC9B,MAAAE,EAAcF,EAAS,MAAM,qCAAqC,EAClEnB,EAAYqB,EAAa,CAAC,EAAE,KAAK,EACtCJ,EAAsBjB,CAAS,EAAI,CAAE,KAAM,YAAa,KAAMqB,EAAa,CAAC,EAAE,MAAO,CAAA,CAE7E,UAAAC,IAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,EACpD,GAAAH,EAAS,SAASG,CAAQ,EAAG,CAEzB,MAAAD,EADK,IAAI,OAAO,gBAAkCC,CAAA,UAAA,EACjC,KAAKH,CAAQ,EAChC,GAAA,MAAM,QAAQE,CAAW,EAAG,CAC9B,MAAMrB,EAAYqB,EAAY,CAAC,EAAE,KAAK,EACrCJ,EAAsBjB,CAAS,EAAI,CAAE,KAAMsB,EAAU,KAAMD,EAAY,CAAC,EAAE,MAAO,CAAA,CACpF,CAGJ,GAAIF,EAAS,SAAS,YAAY,GAAKA,EAAS,SAAS,UAAU,EAAG,CACpE,MAAMI,EAAmBJ,EAAS,MAAM,qCAAqC,GAAK,CAAC,EAC7EK,EAAiBL,EAAS,MAAM,mCAAmC,GAAK,CAAC,EACzEnB,EAAYuB,EAAiB,CAAC,EAAE,KAAK,EAC3CN,EAAcjB,CAAS,EAAI,CAAE,KAAM,cAAe,KAAM,CAACuB,EAAiB,CAAC,EAAE,OAAQC,EAAe,CAAC,EAAE,KAAA,CAAM,CAAE,CACtG,SAAAL,EAAS,SAAS,YAAY,EAAG,CACpC,MAAAE,EAAcF,EAAS,MAAM,qCAAqC,EAClEnB,EAAYqB,EAAa,CAAC,EAAE,KAAK,EACtCJ,EAAsBjB,CAAS,EAAI,CAAE,KAAM,SAAU,KAAMqB,EAAa,CAAC,EAAE,MAAO,CAC1E,SAAAF,EAAS,SAAS,UAAU,EAAG,CAClC,MAAAE,EAAcF,EAAS,MAAM,mCAAmC,EAChEnB,EAAYqB,EAAa,CAAC,EAAE,KAAK,EACtCJ,EAAsBjB,CAAS,EAAI,CAAE,KAAM,OAAQ,KAAMqB,EAAa,CAAC,EAAE,MAAO,CAAA,CAI/E,GAAAF,EAAS,SAAS,SAAS,EACvB,MAAA,IAAI,MAAM,mDAAmD,CACrE,CACF,CAIE,GAAAJ,EAAQ,SAAS,SAAS,EACtB,MAAA,IAAI,MAAM,iDAAiD,EAInE,KAAK,KAAK,MAAMU,CAAe,EAC5B,KAAKC,GAAKA,EAAE,KAAM,CAAA,EAClB,KAAMhB,GAAc,CAEf,IAAAK,GAAA,YAAAA,EAAS,QAAS,EAAG,CACjB,MAAAY,EAAiBZ,EAAQ,MAAM,GAAG,EACxC,UAAWa,KAAiBD,EAAgB,CACpC,MAAAE,EAAeD,EAAc,MAAM,GAAG,EACtCE,EAAeD,EAAa,CAAC,EAE/B,IAAAE,EAAYC,GAAqBA,EACrC,UAAWC,KAAoBH,EAAa,MAAM,GAAG,EAAG,CACtD,MAAMI,EAAeH,EACrBA,EAAYC,GACHE,EAAaF,CAAG,EAAEC,CAAuB,CAClD,CAIM,QADKJ,EAAa,CAAC,GAAK,OACnB,kBAAqB,EAAA,CAChC,IAAK,MACHnB,EAAOA,EAAK,KAAK,CAACyB,EAAQC,IAAWL,EAASI,CAAC,EAAE,cAAcJ,EAASK,CAAC,CAAC,CAAC,EAC3E,MACF,IAAK,OACH1B,EAAOA,EAAK,KAAK,CAACyB,EAAQC,IAAWL,EAASK,CAAC,EAAE,cAAcL,EAASI,CAAC,CAAC,CAAC,EAC3E,KAAA,CACJ,CACF,CAIF,IAAIE,EAAWvB,EACXwB,EAAe5B,EACnB,GAAIO,EAAe,CACjB,UAAWsB,KAAYtB,EACjBA,EAAc,eAAesB,CAAQ,IACxBD,EAAAA,EAAa,OAAQE,GAAmB,CAC/C,MAAAC,EAAcxB,EAAsBsB,CAAQ,EAAE,KAC9CG,EAAczB,EAAsBsB,CAAQ,EAAE,KACpD,IAAII,EAAQJ,EACZ,IAAIA,GAAA,YAAAA,EAAU,QAAQ,QAAS,GAAI,CAC3B,MAAAK,EAAWL,EAAS,MAAM,GAAG,EAC3BI,EAAAC,EAASA,EAAS,OAAS,CAAC,CAAA,CAGlC,IAAAC,EACAC,EAAMN,EACV,UAAWO,KAAQJ,EAAM,MAAM,GAAG,EAChCE,EAAcC,EAAYC,CAAI,EACxBD,EAAAD,EAGR,GAAIA,EAAY,CACR,KAAA,CAACG,EAAOC,CAAK,EAAI,MAAM,QAAQP,CAAU,EAAIA,EAAa,CAACA,CAAU,EAE3E,OAAQD,EAAY,CAClB,IAAK,KAAa,OAAAI,EAAW,gBAAkBG,EAC/C,IAAK,KAAa,OAAAH,EAAW,gBAAkBG,EAC/C,IAAK,KAAa,OAAAH,EAAW,eAAiBG,EAC9C,IAAK,KAAa,OAAAH,EAAW,cAAgBG,EAC7C,IAAK,KAAa,OAAAH,EAAW,cAAgBG,EAC7C,IAAK,KAAa,OAAAH,EAAW,eAAiBG,EAC9C,IAAK,OAAQ,OAAOH,EAAW,cAAc,SAASG,CAAK,EAC3D,IAAK,SAAU,OAAOH,EAAW,cAAc,WAAWG,CAAK,EAC/D,IAAK,cAAsB,OAAAH,EAAW,YAAY,EAAE,WAAWG,CAAK,GAAKH,EAAW,YAAA,EAAc,SAASI,CAAK,EAChH,IAAK,YAAa,OAAOJ,EAAW,cAAc,SAASG,CAAK,EAChE,IAAK,iBAAyB,OAAA,IAAI,OAAQA,EAAiB,WAAW9D,GAAsB,IAAI,EAAG,GAAG,EAAE,KAAK2D,CAAU,CAAA,CACzH,CACF,CACD,GAGL7B,EAAkBsB,EAAa,MAAA,CAI7BD,EAAWC,EAAa,SAC1BhC,EAAQA,EAAM,QAAQ,SAAmB+B,CAAA,GAAE,EAAE,EAClCA,EAAA,GAEb,MAAMa,EAAcZ,EAAa,MAAMD,EAAUA,EAAWxB,CAAI,EAEhE,OAAO,WAAW,IAAM,CAChB,MAAAsC,EAAqB,CAAE,MAAA7C,CAAM,EAC9B,KAAK,iBACR6C,EAAc,iBAAsBnC,GAGlC,KAAK,eAAiB,GACxBmC,EAAc,MAAWD,EACrB,KAAK,iBACPC,EAAc,cAAc,EAAInC,KAGlCmC,EAAc,EAAO,CAAE,QAASD,CAAY,EACxC,KAAK,iBACOC,EAAA,EAAK,QAAanC,IAKpCzB,EAAQ4D,CAAa,GACpB,GAAG,CAAA,CACP,CAAA,CACJ,CAAA,CAGH,eAAgB,CACT,KAAA,YAAY,kBAAmB,cAAc,CAAA,CAGpD,cAAe,CACR,KAAA,YAAY,kBAAmB,aAAa,CAAA,CAInD,iBAAiBC,EAAmC,CAE1C,QAAA,IAAI,uCAAwCA,EAAiB,MAAM,CAAA,CAG7E,uBAAwB,CAEjB,KAAA,YAAY,cAAc,cAAc,CAE3C,CAAE,SAAU,OAAQ,YAAa,CAAC,GAAG,EAAG,SAAU,IAAK,CAAA,CACxD,CAAA,CAGH,uBAAwB,CACjB,KAAA,YAAY,YAAY,cAAc,CACzC,CAAE,SAAU,OAAQ,UAAW,MAAO,CAAA,CACvC,CAAA,CAGH,sBAAuB,SACrB,KAAK,gBAAkB,IAClBC,GAAAC,EAAA,KAAA,cAAA,YAAAA,EAAa,oBAAb,MAAAD,EAAgC,cAAa,CAKpD,oBAAmC,CAG1B,MAAA,EAAA,CAGT,4BAA2C,CAGlC,MAAA,EAAA,CAGT,gCAA+C,CAGtC,MAAA,EAAA,CAMT,uBAAwB,CACjB,YAAA,eAAiB,CAAC,KAAK,eAC5B,KAAK,aAAa,CAAE,YAAa,KAAK,eAAgB,EAC/C,EAAA,CAGT,wBAAyB,CAClB,YAAA,gBAAkB,CAAC,KAAK,gBAC7B,KAAK,aAAa,CAAE,aAAc,KAAK,gBAAiB,EACjD,EAAA,CAGT,wBAAyB,CAClB,YAAA,gBAAkB,CAAC,KAAK,gBAC7B,KAAK,aAAa,CAAE,aAAc,KAAK,gBAAiB,EACjD,EAAA,CAGT,gBAAgBE,EAAiB,CAC/B,YAAK,aAAeA,EACpB,KAAK,aAAa,CAAE,QAAS,KAAK,aAAc,EACzC,EAAA,CAGD,aAAaC,EAA+B,OAClD,KAAK,eAAe,EAAI,EAClB,MAAAC,EAAe,KAAK,YAAY,kBAAmB,QACzDA,EAAa,cAAcD,CAAO,EAClCC,EAAa,aAAa,GACrBH,EAAA,KAAA,cAAA,MAAAA,EAAa,cAAc,cAAa,CAG/C,gBAAiB,OACV,KAAA,aAAe,CAAC,KAAK,aACpB,MAAAI,EAAS,KAAK,aAAe,MAAQ,UAC3CJ,EAAA,SAAS,cAAc,WAAW,IAAlC,MAAAA,EAAqC,UAAUI,GAAQ,UAClD,KAAA,YAAY,eAAe,WAAW,CAAC,CAAA,CAEhD,CA3dO3E,EAAA4E,EAAA,EAAMtE,EAANuE,kBAF4B9E,EAEtBO,CAAA,EAANwE,GAAM9E,EAAA,EAAAM,CAAA"}