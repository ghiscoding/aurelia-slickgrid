{"version":3,"file":"example39-BWSVvqNd.js","sources":["../../src/examples/slickgrid/example39.$au.ts","../../src/examples/slickgrid/example39.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example39.scss\";\nexport const name = \"example39\";\nexport const template = \"<div class=\\\"demo39\\\">\\n  <h2>\\n    Example 39: GraphQL Backend Service with Infinite Scroll\\n    <span class=\\\"float-end\\\">\\n      <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n          href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example39.ts\\\">\\n        <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n      </a>\\n    </span>\\n    <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n  </h2>\\n\\n  <div class=\\\"subtitle\\\">\\n    <ul>\\n      <li>\\n        Infinite scrolling allows the grid to lazy-load rows from the server when reaching the scroll bottom (end) position.\\n        In its simplest form, the more the user scrolls down, the more rows get loaded.\\n        If we reached the end of the dataset and there is no more data to load, then we'll assume to have the entire dataset loaded in memory.\\n        This contrast with the regular Pagination approach which will only hold a single page data at a time.\\n      </li>\\n      <li>NOTES</li>\\n      <ol>\\n        <li>\\n          <code>presets.pagination</code> is not supported with Infinite Scroll and will revert to the first page,\\n          simply because since we keep appending data, we always have to start from index zero (no offset).\\n        </li>\\n        <li>\\n          Pagination is not shown BUT in fact, that is what is being used behind the scene whenever reaching the scroll end (fetching next batch).\\n        </li>\\n        <li>\\n          Also note that whenever the user changes the Sort(s)/Filter(s) it will always reset and go back to zero index (first page).\\n        </li>\\n      </ol>\\n    </ul>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-5\\\">\\n      <div class.bind=\\\"status.class\\\" role=\\\"alert\\\" data-test=\\\"status\\\">\\n        <strong>Status: </strong> ${status.text}\\n        <span hidden.bind=\\\"!processing\\\">\\n          <i class=\\\"mdi mdi-sync mdi-spin-1s\\\"></i>\\n        </span>\\n      </div>\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"clear-filters-sorting\\\"\\n                  click.trigger=\\\"clearAllFiltersAndSorts()\\\" title=\\\"Clear all Filters & Sorts\\\">\\n            <i class=\\\"mdi mdi-filter-remove-outline\\\"></i>\\n            Clear all Filter & Sorts\\n          </button>\\n          <label for=\\\"serverdelay\\\" class=\\\"ml-4\\\">Server Delay: </label>\\n          <input id=\\\"serverdelay\\\" type=\\\"number\\\" data-test=\\\"server-delay\\\" style=\\\"width: 55px\\\"\\n                value.bind=\\\"serverWaitDelay\\\"\\n                title=\\\"input a fake timer delay to simulate slow server response\\\" />\\n        </div>\\n      </div>\\n      <div class=\\\"row mt-1\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" data-test=\\\"language-button\\\" click.trigger=\\\"switchLanguage()\\\">\\n            <i class=\\\"mdi mdi-translate\\\"></i>\\n            Switch Language\\n          </button>\\n          <strong>Locale:</strong>\\n          <span style=\\\"font-style: italic\\\" data-test=\\\"selected-locale\\\">\\n            ${selectedLanguage + '.json'}\\n          </span>\\n        </div>\\n      </div>\\n      <br />\\n      <div show.bind=\\\"metrics\\\" style=\\\"margin: 10px 0px\\\">\\n        <b>Metrics:</b>\\n        <span>\\n        <span>${metrics.endTime | dateFormat: 'DD MMM, h:mm:ss a'}</span> â€”\\n          <span data-test=\\\"itemCount\\\">${metrics.itemCount}</span>\\n          of\\n          <span data-test=\\\"totalItemCount\\\">${metrics.totalItemCount}</span>\\n          items\\n        </span>\\n        <span class=\\\"badge rounded-pill text-bg-primary\\\" class.bind=\\\"tagDataClass\\\" data-test=\\\"data-loaded-tag\\\">All Data Loaded!!!</span>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-sm-7\\\">\\n      <div class=\\\"alert alert-info\\\" data-test=\\\"alert-graphql-query\\\">\\n        <strong>GraphQL Query:</strong>\\n        <div innerhtml.bind=\\\"graphqlQuery\\\" data-test=\\\"graphql-query-result\\\"></div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <aurelia-slickgrid\\n    grid-id=\\\"grid39\\\"\\n    column-definitions.bind=\\\"columnDefinitions\\\"\\n    grid-options.bind=\\\"gridOptions\\\"\\n    dataset.bind=\\\"dataset\\\"\\n    instances.bind=\\\"aureliaGrid\\\"\\n    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n    on-row-count-changed.trigger=\\\"refreshMetrics($event.detail.args)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { I18N } from '@aurelia/i18n';\nimport { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\nimport { GraphqlService, type GraphqlPaginatedResult, type GraphqlServiceApi, } from '@slickgrid-universal/graphql';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  FieldType,\n  Filters,\n  type GridOption,\n  type Metrics,\n  type MultipleSelectOption,\n  type OnRowCountChangedEventArgs,\n} from 'aurelia-slickgrid';\n\nimport './example39.scss';\nimport SAMPLE_DATA_URL from './data/customers_100.json?url';\n\nconst GRAPHQL_QUERY_DATASET_NAME = 'users';\nconst FAKE_SERVER_DELAY = 250;\n\nfunction unescapeAndLowerCase(val: string) {\n  return val.replace(/^\"/, '').replace(/\"$/, '').toLowerCase();\n}\n\nexport class Example39 {\n  aureliaGrid: AureliaGridInstance;\n  backendService!: GraphqlService;\n  columnDefinitions!: Column[];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  metrics!: Partial<Metrics>;\n  tagDataClass = '';\n  graphqlQuery = '...';\n  hideSubTitle = false;\n  processing = false;\n  selectedLanguage: string;\n  status = { text: 'processing...', class: 'alert alert-danger' };\n  serverWaitDelay = FAKE_SERVER_DELAY; // server simulation with default of 250ms but 50ms for Cypress tests\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient)), private readonly i18n: I18N = resolve(I18N)) {\n    this.backendService = new GraphqlService();\n    // always start with English for Cypress E2E tests to be consistent\n    const defaultLang = 'en';\n    this.i18n.setLocale(defaultLang);\n    this.selectedLanguage = defaultLang;\n    this.initializeGrid();\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  initializeGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'name', field: 'name', nameKey: 'NAME', width: 60,\n        type: FieldType.string,\n        sortable: true,\n        filterable: true,\n        filter: {\n          model: Filters.compoundInput,\n        }\n      },\n      {\n        id: 'gender', field: 'gender', nameKey: 'GENDER', filterable: true, sortable: true, width: 60,\n        filter: {\n          model: Filters.singleSelect,\n          collection: [{ value: '', label: '' }, { value: 'male', labelKey: 'MALE', }, { value: 'female', labelKey: 'FEMALE', }]\n        }\n      },\n      {\n        id: 'company', field: 'company', nameKey: 'COMPANY', width: 60,\n        sortable: true,\n        filterable: true,\n        filter: {\n          model: Filters.multipleSelect,\n          customStructure: {\n            label: 'company',\n            value: 'company'\n          },\n          collectionSortBy: {\n            property: 'company',\n            sortDesc: false\n          },\n          collectionAsync: this.http.fetch(SAMPLE_DATA_URL).then(e => e.json()),\n          filterOptions: {\n            filter: true // adds a filter on top of the multi-select dropdown\n          } as MultipleSelectOption\n        }\n      },\n    ];\n\n    this.gridOptions = {\n      enableAutoResize: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableAutoTooltip: true,\n      autoTooltipOptions: {\n        enableForHeaderCells: true\n      },\n      enableTranslate: true,\n      i18n: this.i18n,\n      enableFiltering: true,\n      enableCellNavigation: true,\n      multiColumnSort: false,\n      gridMenu: {\n        resizeOnShowHeaderRow: true,\n      },\n      backendServiceApi: {\n        // we need to disable default internalPostProcess so that we deal with either replacing full dataset or appending to it\n        disableInternalPostProcess: true,\n        service: this.backendService,\n        options: {\n          datasetName: GRAPHQL_QUERY_DATASET_NAME, // the only REQUIRED property\n          addLocaleIntoQuery: true,   // optionally add current locale into the query\n          extraQueryArguments: [{     // optionally add some extra query arguments as input query arguments\n            field: 'userId',\n            value: 123\n          }],\n          // enable infinite via Boolean OR via { fetchSize: number }\n          infiniteScroll: { fetchSize: 30 }, // or use true, in that case it would use default size of 25\n        },\n        // you can define the onInit callback OR enable the \"executeProcessCommandOnInit\" flag in the service init\n        // onInit: (query) => this.getCustomerApiCall(query),\n        preProcess: () => this.displaySpinner(true),\n        process: (query) => this.getCustomerApiCall(query),\n        postProcess: (result: GraphqlPaginatedResult) => {\n          this.metrics = {\n            endTime: new Date(),\n            totalItemCount: result.data[GRAPHQL_QUERY_DATASET_NAME].totalCount || 0,\n          }\n          this.displaySpinner(false);\n          this.getCustomerCallback(result);\n        }\n      } as GraphqlServiceApi\n    };\n  }\n\n  clearAllFiltersAndSorts() {\n    if (this.aureliaGrid?.gridService) {\n      this.aureliaGrid.gridService.clearAllFiltersAndSorts();\n    }\n  }\n\n  displaySpinner(isProcessing: boolean) {\n    this.processing = isProcessing;\n    this.status = (isProcessing)\n      ? { text: 'processing...', class: 'alert alert-danger' }\n      : { text: 'finished', class: 'alert alert-success' };\n  }\n\n  getCustomerCallback(result: any) {\n    const { nodes, totalCount } = result.data[GRAPHQL_QUERY_DATASET_NAME];\n    if (this.aureliaGrid) {\n      this.metrics.totalItemCount = totalCount;\n\n      // even if we're not showing pagination, it is still used behind the scene to fetch next set of data (next page basically)\n      // once pagination totalItems is filled, we can update the dataset\n\n      // infinite scroll has an extra data property to determine if we hit an infinite scroll and there's still more data (in that case we need append data)\n      // or if we're on first data fetching (no scroll bottom ever occured yet)\n      if (!result.infiniteScrollBottomHit) {\n        // initial load not scroll hit yet, full dataset assignment\n        this.aureliaGrid.slickGrid?.scrollTo(0); // scroll back to top to avoid unwanted onScroll end triggered\n        this.dataset = nodes;\n        this.metrics.itemCount = nodes.length;\n      } else {\n        // scroll hit, for better perf we can simply use the DataView directly for better perf (which is better compare to replacing the entire dataset)\n        this.aureliaGrid.dataView?.addItems(nodes);\n      }\n\n      // NOTE: you can get currently loaded item count via the `onRowCountChanged`slick event, see `refreshMetrics()` below\n      // OR you could also calculate it yourself or get it via: `this.aureliaGrid?.dataView.getItemCount() === totalItemCount`\n      // console.log('is data fully loaded: ', this.aureliaGrid?.dataView?.getItemCount() === totalItemCount);\n    }\n  }\n\n  /**\n   * Calling your GraphQL backend server should always return a Promise of type GraphqlPaginatedResult\n   *\n   * @param query\n   * @return Promise<GraphqlPaginatedResult>\n   */\n  getCustomerApiCall(query: string): Promise<GraphqlPaginatedResult> {\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\n    // for the demo purpose, we will call a mock WebAPI function\n    return this.getCustomerDataApiMock(query);\n  }\n\n  getCustomerDataApiMock(query: string): Promise<any> {\n    return new Promise<GraphqlPaginatedResult>(resolve => {\n      let firstCount = 0;\n      let offset = 0;\n      let orderByField = '';\n      let orderByDir = '';\n\n      this.http.fetch(SAMPLE_DATA_URL)\n        .then(e => e.json())\n        .then((data: any) => {\n          let filteredData: Array<{ id: number; name: string; gender: string; company: string; category: { id: number; name: string; }; }> = data;\n          if (query.includes('first:')) {\n            const topMatch = query.match(/first:([0-9]+),/) || [];\n            firstCount = +topMatch[1];\n          }\n          if (query.includes('offset:')) {\n            const offsetMatch = query.match(/offset:([0-9]+),/) || [];\n            offset = +offsetMatch[1];\n          }\n          if (query.includes('orderBy:')) {\n            const [_, field, dir] = /orderBy:\\[{field:([a-zA-Z/]+),direction:(ASC|DESC)}\\]/gi.exec(query) || [];\n            orderByField = field || '';\n            orderByDir = dir || '';\n          }\n          if (query.includes('orderBy:')) {\n            const [_, field, dir] = /orderBy:\\[{field:([a-zA-Z/]+),direction:(ASC|DESC)}\\]/gi.exec(query) || [];\n            orderByField = field || '';\n            orderByDir = dir || '';\n          }\n          if (query.includes('filterBy:')) {\n            const regex = /{field:(\\w+),operator:(\\w+),value:([0-9a-z',\"\\s]*)}/gi;\n\n            // loop through all filters\n            let matches;\n            while ((matches = regex.exec(query)) !== null) {\n              const field = matches[1] || '';\n              const operator = matches[2] || '';\n              const value = matches[3] || '';\n\n              let [term1, term2] = value.split(',');\n\n              if (field && operator && value !== '') {\n                filteredData = filteredData.filter((dataContext: any) => {\n                  const dcVal = dataContext[field];\n                  // remove any double quotes & lowercase the terms\n                  term1 = unescapeAndLowerCase(term1);\n                  term2 = unescapeAndLowerCase(term2 || '');\n\n                  switch (operator) {\n                    case 'EQ': return dcVal.toLowerCase() === term1;\n                    case 'NE': return dcVal.toLowerCase() !== term1;\n                    case 'LE': return dcVal.toLowerCase() <= term1;\n                    case 'LT': return dcVal.toLowerCase() < term1;\n                    case 'GT': return dcVal.toLowerCase() > term1;\n                    case 'GE': return dcVal.toLowerCase() >= term1;\n                    case 'EndsWith': return dcVal.toLowerCase().endsWith(term1);\n                    case 'StartsWith': return dcVal.toLowerCase().startsWith(term1);\n                    case 'Starts+Ends': return dcVal.toLowerCase().startsWith(term1) && dcVal.toLowerCase().endsWith(term2);\n                    case 'Contains': return dcVal.toLowerCase().includes(term1);\n                    case 'Not_Contains': return !dcVal.toLowerCase().includes(term1);\n                    case 'IN':\n                      const terms = value.toLocaleLowerCase().split(',');\n                      for (const term of terms) {\n                        if (dcVal.toLocaleLowerCase() === unescapeAndLowerCase(term)) {\n                          return true;\n                        }\n                      }\n                      break;\n                  }\n                });\n              }\n            }\n          }\n\n          // make sure page skip is not out of boundaries, if so reset to first page & remove skip from query\n          let firstRow = offset;\n          if (firstRow > filteredData.length) {\n            query = query.replace(`offset:${firstRow}`, '');\n            firstRow = 0;\n          }\n\n          // sorting when defined\n          const selector = (obj: any) => orderByField ? obj[orderByField] : obj;\n          switch (orderByDir.toUpperCase()) {\n            case 'ASC':\n              filteredData = filteredData.sort((a, b) => selector(a).localeCompare(selector(b)));\n              break;\n            case 'DESC':\n              filteredData = filteredData.sort((a, b) => selector(b).localeCompare(selector(a)));\n              break;\n          }\n\n          // return data subset (page)\n          const updatedData = filteredData.slice(firstRow, firstRow + firstCount);\n\n          // in your case, you will call your WebAPI function (wich needs to return a Promise)\n          // for the demo purpose, we will call a mock WebAPI function\n          const mockedResult = {\n            // the dataset name is the only unknown property\n            // will be the same defined in your GraphQL Service init, in our case GRAPHQL_QUERY_DATASET_NAME\n            data: {\n              [GRAPHQL_QUERY_DATASET_NAME]: {\n                nodes: updatedData,\n                totalCount: filteredData.length,\n              },\n            },\n          };\n\n          window.setTimeout(() => {\n            this.graphqlQuery = this.gridOptions.backendServiceApi!.service.buildQuery();\n            resolve(mockedResult);\n          }, this.serverWaitDelay);\n        });\n    });\n  }\n\n  refreshMetrics(args: OnRowCountChangedEventArgs) {\n    if (args?.current >= 0) {\n      this.metrics.itemCount = this.aureliaGrid.dataView?.getFilteredItemCount() || 0;\n      this.tagDataClass = this.metrics.itemCount === this.metrics.totalItemCount\n        ? 'fully-loaded'\n        : 'partial-load';\n    }\n  }\n\n  async switchLanguage() {\n    const nextLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\n    await this.i18n.setLocale(nextLanguage);\n    this.selectedLanguage = nextLanguage;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example39_decorators","_init","GRAPHQL_QUERY_DATASET_NAME","FAKE_SERVER_DELAY","unescapeAndLowerCase","val","customElement","__au2ViewDef","Example39","http","resolve","newInstanceOf","IHttpClient","i18n","I18N","__publicField","GraphqlService","defaultLang","aureliaGrid","FieldType","Filters","SAMPLE_DATA_URL","query","result","_a","isProcessing","nodes","totalCount","_b","firstCount","offset","orderByField","orderByDir","e","data","filteredData","_","field","dir","regex","matches","operator","value","term1","term2","dataContext","dcVal","terms","term","firstRow","selector","obj","a","b","updatedData","mockedResult","args","nextLanguage","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"ge,CAAG,EAClBC,EAAY,CAAC,EAC1B,IAAIC,EACG,SAASC,EAASC,EAAW,CAC7BF,IACHA,EAAKG,EAAc,OAAO,CAAE,KAAAP,EAAM,SAAAC,EAAU,aAAAC,EAAc,UAAAC,EAAW,GAEvEG,EAAU,SAASF,CAAE,CACvB,umCCbAI,EAAAC,EAkBA,MAAMC,EAA6B,QAC7BC,GAAoB,IAE1B,SAASC,EAAqBC,EAAa,CAClC,OAAAA,EAAI,QAAQ,KAAE,EAAA,EAAA,QAAA,KAAsB,EAAE,EAAE,YAAY,CAC7D,CAACL,EAAA,CAAAM,EAAAC,CAAA,CAAA,EAEM,MAAMC,CAAU,CAerB,YAAqBC,EAAoBC,EAAQC,EAAcC,CAAW,CAAC,EAAoBC,EAAaH,EAAQI,CAAI,EAAG,CAAtG,KAAA,KAAAL,EAA0E,KAAA,KAAAI,EAd/FE,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,gBAAA,EACAA,EAAA,KAAA,mBAAA,EACAA,EAAA,KAAA,aAAA,EACAA,EAAA,KAAA,UAAiB,EAAC,EAClBA,EAAA,KAAA,SAAA,EACeA,EAAA,KAAA,eAAA,EAAA,EACAA,EAAA,KAAA,eAAA,KAAA,EACAA,EAAA,KAAA,eAAA,EAAA,EACFA,EAAA,KAAA,aAAA,EAAA,EACbA,EAAA,KAAA,kBAAA,EACAA,EAAA,KAAA,SAAS,CAAE,KAAM,gBAAiB,MAAO,qBAAqB,EAC5CA,EAAA,KAAA,kBAAAZ,EAAA,EAGX,KAAA,eAAiB,IAAIa,EAE1B,MAAMC,EAAc,KACf,KAAA,KAAK,UAAUA,CAAW,EAC/B,KAAK,iBAAmBA,EACxB,KAAK,eAAe,CAAA,CAGtB,iBAAiBC,EAAkC,CACjD,KAAK,YAAcA,CAAA,CAGrB,gBAAiB,CACf,KAAK,kBAAoB,CACvB,CACE,GAAI,OAAQ,MAAO,OAAQ,QAAS,OAAQ,MAAO,GACnD,KAAMC,EAAU,OAChB,SAAU,GACV,WAAY,GACZ,OAAQ,CACN,MAAOC,EAAQ,aAAA,CAEnB,EACA,CACE,GAAI,SAAU,MAAO,SAAU,QAAS,SAAU,WAAY,GAAM,SAAU,GAAM,MAAO,GAC3F,OAAQ,CACN,MAAOA,EAAQ,aACf,WAAY,CAAC,CAAE,MAAO,GAAI,MAAO,IAAM,CAAE,MAAO,OAAQ,SAAU,QAAW,CAAE,MAAO,SAAU,SAAU,QAAW,CAAA,CAAA,CAEzH,EACA,CACE,GAAI,UAAW,MAAO,UAAW,QAAS,UAAW,MAAO,GAC5D,SAAU,GACV,WAAY,GACZ,OAAQ,CACN,MAAOA,EAAQ,eACf,gBAAiB,CACf,MAAO,UACP,MAAO,SACT,EACA,iBAAkB,CAChB,SAAU,UACV,SAAU,EACZ,EACA,gBAAiB,KAAK,KAAK,MAAMC,CAAe,EAAE,KAAK,GAAK,EAAE,MAAM,EACpE,cAAe,CACb,OAAQ,EAAA,CACV,CACF,CAEJ,EAEA,KAAK,YAAc,CACjB,iBAAkB,GAClB,WAAY,CACV,UAAW,kBACX,aAAc,EAChB,EACA,kBAAmB,GACnB,mBAAoB,CAClB,qBAAsB,EACxB,EACA,gBAAiB,GACjB,KAAM,KAAK,KACX,gBAAiB,GACjB,qBAAsB,GACtB,gBAAiB,GACjB,SAAU,CACR,sBAAuB,EACzB,EACA,kBAAmB,CAEjB,2BAA4B,GAC5B,QAAS,KAAK,eACd,QAAS,CACP,YAAanB,EACb,mBAAoB,GACpB,oBAAqB,CAAC,CACpB,MAAO,SACP,MAAO,GAAA,CACR,EAED,eAAgB,CAAE,UAAW,EAAG,CAClC,EAGA,WAAY,IAAM,KAAK,eAAe,EAAI,EAC1C,QAAUoB,GAAU,KAAK,mBAAmBA,CAAK,EACjD,YAAcC,GAAmC,CAC/C,KAAK,QAAU,CACb,YAAa,KACb,eAAgBA,EAAO,KAAKrB,CAA0B,EAAE,YAAc,CACxE,EACA,KAAK,eAAe,EAAK,EACzB,KAAK,oBAAoBqB,CAAM,CAAA,CACjC,CAEJ,CAAA,CAGF,yBAA0B,QACpBC,EAAA,KAAK,cAAL,MAAAA,EAAkB,aACf,KAAA,YAAY,YAAY,wBAAwB,CACvD,CAGF,eAAeC,EAAuB,CACpC,KAAK,WAAaA,EAClB,KAAK,OAAUA,EACX,CAAE,KAAM,gBAAiB,MAAO,oBAAqB,EACrD,CAAE,KAAM,WAAY,MAAO,qBAAsB,CAAA,CAGvD,oBAAoBF,EAAa,SAC/B,KAAM,CAAE,MAAAG,EAAO,WAAAC,CAAA,EAAeJ,EAAO,KAAKrB,CAA0B,EAChE,KAAK,cACP,KAAK,QAAQ,eAAiByB,EAOzBJ,EAAO,yBAOLK,EAAA,KAAA,YAAY,WAAZ,MAAAA,EAAsB,SAASF,KAL/BF,EAAA,KAAA,YAAY,YAAZ,MAAAA,EAAuB,SAAS,GACrC,KAAK,QAAUE,EACV,KAAA,QAAQ,UAAYA,EAAM,QASnC,CASF,mBAAmBJ,EAAgD,CAG1D,OAAA,KAAK,uBAAuBA,CAAK,CAAA,CAG1C,uBAAuBA,EAA6B,CAC3C,OAAA,IAAI,QAAgCZ,GAAW,CACpD,IAAImB,EAAa,EACbC,EAAS,EACTC,EAAe,GACfC,EAAa,GAEjB,KAAK,KAAK,MAAMX,CAAe,EAC5B,KAAKY,GAAKA,EAAE,KAAM,CAAA,EAClB,KAAMC,GAAc,CACnB,IAAIC,EAA+HD,EAS/H,GARAZ,EAAM,SAAS,QAAQ,IAEZO,EAAA,EADIP,EAAM,MAAM,iBAAiB,GAAK,CAAC,GAC7B,CAAC,GAEtBA,EAAM,SAAS,SAAS,IAEjBQ,EAAA,EADWR,EAAM,MAAM,kBAAkB,GAAK,CAAC,GAClC,CAAC,GAErBA,EAAM,SAAS,UAAU,EAAG,CACxB,KAAA,CAACc,EAAGC,EAAOC,CAAG,EAAI,0DAA0D,KAAKhB,CAAK,GAAK,CAAC,EAClGS,EAAeM,GAAS,GACxBL,EAAaM,GAAO,EAAA,CAElB,GAAAhB,EAAM,SAAS,UAAU,EAAG,CACxB,KAAA,CAACc,EAAGC,EAAOC,CAAG,EAAI,0DAA0D,KAAKhB,CAAK,GAAK,CAAC,EAClGS,EAAeM,GAAS,GACxBL,EAAaM,GAAO,EAAA,CAElB,GAAAhB,EAAM,SAAS,WAAW,EAAG,CAC/B,MAAMiB,EAAQ,wDAGV,IAAAC,EACJ,MAAQA,EAAUD,EAAM,KAAKjB,CAAK,KAAO,MAAM,CACvC,MAAAe,EAAQG,EAAQ,CAAC,GAAK,GACtBC,EAAWD,EAAQ,CAAC,GAAK,GACzBE,EAAQF,EAAQ,CAAC,GAAK,GAE5B,GAAI,CAACG,EAAOC,CAAK,EAAIF,EAAM,MAAM,GAAG,EAEhCL,GAASI,GAAYC,IAAU,KAClBP,EAAAA,EAAa,OAAQU,GAAqB,CACjD,MAAAC,EAAQD,EAAYR,CAAK,EAK/B,OAHAM,EAAQvC,EAAqBuC,CAAK,EAC1BC,EAAAxC,EAAqBwC,GAAS,EAAE,EAEhCH,EAAU,CAChB,IAAK,KAAa,OAAAK,EAAM,gBAAkBH,EAC1C,IAAK,KAAa,OAAAG,EAAM,gBAAkBH,EAC1C,IAAK,KAAa,OAAAG,EAAM,eAAiBH,EACzC,IAAK,KAAa,OAAAG,EAAM,cAAgBH,EACxC,IAAK,KAAa,OAAAG,EAAM,cAAgBH,EACxC,IAAK,KAAa,OAAAG,EAAM,eAAiBH,EACzC,IAAK,WAAY,OAAOG,EAAM,cAAc,SAASH,CAAK,EAC1D,IAAK,aAAc,OAAOG,EAAM,cAAc,WAAWH,CAAK,EAC9D,IAAK,cAAsB,OAAAG,EAAM,YAAY,EAAE,WAAWH,CAAK,GAAKG,EAAM,YAAA,EAAc,SAASF,CAAK,EACtG,IAAK,WAAY,OAAOE,EAAM,cAAc,SAASH,CAAK,EAC1D,IAAK,eAAgB,MAAO,CAACG,EAAM,cAAc,SAASH,CAAK,EAC/D,IAAK,KACH,MAAMI,EAAQL,EAAM,kBAAkB,EAAE,MAAM,GAAG,EACjD,UAAWM,KAAQD,EACjB,GAAID,EAAM,kBAAA,IAAwB1C,EAAqB4C,CAAI,EAClD,MAAA,GAGX,KAAA,CACJ,CACD,EACH,CACF,CAIF,IAAIC,EAAWnB,EACXmB,EAAWd,EAAa,SAC1Bb,EAAQA,EAAM,QAAQ,UAAoB2B,CAAA,GAAE,EAAE,EACnCA,EAAA,GAIb,MAAMC,EAAYC,GAAapB,EAAeoB,EAAIpB,CAAY,EAAIoB,EAC1D,OAAAnB,EAAW,YAAe,EAAA,CAChC,IAAK,MACHG,EAAeA,EAAa,KAAK,CAACiB,EAAGC,IAAMH,EAASE,CAAC,EAAE,cAAcF,EAASG,CAAC,CAAC,CAAC,EACjF,MACF,IAAK,OACHlB,EAAeA,EAAa,KAAK,CAACiB,EAAGC,IAAMH,EAASG,CAAC,EAAE,cAAcH,EAASE,CAAC,CAAC,CAAC,EACjF,KAAA,CAIJ,MAAME,EAAcnB,EAAa,MAAMc,EAAUA,EAAWpB,CAAU,EAIhE0B,EAAe,CAGnB,KAAM,CACJ,CAACrD,CAA0B,EAAG,CAC5B,MAAOoD,EACP,WAAYnB,EAAa,MAAA,CAC3B,CAEJ,EAEA,OAAO,WAAW,IAAM,CACtB,KAAK,aAAe,KAAK,YAAY,kBAAmB,QAAQ,WAAW,EAC3EzB,EAAQ6C,CAAY,CAAA,EACnB,KAAK,eAAe,CAAA,CACxB,CAAA,CACJ,CAAA,CAGH,eAAeC,EAAkC,QAC3CA,GAAA,YAAAA,EAAM,UAAW,IACnB,KAAK,QAAQ,YAAYhC,EAAA,KAAK,YAAY,WAAjB,YAAAA,EAA2B,yBAA0B,EAC9E,KAAK,aAAe,KAAK,QAAQ,YAAc,KAAK,QAAQ,eACxD,eACA,eACN,CAGF,MAAM,gBAAiB,CACrB,MAAMiC,EAAgB,KAAK,mBAAqB,KAAQ,KAAO,KACzD,MAAA,KAAK,KAAK,UAAUA,CAAY,EACtC,KAAK,iBAAmBA,CAAA,CAG1B,gBAAiB,OACV,KAAA,aAAe,CAAC,KAAK,aACpB,MAAAC,EAAS,KAAK,aAAe,MAAQ,UAC3ClC,EAAA,SAAS,cAAc,WAAW,IAAlC,MAAAA,EAAqC,UAAUkC,GAAQ,UAClD,KAAA,YAAY,eAAe,WAAW,CAAC,CAAA,CAEhD,CAhTOzD,EAAA0D,GAAA,EAAMnD,EAANoD,mBAFN5D,EAEYQ,CAAA,EAANqD,GAAM5D,EAAA,EAAAO,CAAA"}