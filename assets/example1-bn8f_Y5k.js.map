{"version":3,"file":"example1-bn8f_Y5k.js","sources":["../../src/examples/slickgrid/example1.$au.ts","../../src/examples/slickgrid/utilities.ts","../../src/examples/slickgrid/example1.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nexport const name = \"example1\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\" target=\\\"_blank\\\"\\n      href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example1.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"hideSubTitle = !hideSubTitle\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\" hidden.bind=\\\"hideSubTitle\\\"></div>\\n\\n<h3>\\n  <div class=\\\"column\\\">\\n    <span class=\\\"mr-3\\\">Grid 1</span>\\n    <button class=\\\"btn btn-outline-secondary btn-sm btn-icon\\\" click.trigger=\\\"toggleDarkModeGrid1()\\\" data-test=\\\"toggle-dark-mode\\\">\\n      <i class=\\\"mdi mdi-theme-light-dark\\\"></i>\\n      <span>Toggle Dark Mode</span>\\n    </button>\\n  </div>\\n</h3>\\n\\n<div class=\\\"grid-container1\\\">\\n  <aurelia-slickgrid grid-id=\\\"grid1-1\\\" column-definitions.bind=\\\"columnDefinitions1\\\" grid-options.bind=\\\"gridOptions1\\\"\\n    dataset.bind=\\\"dataset1\\\"\\n    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\\n<hr />\\n\\n<h3>Grid 2 <small>(with local Pagination)</small></h3>\\n<aurelia-slickgrid grid-id=\\\"grid1-2\\\"\\n  column-definitions.bind=\\\"columnDefinitions2\\\"\\n  grid-options.bind=\\\"gridOptions2\\\"\\n  dataset.bind=\\\"dataset2\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","export function zeroPadding(input: string | number) {\n  const number = parseInt(input as string, 10);\n  return number < 10 ? `0${number}` : number;\n}\n","import { type AureliaGridInstance, type Column, type GridOption, Formatters } from 'aurelia-slickgrid';\n\nimport { zeroPadding } from './utilities';\n\nconst NB_ITEMS = 995;\n\nexport class Example1 {\n  private _darkModeGrid1 = false;\n  title = 'Example 1: Basic Grids';\n  subTitle = `Simple Grids with Fixed Sizes (800 x 225)`;\n\n  aureliaGrid1!: AureliaGridInstance;\n  gridOptions1!: GridOption;\n  gridOptions2!: GridOption;\n  columnDefinitions1: Column[] = [];\n  columnDefinitions2: Column[] = [];\n  dataset1: any[] = [];\n  dataset2: any[] = [];\n  hideSubTitle = false;\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrids();\n  }\n\n  attached() {\n    // mock some data (different in each dataset)\n    this.dataset1 = this.mockData(NB_ITEMS);\n    this.dataset2 = this.mockData(NB_ITEMS);\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid1 = aureliaGrid;\n  }\n\n  isBrowserDarkModeEnabled() {\n    return window.matchMedia?.('(prefers-color-scheme: dark)').matches ?? false;\n  }\n\n  detaching() {\n    // also unsubscribe all Angular Subscriptions\n    document.querySelector('.panel-wm-content')!.classList.remove('dark-mode');\n    document.querySelector<HTMLDivElement>('#demo-container')!.dataset.bsTheme = 'light';\n  }\n\n  /* Define grid Options and Columns */\n  defineGrids() {\n    this.columnDefinitions1 = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, minWidth: 100 },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, minWidth: 100 },\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true, minWidth: 100 },\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso },\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso },\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', sortable: true, minWidth: 100 }\n    ];\n    this._darkModeGrid1 = this.isBrowserDarkModeEnabled();\n    this.gridOptions1 = {\n      darkMode: this._darkModeGrid1,\n      gridHeight: 225,\n      gridWidth: 800,\n      enableAutoResize: false,\n      enableSorting: true\n    };\n\n    // copy the same Grid Options and Column Definitions to 2nd grid\n    // but also add Pagination in this grid\n    this.columnDefinitions2 = this.columnDefinitions1;\n    this.gridOptions2 = {\n      ...this.gridOptions1,\n      ...{\n        darkMode: false,\n        enablePagination: true,\n        pagination: {\n          pageSizes: [5, 10, 20, 25, 50],\n          pageSize: 5\n        },\n      }\n    };\n  }\n\n  mockData(count: number) {\n    // mock a dataset\n    const mockDataset: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        start: `${zeroPadding(randomYear)}-${zeroPadding(randomMonth + 1)}-${zeroPadding(randomDay)}`,\n        finish: `${zeroPadding(randomYear + 1)}-${zeroPadding(randomMonth + 1)}-${zeroPadding(randomDay)}`,\n        effortDriven: (i % 5 === 0)\n      };\n    }\n\n    return mockDataset;\n  }\n\n  toggleDarkModeGrid1() {\n    this._darkModeGrid1 = !this._darkModeGrid1;\n    if (this._darkModeGrid1) {\n      document.querySelector('.grid-container1')?.classList.add('dark-mode');\n    } else {\n      document.querySelector('.grid-container1')?.classList.remove('dark-mode');\n    }\n    this.aureliaGrid1.slickGrid?.setOptions({ darkMode: this._darkModeGrid1 });\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","zeroPadding","input","number","_Example1_decorators","_init","NB_ITEMS","customElement","__au2ViewDef","Example1","__publicField","aureliaGrid","_a","Formatters","count","mockDataset","i","randomYear","randomMonth","randomDay","randomPercent","_b","_c","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}