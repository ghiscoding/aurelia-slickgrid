{"version":3,"file":"example7-BVE35PqP.js","sources":["../../src/examples/slickgrid/example7.$au.ts","../../src/examples/slickgrid/example7.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example7.scss\";\nexport const name = \"example7\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example7.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"hideSubTitle = !hideSubTitle\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\" hidden.bind=\\\"hideSubTitle\\\"></div>\\n\\n<h5>Grid 1</h5>\\n<aurelia-slickgrid\\n                    grid-id=\\\"grid7-1\\\"\\n                    column-definitions.bind=\\\"columnDefinitions1\\\"\\n                    grid-options.bind=\\\"gridOptions1\\\"\\n                    dataset.bind=\\\"dataset1\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGrid1Ready($event.detail)\\\">\\n</aurelia-slickgrid>\\n<br />\\n<h5>Grid 2 - <span class=\\\"subtitle\\\">with both Header Buttons & Menus</span></h5>\\n<aurelia-slickgrid\\n                    grid-id=\\\"grid7-2\\\"\\n                    column-definitions.bind=\\\"columnDefinitions2\\\"\\n                    grid-options.bind=\\\"gridOptions2\\\"\\n                    dataset.bind=\\\"dataset2\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGrid2Ready($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import type { AureliaGridInstance, Column, GridOption } from 'aurelia-slickgrid';\nimport './example7.scss';\n\nlet columns1WithHighlightingById: any = {};\nlet columns2WithHighlightingById: any = {};\n\nexport class Example7 {\n  title = 'Example 7: Header Button Plugin';\n  subTitle = `\n    This example demonstrates using the <b>Slick.Plugins.HeaderButtons</b> plugin to easily add buttons to colum headers.\n    These buttons can be specified directly in the column definition, and are very easy to configure and use.\n    (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/header-menu-header-buttons\" target=\"_blank\">Wiki docs</a>)\n    <ul>\n      <li>Resize the 1st column to see all icon/command</li>\n      <li>Mouse hover the 2nd column to see it's icon/command</li>\n      <li>For all the other columns, click on top-right red circle icon to enable highlight of negative numbers.</li>\n      <li>Use override callback functions to change the properties of show/hide, enable/disable the menu or certain item(s) from the list</li>\n      <ol>\n        <li>These callbacks are: \"itemVisibilityOverride\", \"itemUsabilityOverride\"</li>\n        <li>for example the \"Column E\" does not show the header button via \"itemVisibilityOverride\"</li>\n        <li>for example the \"Column J\" header button is displayed but it not usable via \"itemUsabilityOverride\"</li>\n      </ol>\n    </ul>\n  `;\n  columnDefinitions1: Column[] = [];\n  columnDefinitions2: Column[] = [];\n  gridOptions1!: GridOption;\n  gridOptions2!: GridOption;\n  dataset1: any[] = [];\n  dataset2: any[] = [];\n  aureliaGrid1!: AureliaGridInstance;\n  aureliaGrid2!: AureliaGridInstance;\n  hideSubTitle = false;\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n    columns1WithHighlightingById = {};\n    columns2WithHighlightingById = {};\n  }\n\n  attached() {\n    // populate the dataset once the grid is ready\n    this.dataset1 = this.loadData(200, 1);\n    this.dataset2 = this.loadData(200, 2);\n  }\n\n  aureliaGrid1Ready(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid1 = aureliaGrid;\n  }\n\n  aureliaGrid2Ready(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid2 = aureliaGrid;\n  }\n\n  defineGrid() {\n    this.columnDefinitions1 = [];\n    this.columnDefinitions2 = [];\n\n    this.gridOptions1 = {\n      enableAutoResize: true,\n      enableHeaderButton: true,\n      enableHeaderMenu: false,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableFiltering: false,\n      enableExcelCopyBuffer: true,\n      excelCopyBufferOptions: {\n        onCopyCells: (e, args) => console.log('onCopyCells', e, args),\n        onPasteCells: (e, args) => console.log('onPasteCells', e, args),\n        onCopyCancelled: (e, args) => console.log('onCopyCancelled', e, args),\n      },\n      enableCellNavigation: true,\n      gridHeight: 275,\n      headerButton: {\n        // you can use the \"onCommand\" (in Grid Options) and/or the \"action\" callback (in Column Definition)\n        onCommand: (_e: any, args) => this.handleOnCommand(_e, args, 1)\n      }\n    };\n\n    // grid 2 options, same as grid 1 + extras\n    this.gridOptions2 = {\n      ...this.gridOptions1,\n      enableHeaderMenu: true,\n      enableFiltering: true,\n      // frozenColumn: 2,\n      // frozenRow: 2,\n      headerButton: {\n        onCommand: (_e: any, args) => this.handleOnCommand(_e, args, 2)\n      }\n    };\n  }\n\n  handleOnCommand(_e: Event, args: any, gridNo: 1 | 2) {\n    const column = args.column;\n    const button = args.button;\n    const command = args.command;\n\n    if (command === 'toggle-highlight') {\n      if (button.cssClass === 'mdi mdi-lightbulb-on text-danger') {\n        if (gridNo === 1) {\n          delete columns1WithHighlightingById[column.id];\n        } else {\n          delete columns2WithHighlightingById[column.id];\n        }\n        button.cssClass = 'mdi mdi-lightbulb-outline text-warning faded';\n        button.tooltip = 'Highlight negative numbers.';\n      } else {\n        if (gridNo === 1) {\n          columns1WithHighlightingById[column.id] = true;\n        } else {\n          columns2WithHighlightingById[column.id] = true;\n        }\n        button.cssClass = 'mdi mdi-lightbulb-on text-danger';\n        button.tooltip = 'Remove highlight.';\n      }\n      this[`aureliaGrid${gridNo}`].slickGrid.invalidate();\n    }\n  }\n\n  loadData(count: number, gridNo: 1 | 2) {\n    const cols: Column[] = [];\n\n    // Set up some test columns.\n    for (let i = 0; i < 10; i++) {\n      cols.push({\n        id: i,\n        name: 'Column ' + String.fromCharCode('A'.charCodeAt(0) + i),\n        field: i + '',\n        width: i === 0 ? 70 : 100, // have the 2 first columns wider\n        filterable: true,\n        sortable: true,\n        formatter: (_row, _cell, value, columnDef) => {\n          if (gridNo === 1 && columns1WithHighlightingById[columnDef.id] && value < 0) {\n            return `<div style=\"color:red; font-weight:bold;\">${value}</div>`;\n          } else if (gridNo === 2 && columns2WithHighlightingById[columnDef.id] && value < 0) {\n            return `<div style=\"color:red; font-weight:bold;\">${value}</div>`;\n          }\n          return value;\n        },\n        header: {\n          buttons: [\n            {\n              cssClass: 'mdi mdi-lightbulb-outline text-warning faded',\n              command: 'toggle-highlight',\n              tooltip: 'Highlight negative numbers.',\n              itemVisibilityOverride: (args) => {\n                // for example don't show the header button on column \"E\"\n                return args.column.name !== 'Column E';\n              },\n              itemUsabilityOverride: (args) => {\n                // for example the button usable everywhere except on last column ='J\"\n                return args.column.name !== 'Column J';\n              },\n              action: (_e, args) => {\n                // you can use the \"action\" callback and/or subscribe to the \"onCallback\" event, they both have the same arguments\n                // do something\n                console.log(`execute a callback action to \"${args.command}\" on ${args.column.name}`);\n              }\n            }\n          ]\n        }\n      });\n    }\n\n    // Set multiple buttons on the first column to demonstrate overflow.\n    cols[0].name = 'Resize me!';\n    cols[0].header = {\n      buttons: [\n        {\n          cssClass: 'mdi mdi-message-text',\n          handler: () => {\n            alert('Tag');\n          }\n        },\n        {\n          cssClass: 'mdi mdi-forum-outline',\n          handler: () => {\n            alert('Comment');\n          }\n        },\n        {\n          cssClass: 'mdi mdi-information',\n          handler: () => {\n            alert('Info');\n          }\n        },\n        {\n          cssClass: 'mdi mdi-help-circle',\n          handler: () => {\n            alert('Help');\n          }\n        }\n      ]\n    };\n\n    // when floating to left, you might want to inverse the icon orders\n    if (gridNo === 2) {\n      cols[0].header?.buttons?.reverse();\n    }\n\n    // Set a button on the second column to demonstrate hover.\n    cols[1].name = 'Hover me!';\n    cols[1].header = {\n      buttons: [\n        {\n          cssClass: 'mdi mdi-help-circle',\n          showOnHover: true,\n          tooltip: 'This button only appears on hover.',\n          handler: () => {\n            alert('Help');\n          }\n        }\n      ]\n    };\n\n    // mock a dataset\n    const mockDataset: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const d: any = (mockDataset[i] = {});\n      d['id'] = i;\n      for (let j = 0; j < cols.length; j++) {\n        d[j] = Math.round(Math.random() * 10) - 5;\n      }\n    }\n\n    // assign column definitions only once\n    this[`columnDefinitions${gridNo}`] = cols;\n\n    return mockDataset;\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example7_decorators","_init","columns1WithHighlightingById","columns2WithHighlightingById","customElement","__au2ViewDef","Example7","__publicField","aureliaGrid","args","gridNo","column","button","count","cols","i","_row","_cell","value","columnDef","_b","_a","mockDataset","d","j","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}