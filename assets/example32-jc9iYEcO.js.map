{"version":3,"file":"example32-jc9iYEcO.js","sources":["../../src/examples/slickgrid/example32.$au.ts","../../src/examples/slickgrid/example32.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example32.scss\";\nexport const name = \"example32\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example32.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<h4 class=\\\"ml-3\\\">Container Width (950px)</h4>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"ml-2 mb-2 mr-2\\\">\\n    <div class=\\\"btn-group btn-group-toggle\\\" data-bs-toggle=\\\"buttons\\\">\\n      <label class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" class.bind=\\\"isUsingDefaultResize ? 'active' : ''\\\"\\n              data-test=\\\"autosize-columns-btn\\\">\\n        <input type=\\\"radio\\\" class=\\\"btn-check\\\" name=\\\"options\\\"\\n                checked.bind=\\\"isUsingDefaultResize\\\"\\n                click.trigger=\\\"handleDefaultResizeColumns()\\\">\\n        <i class=\\\"mdi mdi-arrow-expand\\\"></i> (default resize) by \\\"autosizeColumns\\\"\\n      </label>\\n      <label class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" class.bind=\\\"isUsingDefaultResize ? '' : 'active'\\\"\\n              data-test=\\\"resize-by-content-btn\\\">\\n        <input type=\\\"radio\\\" class=\\\"btn-check\\\" name=\\\"options\\\"\\n                checked.bind=\\\"!isUsingDefaultResize\\\"\\n                click.trigger=\\\"handleNewResizeColumns()\\\">\\n        <i class=\\\"mdi mdi-arrow-expand\\\"></i> Resize by Cell Content\\n      </label>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"mb-2\\\">\\n    <div class=\\\"btn-group btn-group-sm\\\" role=\\\"group\\\" aria-label=\\\"Basic Editing Commands\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" click.trigger=\\\"setSelectedRowIds()\\\"\\n              data-test=\\\"set-dynamic-rows-btn\\\"\\n              title=\\\"Change Row Selection across multiple pages\\\">\\n        <span>Change Row Selection</span>\\n      </button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"toggle-readonly-btn\\\"\\n              click.trigger=\\\"toggleGridEditReadonly()\\\">\\n        <i class=\\\"mdi mdi-table-edit\\\"></i> Toggle Readonly\\n      </button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"undo-last-edit-btn\\\"\\n              click.trigger=\\\"undoLastEdit()\\\">\\n        <i class=\\\"mdi mdi-undo\\\"></i> Undo Last Edit\\n      </button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-icon\\\" data-test=\\\"save-all-btn\\\"\\n              click.trigger=\\\"saveAll()\\\">\\n          <span>Save All</span>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\\n<div id=\\\"smaller-container\\\" style=\\\"width: 950px\\\">\\n  <aurelia-slickgrid grid-id=\\\"grid32\\\"\\n                      column-definitions.bind=\\\"columnDefinitions\\\"\\n                      grid-options.bind=\\\"gridOptions\\\"\\n                      dataset.bind=\\\"dataset\\\"\\n                      on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\"\\n                      on-selected-row-ids-changed.trigger=\\\"handleOnSelectedRowIdsChanged($event.detail.args)\\\">\\n  </aurelia-slickgrid>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\nimport { ExcelExportService } from '@slickgrid-universal/excel-export';\n\nimport {\n  type AureliaGridInstance,\n  type AutocompleterOption,\n  type Column,\n  type EditCommand,\n  Editors,\n  FieldType,\n  Filters,\n  formatNumber,\n  type Formatter,\n  Formatters,\n  type GridOption,\n  type LongTextEditorOption,\n  SlickGlobalEditorLock,\n  SortComparers,\n  type SearchTerm,\n  type VanillaCalendarOption,\n} from 'aurelia-slickgrid';\n\nimport './example32.scss'; // provide custom CSS/SASS styling\nimport COUNTRIES_COLLECTION_URL from './data/countries.json?url';\n\nconst NB_ITEMS = 400;\n\nconst customEditableInputFormatter: Formatter = (_row, _cell, value, columnDef, _dataContext, grid) => {\n  const gridOptions = grid.getOptions() as GridOption;\n  const isEditableLine = gridOptions.editable && columnDef.editor;\n  value = (value === null || value === undefined) ? '' : value;\n  return isEditableLine ? { text: value, addClasses: 'editable-field', toolTip: 'Click to Edit' } : value;\n};\n\n// you can create custom validator to pass to an inline editor\nconst myCustomTitleValidator = (value: any) => {\n  if (value === null || value === undefined || !value.length) {\n    // we will only check if the field is supplied when it's an inline editing\n    return { valid: false, msg: 'This is a required field.' };\n  } else if (!/^(task\\s\\d+)*$/i.test(value)) {\n    return { valid: false, msg: 'Your title is invalid, it must start with \"Task\" followed by a number.' };\n  }\n  return { valid: true, msg: '' };\n};\n\nexport class Example32 {\n  title = 'Example 32: Columns Resize by Content';\n  subTitle = `The grid below uses the optional resize by cell content (with a fixed 950px for demo purposes), you can click on the 2 buttons to see the difference. The \"autosizeColumns\" is really the default option used by SlickGrid-Universal, the resize by cell content is optional because it requires to read the first thousand rows and do extra width calculation.`;\n\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  editQueue: any[] = [];\n  editedItems: any = {};\n  hideSubTitle = false;\n  isUsingDefaultResize = false;\n  isGridEditable = true;\n  isMassSelectionDisabled = true;\n  complexityLevelList = [\n    { value: 0, label: 'Very Simple' },\n    { value: 1, label: 'Simple' },\n    { value: 2, label: 'Straightforward' },\n    { value: 3, label: 'Complex' },\n    { value: 4, label: 'Very Complex' },\n  ];\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient))) {\n    this.initializeGrid();\n  }\n\n  attached() {\n    // mock some data (different in each dataset)\n    this.dataset = this.loadData(NB_ITEMS);\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n  }\n\n  initializeGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, minWidth: 65,\n        // you can adjust the resize calculation via multiple options\n        resizeExtraWidthPadding: 4,\n        resizeCharWidthInPx: 7.6,\n        resizeCalcWidthRatio: 1, // default ratio is ~0.9 for string but since our text is all uppercase then a higher ratio is needed\n        resizeMaxWidthThreshold: 200,\n        columnGroup: 'Common Factor',\n        cssClass: 'text-uppercase fw-bold',\n        filterable: true,\n        filter: {\n          model: Filters.inputText,\n          // you can use your own custom filter predicate when built-in filters aren't working for you\n          // for example the example below will function similarly to an SQL LIKE to answer this SO: https://stackoverflow.com/questions/78471412/angular-slickgrid-filter\n          filterPredicate: (dataContext, searchFilterArgs) => {\n            const searchVals = (searchFilterArgs.parsedSearchTerms || []) as SearchTerm[];\n            if (searchVals?.length) {\n              const columnId = searchFilterArgs.columnId;\n              const searchVal = searchVals[0] as string;\n              const cellValue = dataContext[columnId].toLowerCase();\n              const results = searchVal.matchAll(/^%([^%\\r\\n]+)[^%\\r\\n]*$|(.*)%(.+)%(.*)|(.+)%(.+)|([^%\\r\\n]+)%$/gi);\n              const arrayOfMatches = Array.from(results);\n              const matches = arrayOfMatches.length ? arrayOfMatches[0] : [];\n              const [_, endW, containSW, contain, containEndW, comboSW, comboEW, startW] = matches;\n\n              if (endW) {\n                // example: \"%001\" ends with A\n                return cellValue.endsWith(endW.toLowerCase());\n              } else if (containSW && contain) {\n                // example: \"%Ti%001\", contains A + ends with B\n                return cellValue.startsWith(containSW.toLowerCase()) && cellValue.includes(contain.toLowerCase());\n              } else if (contain && containEndW) {\n                // example: \"%Ti%001\", contains A + ends with B\n                return cellValue.includes(contain) && cellValue.endsWith(containEndW.toLowerCase());\n              } else if (contain && !containEndW) {\n                // example: \"%Ti%\", contains A anywhere\n                return cellValue.includes(contain.toLowerCase());\n              } else if (comboSW && comboEW) {\n                // example: \"Ti%001\", combo starts with A + ends with B\n                return cellValue.startsWith(comboSW.toLowerCase()) && cellValue.endsWith(comboEW.toLowerCase());\n              } else if (startW) {\n                // example: \"Ti%\", starts with A\n                return cellValue.startsWith(startW.toLowerCase());\n              }\n              // anything else\n              return cellValue.includes(searchVal.toLowerCase());\n            }\n\n            // if we fall here then the value is not filtered out\n            return true;\n          },\n        },\n        editor: {\n          model: Editors.longText, required: true, alwaysSaveOnEnterKey: true,\n          maxLength: 12,\n          editorOptions: {\n            cols: 45,\n            rows: 6,\n            buttonTexts: {\n              cancel: 'Close',\n              save: 'Done'\n            }\n          } as LongTextEditorOption,\n          validator: myCustomTitleValidator,\n        },\n      },\n      {\n        id: 'duration', name: 'Duration', field: 'duration', sortable: true, filterable: true, minWidth: 65,\n        type: FieldType.number, columnGroup: 'Common Factor',\n        formatter: (_row, _cell, value) => {\n          if (value === null || value === undefined || value === '') {\n            return '';\n          }\n          return value > 1 ? `${value} days` : `${value} day`;\n        },\n        editor: { model: Editors.float, decimal: 2, valueStep: 1, minValue: 0, maxValue: 10000, alwaysSaveOnEnterKey: true, required: true },\n      },\n      {\n        id: 'cost', name: 'Cost', field: 'cost', minWidth: 65,\n        sortable: true, filterable: true, type: FieldType.number, columnGroup: 'Analysis',\n        filter: { model: Filters.compoundInputNumber },\n        formatter: Formatters.dollar,\n      },\n      {\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete', minWidth: 100,\n        type: FieldType.number,\n        sortable: true, filterable: true, columnGroup: 'Analysis',\n        filter: { model: Filters.compoundSlider, operator: '>=' },\n        editor: {\n          model: Editors.slider,\n          minValue: 0, maxValue: 100,\n        },\n      },\n      {\n        id: 'complexity', name: 'Complexity', field: 'complexity',\n        resizeCalcWidthRatio: 0.9, // default calc ratio is 1 or ~0.9 for field type of string\n        sortable: true, filterable: true, columnGroup: 'Analysis',\n        formatter: (_row, _cell, value) => this.complexityLevelList[value]?.label,\n        exportCustomFormatter: (_row, _cell, value) => this.complexityLevelList[value]?.label,\n        filter: {\n          model: Filters.multipleSelect,\n          collection: this.complexityLevelList\n        },\n        editor: {\n          model: Editors.singleSelect,\n          collection: this.complexityLevelList,\n        },\n      },\n      {\n        id: 'start', name: 'Start', field: 'start', sortable: true,\n        formatter: Formatters.dateUs, columnGroup: 'Period',\n        exportCustomFormatter: Formatters.dateUs,\n        type: FieldType.date, outputType: FieldType.dateUs, saveOutputType: FieldType.dateUtc,\n        filterable: true, filter: { model: Filters.compoundDate },\n        editor: { model: Editors.date, params: { hideClearButton: false } },\n      },\n      {\n        id: 'completed', name: 'Completed', field: 'completed', width: 80, minWidth: 75, maxWidth: 100,\n        cssClass: 'text-center', columnGroup: 'Period',\n        formatter: Formatters.checkmarkMaterial,\n        exportWithFormatter: false,\n        filterable: true, sortable: true,\n        filter: {\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n          model: Filters.singleSelect\n        },\n        editor: { model: Editors.checkbox, },\n        // editor: { model: Editors.singleSelect, collection: [{ value: true, label: 'Yes' }, { value: false, label: 'No' }], },\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish', sortable: true,\n        formatter: Formatters.dateUs, columnGroup: 'Period',\n        type: FieldType.date, outputType: FieldType.dateUs, saveOutputType: FieldType.dateUtc,\n        filterable: true, filter: { model: Filters.compoundDate },\n        exportCustomFormatter: Formatters.dateUs,\n        editor: {\n          model: Editors.date,\n          editorOptions: { range: { min: 'today' } } as VanillaCalendarOption,\n          validator: (value, args) => {\n            const dataContext = args && args.item;\n            if (dataContext && (dataContext.completed && !value)) {\n              return { valid: false, msg: 'You must provide a \"Finish\" date when \"Completed\" is checked.' };\n            }\n            return { valid: true, msg: '' };\n          }\n        },\n      },\n      {\n        id: 'product', name: 'Product', field: 'product',\n        filterable: true, columnGroup: 'Item',\n        minWidth: 100,\n        resizeCharWidthInPx: 8,\n        exportWithFormatter: true,\n        dataKey: 'id',\n        labelKey: 'itemName',\n        formatter: Formatters.complexObject,\n        exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\n        type: FieldType.object,\n        sortComparer: SortComparers.objectString,\n        editor: {\n          model: Editors.autocompleter,\n          alwaysSaveOnEnterKey: true,\n          massUpdate: true,\n\n          // example with a Remote API call\n          editorOptions: {\n            minLength: 1,\n            fetch: (searchTerm: string, callback: (items: false | any[]) => void) => {\n              // const items = require('c://TEMP/items.json');\n              const products = this.mockProducts();\n              callback(products.filter(product => product.itemName.toLowerCase().includes(searchTerm.toLowerCase())));\n            },\n            renderItem: {\n              // layout: 'twoRows',\n              // templateCallback: (item: any) => this.renderItemCallbackWith2Rows(item),\n\n              layout: 'fourCorners',\n              templateCallback: (item: any) => this.renderItemCallbackWith4Corners(item),\n            },\n          } as AutocompleterOption,\n        },\n        filter: {\n          model: Filters.inputText,\n          // placeholder: '🔎︎ search city',\n          type: FieldType.string,\n          queryField: 'product.itemName',\n        }\n      },\n      {\n        id: 'origin', name: 'Country of Origin', field: 'origin',\n        formatter: Formatters.complexObject, columnGroup: 'Item',\n        exportCustomFormatter: Formatters.complex, // without the Editing cell Formatter\n        dataKey: 'code',\n        labelKey: 'name',\n        type: FieldType.object,\n        sortComparer: SortComparers.objectString,\n        filterable: true,\n        sortable: true,\n        minWidth: 100,\n        editor: {\n          model: Editors.autocompleter,\n          massUpdate: true,\n          customStructure: { label: 'name', value: 'code' },\n          collectionAsync: this.http.fetch(COUNTRIES_COLLECTION_URL),\n        },\n        filter: {\n          model: Filters.inputText,\n          type: 'string',\n          queryField: 'origin.name',\n        }\n      },\n      {\n        id: 'action', name: 'Action', field: 'action', width: 70, minWidth: 70, maxWidth: 70,\n        excludeFromExport: true,\n        formatter: () => `<div class=\"button-style margin-auto\" style=\"width: 35px;\"><span class=\"mdi mdi-chevron-down text-primary\"></span></div>`,\n        cellMenu: {\n          hideCloseButton: false,\n          commandTitle: 'Commands',\n          commandItems: [\n            {\n              command: 'help',\n              title: 'Help!',\n              iconCssClass: 'mdi mdi-help-circle',\n              positionOrder: 66,\n              action: () => alert('Please Help!'),\n            },\n            'divider',\n            {\n              command: 'delete-row', title: 'Delete Row', positionOrder: 64,\n              iconCssClass: 'mdi mdi-close color-danger', cssClass: 'red', textCssClass: 'text-italic color-danger-light',\n              // only show command to 'Delete Row' when the task is not completed\n              itemVisibilityOverride: (args) => {\n                return !args.dataContext?.completed;\n              },\n              action: (_event, args) => {\n                const dataContext = args.dataContext;\n                const row = args?.row ?? 0;\n                if (confirm(`Do you really want to delete row (${row + 1}) with \"${dataContext.title}\"`)) {\n                  this.aureliaGrid.gridService.deleteItemById(dataContext.id);\n                }\n              }\n            },\n          ],\n        }\n      },\n    ];\n\n    this.gridOptions = {\n      editable: true,\n      autoAddCustomEditorFormatter: customEditableInputFormatter,\n      enableCellNavigation: true,\n      autoEdit: true,\n      autoCommitEdit: true,\n      autoResize: {\n        container: '#smaller-container',\n        rightPadding: 10\n      },\n      gridWidth: '100%',\n      enableAutoResize: true,\n      enablePagination: true,\n      pagination: {\n        pageSize: 10,\n        pageSizes: [10, 200, 500, 5000]\n      },\n\n      // resizing by cell content is opt-in\n      // we first need to disable the 2 default flags to autoFit/autosize\n      autoFitColumnsOnFirstLoad: false,\n      enableAutoSizeColumns: false,\n      // then enable resize by content with these 2 flags\n      autosizeColumnsByCellContentOnFirstLoad: true,\n      enableAutoResizeColumnsByCellContent: true,\n\n      // optional resize calculation options\n      resizeByContentOptions: {\n        defaultRatioForStringType: 0.92,\n        formatterPaddingWidthInPx: 8, // optional editor formatter padding for resize calculation\n      },\n\n      enableExcelExport: true,\n      excelExportOptions: {\n        exportWithFormatter: false\n      },\n      externalResources: [new ExcelExportService()],\n      enableFiltering: true,\n      enableRowSelection: true,\n      enableCheckboxSelector: true,\n      checkboxSelector: {\n        hideInFilterHeaderRow: false,\n        hideInColumnTitleRow: true,\n      },\n      rowSelectionOptions: {\n        // True (Single Selection), False (Multiple Selections)\n        selectActiveRow: false\n      },\n      createPreHeaderPanel: true,\n      showPreHeaderPanel: true,\n      preHeaderPanelHeight: 28,\n      rowHeight: 33,\n      headerRowHeight: 35,\n      editCommandHandler: (item: any, column, editCommand) => {\n        const prevSerializedValues = Array.isArray(editCommand.prevSerializedValue) ? editCommand.prevSerializedValue : [editCommand.prevSerializedValue];\n        const serializedValues = Array.isArray(editCommand.serializedValue) ? editCommand.serializedValue : [editCommand.serializedValue];\n        const editorColumns = this.columnDefinitions.filter((col) => col.editor !== undefined);\n\n        const modifiedColumns: Column[] = [];\n        prevSerializedValues.forEach((_val, index) => {\n          const prevSerializedValue = prevSerializedValues[index];\n          const serializedValue = serializedValues[index];\n\n          if (prevSerializedValue !== serializedValue) {\n            const finalColumn = Array.isArray(editCommand.prevSerializedValue) ? editorColumns[index] : column;\n            this.editedItems[this.gridOptions.datasetIdPropertyName || 'id'] = item; // keep items by their row indexes, if the row got edited twice then we'll keep only the last change\n            this.aureliaGrid.slickGrid.invalidate();\n            editCommand.execute();\n\n            this.renderUnsavedCellStyling(item, finalColumn, editCommand);\n            modifiedColumns.push(finalColumn);\n          }\n        });\n\n        // queued editor, so we'll push only 1 change at the end but with all columns modified\n        // this way we can undo the entire row change (for example if user changes 3 field in the editor modal, then doing a undo last change will undo all 3 in 1 shot)\n        this.editQueue.push({ item, columns: modifiedColumns, editCommand });\n      },\n      // when using the cellMenu, you can change some of the default options and all use some of the callback methods\n      enableCellMenu: true,\n    };\n  }\n\n  loadData(count: number) {\n    // mock data\n    const tmpArray: any[] = [];\n    for (let i = 0; i < count; i++) {\n      const randomItemId = Math.floor(Math.random() * this.mockProducts().length);\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomFinishYear = (new Date().getFullYear()) + Math.floor(Math.random() * 10); // use only years not lower than 3 years ago\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomTime = Math.floor((Math.random() * 59));\n      const randomFinish = new Date(randomFinishYear, (randomMonth + 1), randomDay, randomTime, randomTime, randomTime);\n      const randomPercentComplete = Math.floor(Math.random() * 100) + 15; // make it over 15 for E2E testing purposes\n      const percentCompletion = randomPercentComplete > 100 ? (i > 5 ? 100 : 88) : randomPercentComplete; // don't use 100 unless it's over index 5, for E2E testing purposes\n      const isCompleted = percentCompletion === 100;\n\n      tmpArray[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.floor(Math.random() * 100) + 10,\n        percentComplete: percentCompletion,\n        analysis: {\n          percentComplete: percentCompletion,\n        },\n        complexity: i % 3 ? 0 : 2,\n        start: new Date(randomYear, randomMonth, randomDay, randomDay, randomTime, randomTime, randomTime),\n        finish: (isCompleted || (i % 3 === 0 && (randomFinish > new Date() && i > 3)) ? (isCompleted ? new Date() : randomFinish) : ''), // make sure the random date is earlier than today and it's index is bigger than 3\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\n        completed: (isCompleted || (i % 3 === 0 && (randomFinish > new Date() && i > 3))),\n        product: { id: this.mockProducts()[randomItemId]?.id, itemName: this.mockProducts()[randomItemId]?.itemName, },\n        origin: (i % 2) ? { code: 'CA', name: 'Canada' } : { code: 'US', name: 'United States' },\n      };\n\n      if (!(i % 8)) {\n        delete tmpArray[i].finish; // also test with undefined properties\n        delete tmpArray[i].percentComplete; // also test with undefined properties\n      }\n    }\n    return tmpArray;\n  }\n\n  handleDefaultResizeColumns() {\n    // just for demo purposes, set it back to its original width\n    const columns = this.aureliaGrid.slickGrid.getColumns() as Column[];\n    columns.forEach(col => col.width = col.originalWidth);\n    this.aureliaGrid.slickGrid.setColumns(columns);\n    this.aureliaGrid.slickGrid.autosizeColumns();\n    this.isUsingDefaultResize = true;\n  }\n\n  handleNewResizeColumns() {\n    this.aureliaGrid.resizerService.resizeColumnsByCellContent(true);\n    this.isUsingDefaultResize = false;\n  }\n\n  handleOnSelectedRowIdsChanged(args: any) {\n    console.log('Selected Ids:', args.selectedRowIds);\n  }\n\n  toggleGridEditReadonly() {\n    // first need undo all edits\n    this.undoAllEdits();\n\n    // then change a single grid options to make the grid non-editable (readonly)\n    this.isGridEditable = !this.isGridEditable;\n    if (!this.isGridEditable) {\n      this.isMassSelectionDisabled = true;\n    }\n    // dynamically change SlickGrid editable grid option\n    this.aureliaGrid.slickGrid.setOptions({ editable: this.isGridEditable });\n  }\n\n  removeUnsavedStylingFromCell(_item: any, column: Column, row: number) {\n    // remove unsaved css class from that cell\n    this.aureliaGrid.slickGrid.removeCellCssStyles(`unsaved_highlight_${[column.id]}${row}`);\n  }\n\n  removeAllUnsavedStylingFromCell() {\n    for (const lastEdit of this.editQueue) {\n      const lastEditCommand = lastEdit?.editCommand;\n      if (lastEditCommand) {\n        // remove unsaved css class from that cell\n        for (const lastEditColumn of lastEdit.columns) {\n          this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\n        }\n      }\n    }\n  }\n\n  renderUnsavedStylingOnAllVisibleCells() {\n    for (const lastEdit of this.editQueue) {\n      if (lastEdit) {\n        const { item, columns, editCommand } = lastEdit;\n        if (Array.isArray(columns)) {\n          columns.forEach((col) => {\n            this.renderUnsavedCellStyling(item, col, editCommand);\n          });\n        }\n      }\n    }\n  }\n\n  renderUnsavedCellStyling(item: any, column: Column, editCommand: EditCommand) {\n    if (editCommand && item && column) {\n      const row = this.aureliaGrid.dataView.getRowByItem(item) as number;\n      if (row >= 0) {\n        const hash = { [row]: { [column.id]: 'unsaved-editable-field' } };\n        this.aureliaGrid.slickGrid.setCellCssStyles(`unsaved_highlight_${[column.id]}${row}`, hash);\n      }\n    }\n  }\n\n  // change row selection dynamically and apply it to the DataView and the Grid UI\n  setSelectedRowIds() {\n    // change row selection even across multiple pages via DataView\n    this.aureliaGrid.dataView?.setSelectedIds([3, 4, 11]);\n\n    // you can also provide optional options (all defaults to true)\n    // this.sgb.dataView?.setSelectedIds([4, 5, 8, 10], {\n    //   isRowBeingAdded: true,\n    //   shouldTriggerEvent: true,\n    //   applyGridRowSelection: true\n    // });\n  }\n\n  saveAll() {\n    // Edit Queue (array increases every time a cell is changed, regardless of item object)\n    console.log(this.editQueue);\n\n    // Edit Items only keeps the merged data (an object with row index as the row properties)\n    // if you change 2 different cells on 2 different cells then this editedItems will only contain 1 property\n    // example: editedItems = { 0: { title: task 0, duration: 50, ... }}\n    // ...means that row index 0 got changed and the final merged object is { title: task 0, duration: 50, ... }\n    console.log(this.editedItems);\n    // console.log(`We changed ${Object.keys(this.editedItems).length} rows`);\n\n    // since we saved, we can now remove all the unsaved color styling and reset our array/object\n    this.removeAllUnsavedStylingFromCell();\n    this.editQueue = [];\n    this.editedItems = {};\n  }\n\n  undoLastEdit(showLastEditor = false) {\n    const lastEdit = this.editQueue.pop();\n    const lastEditCommand = lastEdit?.editCommand;\n    if (lastEdit && lastEditCommand && SlickGlobalEditorLock.cancelCurrentEdit()) {\n      lastEditCommand.undo();\n\n      // remove unsaved css class from that cell\n      for (const lastEditColumn of lastEdit.columns) {\n        this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\n      }\n      this.aureliaGrid.slickGrid.invalidate();\n\n\n      // optionally open the last cell editor associated\n      if (showLastEditor) {\n        this.aureliaGrid?.slickGrid.gotoCell(lastEditCommand.row, lastEditCommand.cell, false);\n      }\n    }\n  }\n\n  undoAllEdits() {\n    for (const lastEdit of this.editQueue) {\n      const lastEditCommand = lastEdit?.editCommand;\n      if (lastEditCommand && SlickGlobalEditorLock.cancelCurrentEdit()) {\n        lastEditCommand.undo();\n\n        // remove unsaved css class from that cell\n        for (const lastEditColumn of lastEdit.columns) {\n          this.removeUnsavedStylingFromCell(lastEdit.item, lastEditColumn, lastEditCommand.row);\n        }\n      }\n    }\n    this.aureliaGrid.slickGrid.invalidate(); // re-render the grid only after every cells got rolled back\n    this.editQueue = [];\n  }\n\n  mockProducts() {\n    return [\n      {\n        id: 0,\n        itemName: 'Sleek Metal Computer',\n        itemNameTranslated: 'some fantastic sleek metal computer description',\n        listPrice: 2100.23,\n        itemTypeName: 'I',\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\n        icon: `mdi ${this.getRandomIcon(0)}`,\n      },\n      {\n        id: 1,\n        itemName: 'Tasty Granite Table',\n        itemNameTranslated: 'an extremely huge and heavy table',\n        listPrice: 3200.12,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\n        icon: `mdi ${this.getRandomIcon(1)}`,\n      },\n      {\n        id: 2,\n        itemName: 'Awesome Wooden Mouse',\n        itemNameTranslated: 'super old mouse',\n        listPrice: 15.00,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\n        icon: `mdi ${this.getRandomIcon(2)}`,\n      },\n      {\n        id: 3,\n        itemName: 'Gorgeous Fresh Shirt',\n        itemNameTranslated: 'what a gorgeous shirt seriously',\n        listPrice: 25.76,\n        itemTypeName: 'I',\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\n        icon: `mdi ${this.getRandomIcon(3)}`,\n      },\n      {\n        id: 4,\n        itemName: 'Refined Cotton Table',\n        itemNameTranslated: 'super light table that will fall apart amazingly fast',\n        listPrice: 13.35,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\n        icon: `mdi ${this.getRandomIcon(4)}`,\n      },\n      {\n        id: 5,\n        itemName: 'Intelligent Wooden Pizza',\n        itemNameTranslated: 'wood not included',\n        listPrice: 23.33,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\n        icon: `mdi ${this.getRandomIcon(5)}`,\n      },\n      {\n        id: 6,\n        itemName: 'Licensed Cotton Chips',\n        itemNameTranslated: 'not sure what that is',\n        listPrice: 71.21,\n        itemTypeName: 'I',\n        image: 'http://i.stack.imgur.com/pC1Tv.jpg',\n        icon: `mdi ${this.getRandomIcon(6)}`,\n      },\n      {\n        id: 7,\n        itemName: 'Ergonomic Rubber Soap',\n        itemNameTranslated: `so good you'll want to use it every night`,\n        listPrice: 2.43,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/Fnm7j6h.jpg',\n        icon: `mdi ${this.getRandomIcon(7)}`,\n      },\n      {\n        id: 8,\n        itemName: 'Handcrafted Steel Car',\n        itemNameTranslated: `aka tesla truck`,\n        listPrice: 31288.39,\n        itemTypeName: 'I',\n        image: 'https://i.imgur.com/RaVJuLr.jpg',\n        icon: `mdi ${this.getRandomIcon(8)}`,\n      },\n    ];\n  }\n\n  /** List of icons that are supported in this lib Material Design Icons */\n  getRandomIcon(iconIndex?: number) {\n    const icons = [\n      'mdi-arrow-collapse',\n      'mdi-arrow-expand',\n      'mdi-cancel',\n      'mdi-check',\n      'mdi-checkbox-blank-outline',\n      'mdi-check-box-outline',\n      'mdi-checkbox-marked',\n      'mdi-close',\n      'mdi-close-circle',\n      'mdi-close-circle-outline',\n      'mdi-close-thick',\n      'mdi-content-copy',\n      'mdi-database-refresh',\n      'mdi-download',\n      'mdi-file-document-outline',\n      'mdi-file-excel-outline',\n      'mdi-file-music-outline',\n      'mdi-file-pdf-outline',\n      'mdi-filter-remove-outline',\n      'mdi-flip-vertical',\n      'mdi-folder',\n      'mdi-folder-open',\n      'mdi-help-circle',\n      'mdi-help-circle-outline',\n      'mdi-history',\n      'mdi-information',\n      'mdi-information-outline',\n      'mdi-link',\n      'mdi-link-variant',\n      'mdi-menu',\n      'mdi-microsoft-excel',\n      'mdi-minus',\n      'mdi-page-first',\n      'mdi-page-last',\n      'mdi-paperclip',\n      'mdi-pin-off-outline',\n      'mdi-pin-outline',\n      'mdi-playlist-plus',\n      'mdi-playlist-remove',\n      'mdi-plus',\n      'mdi-redo',\n      'mdi-refresh',\n      'mdi-shape-square-plus',\n      'mdi-sort-ascending',\n      'mdi-sort-descending',\n      'mdi-swap-horizontal',\n      'mdi-swap-vertical',\n      'mdi-sync',\n      'mdi-table-edit',\n      'mdi-table-refresh',\n      'mdi-undo',\n    ];\n    const randomNumber = Math.floor((Math.random() * icons.length - 1));\n    return icons[iconIndex ?? randomNumber];\n  }\n\n  renderItemCallbackWith2Rows(item: any): string {\n    return `<div class=\"autocomplete-container-list\">\n      <div class=\"autocomplete-left\">\n        <!--<img src=\"http://i.stack.imgur.com/pC1Tv.jpg\" width=\"50\" />-->\n        <span class=\"mdi ${item.icon}\"></span>\n      </div>\n      <div>\n        <span class=\"autocomplete-top-left\">\n          <span class=\"mdi ${item.itemTypeName === 'I' ? 'mdi-information-outline' : 'mdi-content-copy'}\"></span>\n          ${item.itemName}\n        </span>\n      <div>\n    </div>\n    <div>\n      <div class=\"autocomplete-bottom-left\">${item.itemNameTranslated}</div>\n    </div>`;\n  }\n\n  renderItemCallbackWith4Corners(item: any): string {\n    return `<div class=\"autocomplete-container-list\">\n          <div class=\"autocomplete-left\">\n            <!--<img src=\"http://i.stack.imgur.com/pC1Tv.jpg\" width=\"50\" />-->\n            <span class=\"mdi ${item.icon}\"></span>\n          </div>\n          <div>\n            <span class=\"autocomplete-top-left\">\n              <span class=\"mdi ${item.itemTypeName === 'I' ? 'mdi-information-outline' : 'mdi-content-copy'}\"></span>\n              ${item.itemName}\n            </span>\n            <span class=\"autocomplete-top-right\">${formatNumber(item.listPrice, 2, 2, false, '$')}</span>\n          <div>\n        </div>\n        <div>\n          <div class=\"autocomplete-bottom-left\">${item.itemNameTranslated}</div>\n          <span class=\"autocomplete-bottom-right\">Type: <b>${item.itemTypeName === 'I' ? 'Item' : item.itemTypeName === 'C' ? 'PdCat' : 'Cat'}</b></span>\n        </div>`;\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example32_decorators","_init","NB_ITEMS","customEditableInputFormatter","_row","_cell","value","columnDef","_dataContext","grid","isEditableLine","myCustomTitleValidator","customElement","__au2ViewDef","Example32","http","resolve","newInstanceOf","IHttpClient","__publicField","aureliaGrid","FieldType","Filters","dataContext","searchFilterArgs","searchVals","columnId","searchVal","cellValue","results","arrayOfMatches","matches","_","endW","containSW","contain","containEndW","comboSW","comboEW","startW","Editors","Formatters","_a","args","SortComparers","searchTerm","callback","products","product","item","COUNTRIES_COLLECTION_URL","_event","row","ExcelExportService","column","editCommand","prevSerializedValues","serializedValues","editorColumns","col","modifiedColumns","_val","index","prevSerializedValue","serializedValue","finalColumn","count","tmpArray","i","randomItemId","randomYear","randomFinishYear","randomMonth","randomDay","randomTime","randomFinish","randomPercentComplete","percentCompletion","isCompleted","_b","columns","_item","lastEdit","lastEditCommand","lastEditColumn","hash","showLastEditor","SlickGlobalEditorLock","iconIndex","icons","randomNumber","formatNumber","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}