{"version":3,"file":"example11-GDX8aTm3.js","sources":["../../src/examples/slickgrid/example11.$au.ts","../../src/examples/slickgrid/example11.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example11.scss\";\nexport const name = \"example11\";\nexport const template = \"<h2>\\n  ${title}\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example11.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" innerhtml.bind=\\\"subTitle\\\"></div>\\n\\n<div class=\\\"col-sm-12\\\">\\n  <span>\\n    <label>Scroll: </label>\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"...\\\">\\n      <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"scroll-top-btn\\\" click.trigger=\\\"scrollGridTop()\\\">\\n        <i class=\\\"mdi mdi-arrow-down mdi-rotate-180 icon\\\"></i>\\n      </button>\\n      <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"scroll-bottom-btn\\\"\\n              click.trigger=\\\"scrollGridBottom()\\\">\\n        <i class=\\\"mdi mdi-arrow-down icon\\\"></i>\\n      </button>\\n    </div>\\n    <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"add-new-item-top-btn\\\"\\n            click.trigger=\\\"addNewItem()\\\">Add New Mocked Item (top)</button>\\n    <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"add-new-item-bottom-btn\\\"\\n            click.trigger=\\\"addNewItem('bottom')\\\">Add New Mocked Item\\n      (bottom)</button>\\n    <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"update-second-item-btn\\\"\\n            click.trigger=\\\"updateSecondItem()\\\">\\n      Update 2nd Row Item with Random Duration\\n    </button>\\n    <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"highlight-row5-btn\\\"\\n            click.trigger=\\\"highlighFifthRow()\\\">Highlight 5th Row</button>\\n    <button class=\\\"btn btn-sm btn-outline-secondary btn-icon\\\" data-test=\\\"highlight-duration40-btn\\\"\\n            click.trigger=\\\"changeDurationBackgroundColor()\\\">\\n      Highlight Rows with Duration over 50\\n    </button>\\n  </span>\\n  <hr />\\n</div>\\n\\n<aurelia-slickgrid grid-id=\\\"grid11\\\"\\n                    column-definitions.bind=\\\"columnDefinitions\\\"\\n                    grid-options.bind=\\\"gridOptions\\\"\\n                    dataset.bind=\\\"dataset\\\"\\n                    on-aurelia-grid-created.trigger=\\\"aureliaGridReady($event.detail)\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import {\n  type AureliaGridInstance,\n  type Column,\n  Editors,\n  FieldType,\n  Formatters,\n  type GridOption,\n  type GridService,\n  type OnEventArgs,\n  type SlickDataView,\n  type SlickGrid,\n} from 'aurelia-slickgrid';\nimport './example11.scss';\n\nexport class Example11 {\n  title = 'Example 11: Add / Update / Highlight a Datagrid Item';\n  subTitle = `\n  Add / Update / Hightlight an Item from the Datagrid (<a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/add-update-highlight\" target=\"_blank\">Wiki docs</a>).\n  <ul>\n    <li><b>Note:</b> this demo is <b>only</b> on the datagrid (client) side, you still need to deal with the backend yourself</li>\n    <li>Adding an item, will always be showing as the 1st item in the grid because that is the best visual place to add it</li>\n    <li>Add/Update an item requires a valid Slickgrid Selection Model, you have 2 choices to deal with this:</li>\n    <ul><li>You can enable \"enableCheckboxSelector\" or \"enableRowSelection\" to True</li></ul>\n    <li>Click on any of the buttons below to test this out</li>\n    <li>You can change the highlighted color &amp; animation by changing the <a href=\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/aurelia-slickgrid/src/aurelia-slickgrid/styles/_variables.scss\" target=\"_blank\">SASS Variables</a></li>\n    <ul>\n      <li>\"$row-highlight-background-color\" or \"$row-highlight-fade-animation\"</li>\n    </ul>\n    <li>You can also add CSS class(es) on the fly (or on page load) on rows with certain criteria, (e.g. click on last button)<li>\n    <ul>\n      <li>Example, click on button \"Highlight Rows with Duration over 50\" to see row styling changing. <a href=\"https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/dynamic-item-metadata\" target=\"_blank\">Wiki doc</a></li>\n    </ul>\n  </ul>\n  `;\n\n  aureliaGrid!: AureliaGridInstance;\n  dataView!: SlickDataView;\n  grid!: SlickGrid;\n  gridService!: GridService;\n  columnDefinitions: Column[] = [];\n  gridOptions!: GridOption;\n  dataset: any[] = [];\n  hideSubTitle = false;\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n    this.mockData(1000);\n  }\n\n  aureliaGridReady(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid = aureliaGrid;\n    this.dataView = aureliaGrid.dataView;\n    this.grid = aureliaGrid.slickGrid;\n    this.gridService = aureliaGrid.gridService;\n    // if you want to change background color of Duration over 50 right after page load,\n    // you would put the code here, also make sure to re-render the grid for the styling to be applied right away\n    /*\n    this.dataView.getItemMetadata = this.updateItemMetadataForDurationOver50(this.dataView.getItemMetadata);\n    this.grid.invalidate();\n    this.grid.render();\n    */\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    this.columnDefinitions = [\n      {\n        id: 'delete',\n        field: 'id',\n        excludeFromHeaderMenu: true,\n        formatter: Formatters.icon,\n        params: { iconCssClass: 'mdi mdi-trash-can pointer' },\n        minWidth: 30,\n        maxWidth: 30,\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\n        onCellClick: (_e: Event, args: OnEventArgs) => {\n          console.log(args);\n          if (confirm('Are you sure?')) {\n            this.aureliaGrid.gridService.deleteItemById(args.dataContext.id);\n          }\n        }\n      },\n      {\n        id: 'title', name: 'Title', field: 'title',\n        sortable: true,\n        type: FieldType.string,\n        editor: {\n          model: Editors.longText\n        }\n      },\n      {\n        id: 'duration', name: 'Duration (days)', field: 'duration',\n        sortable: true,\n        type: FieldType.number,\n        editor: {\n          model: Editors.text\n        },\n        onCellChange: (_e: Event, args: OnEventArgs) => {\n          alert('onCellChange directly attached to the column definition');\n          console.log(args);\n        }\n      },\n      {\n        id: 'complete', name: '% Complete', field: 'percentComplete',\n        formatter: Formatters.percentCompleteBar,\n        type: FieldType.number,\n        editor: {\n          model: Editors.integer\n        }\n      },\n      {\n        id: 'start', name: 'Start', field: 'start',\n        formatter: Formatters.dateIso,\n        sortable: true,\n        type: FieldType.date,\n        /*\n        editor: {\n          model: Editors.date\n        }\n        */\n      },\n      {\n        id: 'finish', name: 'Finish', field: 'finish',\n        formatter: Formatters.dateIso, sortable: true,\n        type: FieldType.date\n      },\n      {\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\n        formatter: Formatters.checkmarkMaterial,\n        type: FieldType.number,\n        editor: {\n          model: Editors.checkbox\n        }\n      }\n    ];\n\n    this.gridOptions = {\n      asyncEditorLoading: false,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      editable: true,\n      enableColumnPicker: true,\n      enableCellNavigation: true,\n      enableRowSelection: true\n    };\n  }\n\n  mockData(itemCount: number) {\n    // mock a dataset\n    const mockedDataset: any[] = [];\n    for (let i = 0; i < itemCount; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      mockedDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        percentCompleteNumber: randomPercent,\n        start: new Date(randomYear, randomMonth, randomDay),\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = mockedDataset;\n  }\n\n  addNewItem(insertPosition?: 'top' | 'bottom') {\n    const newItem1 = this.createNewItem(1);\n    // const newItem2 = this.createNewItem(2);\n\n    // single insert\n    this.aureliaGrid.gridService.addItem(newItem1, { position: insertPosition });\n\n    // OR multiple inserts\n    // this.aureliaGrid.gridService.addItems([newItem1, newItem2], { position: insertPosition });\n  }\n\n  createNewItem(incrementIdByHowMany = 1) {\n    const dataset = this.aureliaGrid.dataView.getItems();\n    let highestId = 0;\n    dataset.forEach(item => {\n      if (item.id > highestId) {\n        highestId = item.id;\n      }\n    });\n    const newId = highestId + incrementIdByHowMany;\n    const randomYear = 2000 + Math.floor(Math.random() * 10);\n    const randomMonth = Math.floor(Math.random() * 11);\n    const randomDay = Math.floor((Math.random() * 29));\n    const randomPercent = Math.round(Math.random() * 100);\n\n    return {\n      id: newId,\n      title: 'Task ' + newId,\n      duration: Math.round(Math.random() * 100) + '',\n      percentComplete: randomPercent,\n      percentCompleteNumber: randomPercent,\n      start: new Date(randomYear, randomMonth, randomDay),\n      finish: new Date(randomYear, (randomMonth + 2), randomDay),\n      effortDriven: true\n    };\n  }\n\n  /** Change the Duration Rows Background Color */\n  changeDurationBackgroundColor() {\n    this.dataView.getItemMetadata = this.updateItemMetadataForDurationOver40(this.dataView.getItemMetadata);\n    // also re-render the grid for the styling to be applied right away\n    this.grid.invalidate();\n    this.grid.render();\n    // or use the Aurelia-SlickGrid GridService\n    // this.gridService.renderGrid();\n  }\n\n  /** Highlight the 5th row using the Aurelia-Slickgrid GridService */\n  highlighFifthRow() {\n    this.scrollGridTop();\n    this.aureliaGrid.gridService.highlightRow(4, 1500);\n  }\n\n  /**\n   * Change the SlickGrid Item Metadata, we will add a CSS class on all rows with a Duration over 40\n   * For more info, you can see this SO https://stackoverflow.com/a/19985148/1212166\n   */\n  updateItemMetadataForDurationOver40(previousItemMetadata: any) {\n    const newCssClass = 'duration-bg';\n    return (rowNumber: number) => {\n      const item = this.dataView.getItem(rowNumber);\n      let meta = {\n        cssClasses: ''\n      };\n      if (typeof previousItemMetadata === 'object') {\n        meta = previousItemMetadata(rowNumber);\n      }\n      if (meta && item && item.duration) {\n        const duration = +item.duration; // convert to number\n        if (duration > 40) {\n          meta.cssClasses = (meta.cssClasses || '') + ' ' + newCssClass;\n        }\n      }\n      return meta;\n    };\n  }\n\n  updateSecondItem() {\n    this.scrollGridTop();\n    const updatedItem = this.aureliaGrid.gridService.getDataItemByRowNumber(1);\n    updatedItem.duration = Math.round(Math.random() * 100);\n    this.aureliaGrid.gridService.updateItem(updatedItem);\n\n    // OR by id\n    // this.aureliaGrid.gridService.updateItemById(updatedItem.id, updatedItem);\n\n    // OR multiple changes\n    /*\n    const updatedItem1 = this.aureliaGrid.gridService.getDataItemByRowNumber(1);\n    const updatedItem2 = this.aureliaGrid.gridService.getDataItemByRowNumber(2);\n    updatedItem1.duration = Math.round(Math.random() * 100);\n    updatedItem2.duration = Math.round(Math.random() * 100);\n    this.aureliaGrid.gridService.updateItems([updatedItem1, updatedItem2], { highlightRow: true });\n    */\n  }\n\n  scrollGridBottom() {\n    this.aureliaGrid.slickGrid.navigateBottom();\n  }\n\n  scrollGridTop() {\n    this.aureliaGrid.slickGrid.navigateTop();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example11_decorators","_init","customElement","__au2ViewDef","Example11","__publicField","aureliaGrid","Formatters","args","FieldType","Editors","itemCount","mockedDataset","i","randomYear","randomMonth","randomDay","randomPercent","insertPosition","newItem1","incrementIdByHowMany","dataset","highestId","item","newId","previousItemMetadata","newCssClass","rowNumber","meta","updatedItem","action","_a","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}