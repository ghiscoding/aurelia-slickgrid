import{C as W,F as m,a as g,c as j}from"./index-Bz3uuwsZ.js";import{A as I}from"./aggregators.index-6uBa5zAH.js";import{E as D}from"./editors.index-CmyHd4IA.js";import{G as y}from"./groupingFormatters.index-B6oGpPhz.js";import{E as L}from"./excelExport.service-BVEnwJlG.js";const R="example36",T=`<div id="demo-container" class="container-fluid">
  <h2>
    Example 36: Excel Export Formulas
    <span class="float-end">
      <a style="font-size: 18px"
         target="_blank"
         href="https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example36.ts">
        <span class="mdi mdi-link-variant"></span> code
      </a>
    </span>
    <button
      class="ms-2 btn btn-outline-secondary btn-sm btn-icon"
      type="button"
      data-test="toggle-subtitle"
      click.trigger="toggleSubTitle()"
    >
      <span class="mdi mdi-information-outline" title="Toggle example sub-title details"></span>
    </button>
  </h2>

  <div class="subtitle" >
    Grid with Excel Formulas (<a href="https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/export-to-excel#cell-value-parser" target="_blank">Wiki docs</a>).
    Calculate Totals via Formatters in the UI, but use Excel Formula when exporting via <code>excelExportOptions.valueParserCallback</code>
    When Grouped we will also calculate the Group Totals in the UI via Group Formatter and we again use Excel Formula to calculate the Group Totals (sum) dynamically.
    For Grouping we need to use <code>groupTotalsExcelExportOptions.valueParserCallback</code> instead.
  </div>

  <section class="row mb-2">
    <div class="mb-1">
      <button class="btn btn-outline-secondary btn-sm btn-icon" click.trigger="exportToExcel()" data-test="export-excel-btn">
        <span class="mdi mdi-file-excel-outline text-success"></span>
        <span>Export to Excel</span>
      </button>
      <span>
        <button class="btn btn-outline-secondary btn-sm btn-icon" click.trigger="groupByTaxable()" data-test="group-by-btn">
          <span>Group by Taxable</span>
        </button>
        <button class="btn btn-outline-secondary btn-sm btn-icon" click.trigger="clearGrouping()" data-test="clear-grouping-btn">
          <span>Clear grouping</span>
        </button>
      </span>
      <span class="ms-4 text-bold d-inline-flex align-items-center gap-4px">
        Tax Rate (%):
        <input type="number" value.bind="taxRate" class="narrow input" step="0.25" data-test="taxrate" />
        <button class="btn btn-outline-secondary btn-sm btn-icon" click.trigger="updateTaxRate()" data-test="update-btn">
          Update
        </button>
      </span>
    </div>
  </section>

  <aurelia-slickgrid grid-id="grid36"
    column-definitions.bind="columnDefinitions"
    grid-options.bind="gridOptions"
    dataset.bind="dataset"
    instances.bind="aureliaGrid"
    on-cell-change.trigger="invalidateAll()">
  </aurelia-slickgrid>
</div>
`,z=[],B={};let F;function Q(a){F||(F=W.define({name:R,template:T,dependencies:z,bindables:B})),a.register(F)}const U=Object.freeze(Object.defineProperty({__proto__:null,bindables:B,default:T,dependencies:z,name:R,register:Q,template:T},Symbol.toStringTag,{value:"Module"}));var Y=Object.create,G=Object.defineProperty,J=Object.getOwnPropertyDescriptor,K=(a,e)=>(e=Symbol[a])?e:Symbol.for("Symbol."+a),H=a=>{throw TypeError(a)},M=(a,e,t)=>e in a?G(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,X=(a,e)=>G(a,"name",{value:e,configurable:!0}),Z=a=>[,,,Y(null)],ee=["class","method","getter","setter","accessor","field","value","get","set"],N=a=>a!==void 0&&typeof a!="function"?H("Function expected"):a,te=(a,e,t,i,r)=>({kind:ee[a],name:e,metadata:i,addInitializer:l=>t._?H("Already initialized"):r.push(N(l||null))}),ae=(a,e)=>M(e,K("metadata"),a[3]),re=(a,e,t,i)=>{for(var r=0,l=a[e>>1],o=l&&l.length;r<o;r++)l[r].call(t);return i},le=(a,e,t,i,r,l)=>{var o,s,u,d=e&7,f=!1,p=0,b=a[p]||(a[p]=[]),x=d&&(r=r.prototype,d<5&&(d>3||!f)&&J(r,t));X(r,t);for(var n=i.length-1;n>=0;n--)u=te(d,t,s={},a[3],b),o=(0,i[n])(r,u),s._=1,N(o)&&(r=o);return ae(a,r),x&&G(r,t,x),f?d^4?l:x:r},c=(a,e,t)=>M(a,typeof e!="symbol"?e+"":e,t),V,w;function ie(a,e,t){const i=t.getOptions(),r=e.editor;return i.editable&&r}const oe=(a,e,t,i,r,l)=>{const o=ie(r,i,l);t=t??"";const s=document.createElement("div");return s.className="editing-field",t instanceof HTMLElement?s.appendChild(t):s.textContent=t,o?s:t};class v{constructor(e,t){this.field=e,this.taxRate=t,c(this,"_sum",0),c(this,"_type","sum")}get type(){return this._type}init(){this._sum=0}accumulate(e){if(this.field==="taxes"&&e.taxable&&(this._sum+=e.price*e.qty*(this.taxRate/100)),this.field==="subTotal"&&(this._sum+=e.price*e.qty),this.field==="total"){let t=0;e.taxable&&(t=e.price*e.qty*(this.taxRate/100)),this._sum+=e.price*e.qty+t}}storeResult(e){(!e||e[this._type]===void 0)&&(e[this._type]={}),e[this._type][this.field]=this._sum}}V=[j(U)];class k{constructor(){c(this,"columnDefinitions",[]),c(this,"gridOptions"),c(this,"dataset",[]),c(this,"aureliaGrid"),c(this,"excelExportService"),c(this,"hideSubTitle",!1),c(this,"isDataGrouped",!1),c(this,"taxRate",7.5),this.excelExportService=new L,this.defineGrid()}attached(){this.dataset=this.getData()}defineGrid(){this.columnDefinitions=[{id:"sel",name:"#",field:"id",headerCssClass:"header-centered",cssClass:"cell-unselectable",excludeFromExport:!0,maxWidth:30},{id:"name",name:"Name",field:"name",sortable:!0,width:140,filterable:!0,excelExportOptions:{width:18}},{id:"price",name:"Price",field:"price",type:g.number,editor:{model:D.float,decimal:2},sortable:!0,width:70,filterable:!0,formatter:m.dollar,groupTotalsFormatter:y.sumTotalsDollarBold,groupTotalsExcelExportOptions:{style:{font:{bold:!0,size:11.5},format:"$0.00",border:{top:{color:"FF747474",style:"thick"}}},valueParserCallback:this.excelGroupCellParser.bind(this)}},{id:"qty",name:"Quantity",field:"qty",type:g.number,groupTotalsFormatter:y.sumTotalsBold,groupTotalsExcelExportOptions:{style:{font:{bold:!0,size:11.5},border:{top:{color:"FF747474",style:"thick"}}},valueParserCallback:this.excelGroupCellParser.bind(this)},params:{minDecimal:0,maxDecimal:0},editor:{model:D.integer},sortable:!0,width:60,filterable:!0},{id:"subTotal",name:"Sub-Total",field:"subTotal",cssClass:"text-sub-total",type:g.number,sortable:!0,width:70,filterable:!0,exportWithFormatter:!1,formatter:m.multiple,groupTotalsFormatter:y.sumTotalsDollarBold,params:{formatters:[(e,t,i,r,l)=>l.price*l.qty,m.dollar]},excelExportOptions:{style:{font:{outline:!0,italic:!0,color:"FF215073"},format:"$0.00"},width:12,valueParserCallback:this.excelRegularCellParser.bind(this)},groupTotalsExcelExportOptions:{style:{font:{bold:!0,italic:!0,size:11.5},format:"$0.00",border:{top:{color:"FF747474",style:"thick"}}},valueParserCallback:this.excelGroupCellParser.bind(this)}},{id:"taxable",name:"Taxable",field:"taxable",cssClass:"text-center",sortable:!0,width:60,filterable:!0,formatter:m.checkmarkMaterial,exportCustomFormatter:(e,t,i)=>i?"âœ“":"",excelExportOptions:{style:{alignment:{horizontal:"center"}}}},{id:"taxes",name:"Taxes",field:"taxes",cssClass:"text-taxes",type:g.number,sortable:!0,width:70,filterable:!0,formatter:m.multiple,groupTotalsFormatter:y.sumTotalsDollarBold,params:{formatters:[(e,t,i,r,l)=>l.taxable?l.price*l.qty*(this.taxRate/100):null,m.dollar]},excelExportOptions:{style:{font:{outline:!0,italic:!0,color:"FFC65911"},format:"$0.00"},width:12,valueParserCallback:this.excelRegularCellParser.bind(this)},groupTotalsExcelExportOptions:{style:{font:{bold:!0,italic:!0,color:"FFC65911",size:11.5},format:"$0.00",border:{top:{color:"FF747474",style:"thick"}}},valueParserCallback:this.excelGroupCellParser.bind(this)}},{id:"total",name:"Total",field:"total",type:g.number,sortable:!0,width:70,filterable:!0,cssClass:"text-total",formatter:m.multiple,groupTotalsFormatter:y.sumTotalsDollarBold,params:{formatters:[(e,t,i,r,l)=>{let o=l.price*l.qty;return l.taxable&&(o+=o*(this.taxRate/100)),o},m.dollar]},excelExportOptions:{style:{font:{outline:!0,bold:!0,color:"FF005A9E"},format:"$0.00"},width:12,valueParserCallback:this.excelRegularCellParser.bind(this)},groupTotalsExcelExportOptions:{style:{font:{bold:!0,color:"FF005A9E",size:12},format:"$0.00",border:{top:{color:"FF747474",style:"thick"}}},valueParserCallback:this.excelGroupCellParser.bind(this)}}],this.gridOptions={autoAddCustomEditorFormatter:oe,gridHeight:410,gridWidth:750,enableCellNavigation:!0,autoEdit:!0,autoCommitEdit:!0,editable:!0,rowHeight:33,formatterOptions:{maxDecimal:2,minDecimal:2},enableGrouping:!0,externalResources:[this.excelExportService],enableExcelExport:!0,excelExportOptions:{filename:"grocery-list",sanitizeDataExport:!0,sheetName:"Grocery List",columnHeaderStyle:{font:{color:"FFFFFFFF"},fill:{type:"pattern",patternType:"solid",fgColor:"FF4a6c91"}},customExcelHeader:(e,t)=>{const i=e.getStyleSheet().createFormat({font:{size:18,fontName:"Calibri",bold:!0,color:"FFFFFFFF"},alignment:{wrapText:!0,horizontal:"center"},fill:{type:"pattern",patternType:"solid",fgColor:"FF203764"}});t.setRowInstructions(0,{height:40});const r="Grocery Shopping List",l=this.isDataGrouped?"H1":"G1";t.mergeCells("A1",l),t.data.push([{value:r,metadata:{style:i.id}}])}}}}invalidateAll(){var e,t;(e=this.aureliaGrid.dataView)==null||e.refresh(),(t=this.aureliaGrid.slickGrid)==null||t.invalidate()}updateTaxRate(){this.isDataGrouped&&this.groupByTaxable(),this.invalidateAll()}exportToExcel(){this.excelExportService.exportToExcel()}excelGroupCellParser(e,{columnDef:t,excelFormatId:i,dataRowIdx:r}){var S,O,$,P,A,q;const s=((S=this.aureliaGrid.slickGrid)==null?void 0:S.getColumnIndex("price"))||0,u=((O=this.aureliaGrid.slickGrid)==null?void 0:O.getColumnIndex("qty"))||0,d=(($=this.aureliaGrid.slickGrid)==null?void 0:$.getColumnIndex("taxes"))||0,f=((P=this.aureliaGrid.slickGrid)==null?void 0:P.getColumnIndex("subTotal"))||0,p=((A=this.aureliaGrid.slickGrid)==null?void 0:A.getColumnIndex("total"))||0,b=((q=e==null?void 0:e.group)==null?void 0:q.count)||0,x=`${String.fromCharCode(65+s-0)}`,n=`${String.fromCharCode(65+u-0)}`,C=`${String.fromCharCode(65+f-0)}`,_=`${String.fromCharCode(65+d-0)}`,E=`${String.fromCharCode(65+p-0)}`;let h="";switch(t.id){case"price":h=x;break;case"qty":h=n;break;case"subTotal":h=C;break;case"taxes":h=_;break;case"total":h=E;break}return{value:`SUM(${h}${r+3-b}:${h}${r+3-1})`,metadata:{type:"formula",style:i}}}excelRegularCellParser(e,{columnDef:t,excelFormatId:i,dataRowIdx:r,dataContext:l}){var C,_,E;const o=this.isDataGrouped?0:1,s=3,u=((C=this.aureliaGrid.slickGrid)==null?void 0:C.getColumnIndex("price"))||0,d=((_=this.aureliaGrid.slickGrid)==null?void 0:_.getColumnIndex("qty"))||0,f=((E=this.aureliaGrid.slickGrid)==null?void 0:E.getColumnIndex("taxes"))||0,p=`${String.fromCharCode(65+u-o)}${r+s}`,b=`${String.fromCharCode(65+d-o)}${r+s}`,x=`${String.fromCharCode(65+f-o)}${r+s}`;let n="";switch(t.id){case"subTotal":n=`${p}*${b}`;break;case"taxes":n=l.taxable?`${p}*${b}*${this.taxRate/100}`:"";break;case"total":n=`(${p}*${b})+${x}`;break}return{value:n,metadata:{type:"formula",style:i}}}getData(){let e=1;return[{id:e++,name:"Oranges",qty:4,taxable:!1,price:2.22},{id:e++,name:"Apples",qty:3,taxable:!1,price:1.55},{id:e++,name:"Honeycomb Cereals",qty:2,taxable:!0,price:4.55},{id:e++,name:"Raisins",qty:77,taxable:!1,price:.23},{id:e++,name:"Corn Flake Cereals",qty:1,taxable:!0,price:6.62},{id:e++,name:"Tomatoes",qty:3,taxable:!1,price:1.88},{id:e++,name:"Butter",qty:1,taxable:!1,price:3.33},{id:e++,name:"BBQ Chicken",qty:1,taxable:!1,price:12.33},{id:e++,name:"Chicken Wings",qty:12,taxable:!0,price:.53},{id:e++,name:"Drinkable Yogurt",qty:6,taxable:!0,price:1.22},{id:e++,name:"Milk",qty:3,taxable:!0,price:3.11}]}clearGrouping(){var e,t;this.isDataGrouped=!1,(t=(e=this.aureliaGrid)==null?void 0:e.dataView)==null||t.setGrouping([])}groupByTaxable(){var i,r,l,o;const e="mdi-check-box-outline",t="mdi-checkbox-blank-outline";this.isDataGrouped=!0,(r=(i=this.aureliaGrid)==null?void 0:i.dataView)==null||r.setGrouping({getter:"taxable",formatter:s=>`Taxable: <span class="mdi ${s.value?e:t} text-info"></span> <span class="text-primary">(${s.count} items)</span>`,comparer:(s,u)=>u.value-s.value,aggregators:[new I.Sum("price"),new I.Sum("qty"),new v("subTotal",this.taxRate),new v("taxes",this.taxRate),new v("total",this.taxRate)],aggregateCollapsed:!1,lazyTotalsCalculation:!1}),(o=(l=this.aureliaGrid)==null?void 0:l.dataView)==null||o.refresh()}toggleSubTitle(){var t;this.hideSubTitle=!this.hideSubTitle;const e=this.hideSubTitle?"add":"remove";(t=document.querySelector(".subtitle"))==null||t.classList[e]("hidden"),this.aureliaGrid.resizerService.resizeGrid(0)}}w=Z();k=le(w,0,"Example36",V,k);re(w,1,k);export{k as Example36};
//# sourceMappingURL=example36-IfZ14n5x.js.map
