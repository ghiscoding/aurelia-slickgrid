{"version":3,"file":"example22-Dx691lyQ.js","sources":["../../src/examples/slickgrid/example22.$au.ts","../../src/examples/slickgrid/example22.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example22.scss\";\nexport const name = \"example22\";\nexport const template = \"<h2>\\n  Example 22: Grids in Bootstrap Tabs\\n  <span class=\\\"float-end\\\">\\n    <a style=\\\"font-size: 18px\\\"\\n        target=\\\"_blank\\\"\\n        href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example22.ts\\\">\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"hideSubTitle = !hideSubTitle\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" hidden.bind=\\\"hideSubTitle\\\">\\n  This example demonstrate the creation of multiple grids in Bootstrap Tabs\\n   <ol>\\n    <li>Regular mocked data with javascript</li>\\n    <li>Load dataset through Fetch-Client. Also note we need to call a \\\"resizeGrid()\\\" after focusing on this tab</li>\\n  </ol>\\n</div>\\n\\n<div>\\n  <nav>\\n    <div class=\\\"nav nav-tabs\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\n      <button\\n          class=\\\"nav-link active\\\"\\n          id=\\\"javascript-tab\\\"\\n          data-bs-toggle=\\\"tab\\\"\\n          data-bs-target=\\\"#javascript\\\"\\n          type=\\\"button\\\"\\n          role=\\\"tab\\\"\\n          aria-controls=\\\"javascript\\\"\\n          aria-selected=\\\"true\\\">\\n        JavaScript\\n      </button>\\n      <button\\n          class=\\\"nav-link\\\"\\n          id=\\\"fetch-tab\\\"\\n          data-bs-toggle=\\\"tab\\\"\\n          data-bs-target=\\\"#fetch\\\"\\n          type=\\\"button\\\"\\n          role=\\\"tab\\\"\\n          aria-controls=\\\"fetch\\\"\\n          aria-selected=\\\"false\\\"\\n          click.trigger=\\\"resizeGrid2()\\\">\\n        Fetch-Client\\n      </button>\\n    </div>\\n  </nav>\\n  <div class=\\\"tab-content\\\" id=\\\"nav-tabContent\\\">\\n    <div class=\\\"tab-pane fade show active\\\" id=\\\"javascript\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"javascript-tab\\\" tabindex=\\\"0\\\">\\n      <h4>Grid 1 - Load Local Data</h4>\\n      <aurelia-slickgrid grid-id=\\\"grid1\\\"\\n                          column-definitions.bind=\\\"columnDefinitions1\\\"\\n                          grid-options.bind=\\\"gridOptions1\\\"\\n                          dataset.bind=\\\"dataset1\\\">\\n      </aurelia-slickgrid>\\n    </div>\\n    <div class=\\\"tab-pane fade\\\" id=\\\"fetch\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"fetch-tab\\\" tabindex=\\\"0\\\">\\n      <h4>Grid 2 - Load a JSON dataset through Fetch-Client</h4>\\n      <aurelia-slickgrid grid-id=\\\"grid2\\\"\\n                          column-definitions.bind=\\\"columnDefinitions2\\\"\\n                          grid-options.bind=\\\"gridOptions2\\\"\\n                          dataset.bind=\\\"dataset2\\\"\\n                          on-aurelia-grid-created.trigger=\\\"aureliaGrid2Ready($event.detail)\\\">\\n      </aurelia-slickgrid>\\n    </div>\\n  </div>\\n</div>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { IHttpClient } from '@aurelia/fetch-client';\nimport { newInstanceOf, resolve } from '@aurelia/kernel';\n\nimport { type AureliaGridInstance, type Column, Filters, type GridOption } from 'aurelia-slickgrid';\nimport './example22.scss';\n\nimport CUSTOMERS_URL from './data/customers_100.json?url';\n\nexport class Example22 {\n  aureliaGrid2!: AureliaGridInstance;\n  gridOptions1!: GridOption;\n  gridOptions2!: GridOption;\n  columnDefinitions1: Column[] = [];\n  columnDefinitions2: Column[] = [];\n  dataset1: any[] = [];\n  dataset2: any[] = [];\n  hideSubTitle = false;\n\n  constructor(readonly http: IHttpClient = resolve(newInstanceOf(IHttpClient))) {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid1();\n    this.defineGrid2();\n  }\n\n  aureliaGrid2Ready(aureliaGrid: AureliaGridInstance) {\n    this.aureliaGrid2 = aureliaGrid;\n  }\n\n  async attached() {\n    // mock some data with JavaScript\n    this.dataset1 = this.mockData();\n\n    // load data with Fetch-Client\n    const response2 = await fetch(CUSTOMERS_URL);\n    this.dataset2 = await response2['json']();\n  }\n\n  // Grid2 definition\n  defineGrid1() {\n    this.columnDefinitions1 = [\n      { id: 'title', name: 'Title', field: 'title', sortable: true, minWidth: 100 },\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, minWidth: 100 },\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true, minWidth: 100 },\n      { id: 'start', name: 'Start', field: 'start', minWidth: 100 },\n      { id: 'finish', name: 'Finish', field: 'finish', minWidth: 100 },\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', sortable: true, minWidth: 100 }\n    ];\n    this.gridOptions1 = {\n      enableAutoResize: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableSorting: true\n    };\n\n  }\n\n  // Grid2 definition\n  defineGrid2() {\n    this.columnDefinitions2 = [\n      { id: 'name', name: 'Name', field: 'name', filterable: true, sortable: true, },\n      {\n        id: 'gender', name: 'Gender', field: 'gender', filterable: true, sortable: true,\n        filter: {\n          model: Filters.singleSelect,\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male' }, { value: 'female', label: 'female' }]\n        }\n      },\n      { id: 'company', name: 'Company', field: 'company', filterable: true, sortable: true }\n    ];\n\n    this.gridOptions2 = {\n      enableAutoResize: true,\n      autoResize: {\n        container: '#demo-container',\n        rightPadding: 10\n      },\n      enableFiltering: true,\n      enableSorting: true\n    };\n\n  }\n\n  mockData() {\n    // mock a dataset\n    const mockDataset: any[] = [];\n    for (let i = 0; i < 1000; i++) {\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\n      const randomMonth = Math.floor(Math.random() * 11);\n      const randomDay = Math.floor((Math.random() * 29));\n      const randomPercent = Math.round(Math.random() * 100);\n\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 100) + '',\n        percentComplete: randomPercent,\n        start: `${randomMonth}/${randomDay}/${randomYear}`,\n        finish: `${randomMonth}/${randomDay}/${randomYear}`,\n        effortDriven: (i % 5 === 0)\n      };\n    }\n\n    return mockDataset;\n  }\n\n  /**\n   * When changing Tab, we need to resize the grid in the new Tab that becomes in focus.\n   * We need to do this (only once) because SlickGrid relies on the grid being visible in the DOM for it to be sized properly\n   * and if it's not (like our use case) we need to resize the grid ourselve and we just need to do that once.\n   */\n  resizeGrid2() {\n    this.aureliaGrid2.resizerService.resizeGrid(10);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example22_decorators","_init","customElement","__au2ViewDef","Example22","http","resolve","newInstanceOf","IHttpClient","__publicField","aureliaGrid","response2","CUSTOMERS_URL","Filters","mockDataset","randomYear","randomMonth","randomDay","randomPercent","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}