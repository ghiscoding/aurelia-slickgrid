{"version":3,"file":"example43-BPuzPb3x.js","sources":["../../src/examples/slickgrid/example43.$au.ts","../../src/examples/slickgrid/example43.ts"],"sourcesContent":["import { CustomElement } from '@aurelia/runtime-html';\nimport \"./example43.scss\";\nexport const name = \"example43\";\nexport const template = \"<h2>\\n  Example 43: colspan/rowspan - Employees Timesheets\\n  <span class=\\\"float-end\\\">\\n    <a\\n      style=\\\"font-size: 18px\\\"\\n      target=\\\"_blank\\\"\\n      href=\\\"https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example43.ts\\\"\\n    >\\n      <span class=\\\"mdi mdi-link-variant\\\"></span> code\\n    </a>\\n  </span>\\n  <button\\n      class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon\\\"\\n      type=\\\"button\\\"\\n      data-test=\\\"toggle-subtitle\\\"\\n      click.trigger=\\\"toggleSubTitle()\\\"\\n    >\\n      <span class=\\\"mdi mdi-information-outline\\\" title=\\\"Toggle example sub-title details\\\"></span>\\n    </button>\\n</h2>\\n\\n<div class=\\\"subtitle\\\" >\\n  <p class=\\\"italic example-details\\\">\\n    <b>NOTES</b>: <code>rowspan</code> is an opt-in feature, because of its small perf hit (it needs to loop through all row\\n    metadatas to map all rowspan), and requires the <code>enableCellRowSpan</code> grid option to be enabled to work properly.\\n    The <code>colspan</code>/<code>rowspan</code> are both using DataView item metadata and are both based on row indexes and\\n    will <b>not</b> keep the row in sync with the data. It is really up to you the user to update the metadata logic of how and\\n    where the cells should span when a side effect kicks in. (i.e: Filtering/Sorting/Paging/Column Reorder... will\\n    <b>not</b> change/update the spanning in the grid by itself and that is why they these features are all disabled in this\\n    example). Also, column/row freezing (pinning) are also not supported, or at least not recommended unless you know exactly\\n    what you're doing (like in this demo here because we know our pinning doesn't intersect)! Any freezing column/row that could\\n    intersect with a <code>colspan</code>/<code>rowspan</code> <b>will cause problems</b>.\\n  </p>\\n</div>\\n\\n<button\\n  class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon\\\"\\n  data-test=\\\"goto-up\\\"\\n  click.trigger=\\\"navigateUp()\\\"\\n  title=\\\"from an active cell, navigate to cell above\\\"\\n>\\n  <span class=\\\"mdi mdi-chevron-down mdi-rotate-180\\\"></span>\\n  Navigate Up Cell\\n</button>\\n<button\\n  class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon\\\"\\n  data-test=\\\"goto-down\\\"\\n  click.trigger=\\\"navigateDown()\\\"\\n  title=\\\"from an active cell, navigate to cell below\\\"\\n>\\n  <span class=\\\"mdi mdi-chevron-down\\\"></span>\\n  Navigate Down Cell\\n</button>\\n<button\\n  class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon\\\"\\n  data-test=\\\"goto-prev\\\"\\n  click.trigger=\\\"navigatePrev()\\\"\\n  title=\\\"from an active cell, navigate to previous left cell\\\"\\n>\\n  <span class=\\\"mdi mdi-chevron-down mdi-rotate-90\\\"></span>\\n  Navigate to Left Cell\\n</button>\\n<button\\n  class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon\\\"\\n  data-test=\\\"goto-next\\\"\\n  click.trigger=\\\"navigateNext()\\\"\\n  title=\\\"from an active cell, navigate to next right cell\\\"\\n>\\n  <span class=\\\"mdi mdi-chevron-down mdi-rotate-270\\\"></span>\\n  Navigate to Right Cell\\n</button>\\n<button class=\\\"ms-2 btn btn-outline-secondary btn-sm btn-icon mx-1\\\" data-test=\\\"toggle-employee-id\\\" click.trigger=\\\"toggleEmployeeIdVisibility()\\\">\\n  Show/Hide EmployeeID\\n</button>\\n<button class=\\\"ms-1 btn btn-outline-secondary btn-sm btn-icon mx-1\\\" click.trigger=\\\"toggleEditing()\\\" data-test=\\\"toggle-editing\\\">\\n  <span class=\\\"mdi mdi-pencil-outline\\\"></span>\\n  <span\\n    >Toggle Editing: <span id=\\\"isEditable\\\" class=\\\"text-italic\\\">${ isEditable }</span></span\\n  >\\n</button>\\n<button class=\\\"btn btn-outline-secondary btn-sm btn-icon mx-1\\\" data-test=\\\"export-excel-btn\\\" click.trigger=\\\"exportToExcel()\\\">\\n  <i class=\\\"mdi mdi-file-excel-outline text-success\\\"></i> Export to Excel\\n</button>\\n\\n<aurelia-slickgrid\\n  grid-id=\\\"grid43\\\"\\n  column-definitions.bind=\\\"columnDefinitions\\\"\\n  grid-options.bind=\\\"gridOptions\\\"\\n  dataset.bind=\\\"dataset\\\"\\n  instances.bind=\\\"aureliaGrid\\\">\\n</aurelia-slickgrid>\\n\";\nexport default template;\nexport const dependencies = [  ];\nexport const bindables = {};\nlet _e;\nexport function register(container) {\n  if (!_e) {\n    _e = CustomElement.define({ name, template, dependencies, bindables });\n  }\n  container.register(_e);\n}\n","import { ExcelExportService } from '@slickgrid-universal/excel-export';\nimport {\n  type AureliaGridInstance,\n  type Column,\n  Editors,\n  type GridOption,\n  type ItemMetadata,\n} from 'aurelia-slickgrid';\n\nimport './example43.scss';\n\nexport class Example43 {\n  aureliaGrid!: AureliaGridInstance;\n  gridOptions!: GridOption;\n  columnDefinitions: Column[] = [];\n  dataset: any[] = [];\n  isEditable = false;\n  hideSubTitle = false;\n  showEmployeeId = true;\n  excelExportService = new ExcelExportService();\n  metadata: ItemMetadata | Record<number, ItemMetadata> = {\n    // 10001: Davolio\n    0: {\n      columns: {\n        1: { rowspan: 2 },\n        2: { colspan: 2 },\n        6: { colspan: 3 },\n        10: { colspan: 3, rowspan: 10 },\n        13: { colspan: 2 },\n        17: { colspan: 2, rowspan: 2 },\n      },\n    },\n    // 10002: (Buchanan... name not shown since Davolio has rowspan=2)\n    1: {\n      columns: {\n        3: { colspan: 3 },\n        6: { colspan: 4 },\n        13: { colspan: 2, rowspan: 5 },\n        15: { colspan: 2 },\n      },\n    },\n    // 10003: Fuller\n    2: {\n      columns: {\n        2: { colspan: 3, rowspan: 2 },\n        5: { colspan: 2 },\n        7: { colspan: 3 },\n        15: { colspan: 2 },\n        17: { colspan: 2 },\n      },\n    },\n    // 10004: Leverling\n    3: {\n      columns: {\n        6: { colspan: 4 },\n        16: { colspan: 2 },\n      },\n    },\n    // 10005: Peacock\n    4: {\n      columns: {\n        2: { colspan: 4 },\n        7: { colspan: 3 },\n        15: { colspan: 2, rowspan: 2 },\n        17: { colspan: 2 },\n      },\n    },\n    // 10006: Janet\n    5: {\n      columns: {\n        2: { colspan: 2 },\n        4: { colspan: 3 },\n        7: { colspan: 3 },\n        17: { colspan: 2 },\n      },\n    },\n    // 10007: Suyama\n    6: {\n      columns: {\n        2: { colspan: 2 },\n        5: { colspan: 2 },\n        7: { colspan: 3 },\n        14: { colspan: 2 },\n        16: { colspan: 3 },\n      },\n    },\n    // 10008: Robert\n    7: {\n      columns: {\n        2: { colspan: 3 },\n        5: { colspan: 3 },\n        13: { colspan: 3, rowspan: 2 },\n        16: { colspan: 2 },\n      },\n    },\n    // 10009: Andrew\n    8: {\n      columns: {\n        2: { colspan: 3 },\n        7: { colspan: 3, rowspan: 2 },\n        17: { colspan: 2 },\n      },\n    },\n    // 10010: Michael\n    9: {\n      columns: {\n        2: { colspan: 3 },\n        5: { colspan: 2 },\n        13: { colspan: 3 },\n        16: { colspan: 3 },\n      },\n    },\n  };\n\n  constructor() {\n    // define the grid options & columns and then create the grid itself\n    this.defineGrid();\n  }\n\n  attached() {\n    // mock a dataset\n    this.dataset = this.loadData();\n  }\n\n  /* Define grid Options and Columns */\n  defineGrid() {\n    // the columns field property is type-safe, try to add a different string not representing one of DataItems properties\n    this.columnDefinitions = [\n      { id: 'employeeID', name: 'Employee ID', field: 'employeeID', minWidth: 100 },\n      { id: 'employeeName', name: 'Employee Name', field: 'employeeName', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '9:00', name: '9:00 AM', field: '9:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '9:30', name: '9:30 AM', field: '9:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '10:00', name: '10:00 AM', field: '10:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '10:30', name: '10:30 AM', field: '10:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '11:00', name: '11:00 AM', field: '11:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '11:30', name: '11:30 AM', field: '11:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '12:00', name: '12:00 PM', field: '12:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '12:30', name: '12:30 PM', field: '12:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '1:00', name: '1:00 PM', field: '1:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '1:30', name: '1:30 PM', field: '1:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '2:00', name: '2:00 PM', field: '2:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '2:30', name: '2:30 PM', field: '2:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '3:00', name: '3:00 PM', field: '3:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '3:30', name: '3:30 PM', field: '3:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '4:00', name: '4:00 PM', field: '4:00', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '4:30', name: '4:30 PM', field: '4:30', editor: { model: Editors.text }, minWidth: 120 },\n      { id: '5:00', name: '5:00 PM', field: '5:00', editor: { model: Editors.text }, minWidth: 120 },\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        bottomPadding: 30,\n        rightPadding: 50,\n      },\n      enableCellNavigation: true,\n      enableColumnReorder: true,\n      enableCellRowSpan: true,\n      enableHeaderMenu: false,\n      enableExcelExport: true,\n      externalResources: [this.excelExportService],\n      enableExcelCopyBuffer: true,\n      autoEdit: true,\n      editable: false,\n      datasetIdPropertyName: 'employeeID',\n      frozenColumn: 0,\n      gridHeight: 348,\n      rowHeight: 30,\n      dataView: {\n        globalItemMetadataProvider: {\n          getRowMetadata: (_item, row) => {\n            return (this.metadata as Record<number, ItemMetadata>)[row];\n          },\n        },\n      },\n      rowTopOffsetRenderType: 'top', // rowspan doesn't render well with 'transform', default is 'top'\n    };\n  }\n\n  exportToExcel() {\n    this.excelExportService.exportToExcel({ filename: 'export', format: 'xlsx' });\n  }\n\n  navigateDown() {\n    this.aureliaGrid?.slickGrid?.navigateDown();\n  }\n\n  navigateUp() {\n    this.aureliaGrid?.slickGrid?.navigateUp();\n  }\n\n  navigateNext() {\n    this.aureliaGrid?.slickGrid?.navigateNext();\n  }\n\n  navigatePrev() {\n    this.aureliaGrid?.slickGrid?.navigatePrev();\n  }\n\n  toggleEditing() {\n    this.isEditable = !this.isEditable;\n    this.aureliaGrid.slickGrid.setOptions({ editable: this.isEditable });\n  }\n\n  loadData() {\n    return [\n      {\n        employeeID: 10001,\n        employeeName: 'Davolio',\n        '9:00': 'Analysis Tasks',\n        '9:30': 'Analysis Tasks',\n        '10:00': 'Team Meeting',\n        '10:30': 'Testing',\n        '11:00': 'Development',\n        '11:30': 'Development',\n        '12:00': 'Development',\n        '12:30': 'Support',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Testing',\n        '3:00': 'Testing',\n        '3:30': 'Development',\n        '4:00': 'Conference',\n        '4:30': 'Team Meeting',\n        '5:00': 'Team Meeting',\n      },\n      {\n        employeeID: 10002,\n        employeeName: 'Buchanan',\n        '9:00': 'Task Assign',\n        '9:30': 'Support',\n        '10:00': 'Support',\n        '10:30': 'Support',\n        '11:00': 'Testing',\n        '11:30': 'Testing',\n        '12:00': 'Testing',\n        '12:30': 'Testing',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Development',\n        '3:00': 'Development',\n        '3:30': 'Check Mail',\n        '4:00': 'Check Mail',\n        '4:30': 'Team Meeting',\n        '5:00': 'Team Meeting',\n      },\n      {\n        employeeID: 10003,\n        employeeName: 'Fuller',\n        '9:00': 'Check Mail',\n        '9:30': 'Check Mail',\n        '10:00': 'Check Mail',\n        '10:30': 'Analysis Tasks',\n        '11:00': 'Analysis Tasks',\n        '11:30': 'Support',\n        '12:00': 'Support',\n        '12:30': 'Support',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Development',\n        '3:00': 'Development',\n        '3:30': 'Team Meeting',\n        '4:00': 'Team Meeting',\n        '4:30': 'Development',\n        '5:00': 'Development',\n      },\n      {\n        employeeID: 10004,\n        employeeName: 'Leverling',\n        '9:00': 'Testing',\n        '9:30': 'Check Mail',\n        '10:00': 'Check Mail',\n        '10:30': 'Support',\n        '11:00': 'Testing',\n        '11:30': 'Testing',\n        '12:00': 'Testing',\n        '12:30': 'Testing',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Development',\n        '3:00': 'Development',\n        '3:30': 'Check Mail',\n        '4:00': 'Conference',\n        '4:30': 'Conference',\n        '5:00': 'Team Meeting',\n      },\n      {\n        employeeID: 10005,\n        employeeName: 'Peacock',\n        '9:00': 'Task Assign',\n        '9:30': 'Task Assign',\n        '10:00': 'Task Assign',\n        '10:30': 'Task Assign',\n        '11:00': 'Check Mail',\n        '11:30': 'Support',\n        '12:00': 'Support',\n        '12:30': 'Support',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Development',\n        '3:00': 'Development',\n        '3:30': 'Team Meeting',\n        '4:00': 'Team Meeting',\n        '4:30': 'Testing',\n        '5:00': 'Testing',\n      },\n      {\n        employeeID: 10006,\n        employeeName: 'Janet',\n        '9:00': 'Testing',\n        '9:30': 'Testing',\n        '10:00': 'Support',\n        '10:30': 'Support',\n        '11:00': 'Support',\n        '11:30': 'Team Meeting',\n        '12:00': 'Team Meeting',\n        '12:30': 'Team Meeting',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Development',\n        '3:00': 'Development',\n        '3:30': 'Team Meeting',\n        '4:00': 'Team Meeting',\n        '4:30': 'Development',\n        '5:00': 'Development',\n      },\n      {\n        employeeID: 10007,\n        employeeName: 'Suyama',\n        '9:00': 'Analysis Tasks',\n        '9:30': 'Analysis Tasks',\n        '10:00': 'Testing',\n        '10:30': 'Development',\n        '11:00': 'Development',\n        '11:30': 'Testing',\n        '12:00': 'Testing',\n        '12:30': 'Testing',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Support',\n        '3:00': 'Build',\n        '3:30': 'Build',\n        '4:00': 'Check Mail',\n        '4:30': 'Check Mail',\n        '5:00': 'Check Mail',\n      },\n      {\n        employeeID: 10008,\n        employeeName: 'Robert',\n        '9:00': 'Task Assign',\n        '9:30': 'Task Assign',\n        '10:00': 'Task Assign',\n        '10:30': 'Development',\n        '11:00': 'Development',\n        '11:30': 'Development',\n        '12:00': 'Testing',\n        '12:30': 'Support',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Check Mail',\n        '3:00': 'Check Mail',\n        '3:30': 'Check Mail',\n        '4:00': 'Team Meeting',\n        '4:30': 'Team Meeting',\n        '5:00': 'Build',\n      },\n      {\n        employeeID: 10009,\n        employeeName: 'Andrew',\n        '9:00': 'Check Mail',\n        '9:30': 'Team Meeting',\n        '10:00': 'Team Meeting',\n        '10:30': 'Support',\n        '11:00': 'Testing',\n        '11:30': 'Development',\n        '12:00': 'Development',\n        '12:30': 'Development',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Check Mail',\n        '3:00': 'Check Mail',\n        '3:30': 'Check Mail',\n        '4:00': 'Team Meeting',\n        '4:30': 'Development',\n        '5:00': 'Development',\n      },\n      {\n        employeeID: 10010,\n        employeeName: 'Michael',\n        '9:00': 'Task Assign',\n        '9:30': 'Task Assign',\n        '10:00': 'Task Assign',\n        '10:30': 'Analysis Tasks',\n        '11:00': 'Analysis Tasks',\n        '11:30': 'Development',\n        '12:00': 'Development',\n        '12:30': 'Development',\n        '1:00': 'Lunch Break',\n        '1:30': 'Lunch Break',\n        '2:00': 'Lunch Break',\n        '2:30': 'Testing',\n        '3:00': 'Testing',\n        '3:30': 'Testing',\n        '4:00': 'Build',\n        '4:30': 'Build',\n        '5:00': 'Build',\n      },\n    ];\n  }\n\n\n  // when a side effect happens (e.g. show/hide EmployeeID),\n  // you have to recalculate the metadata by yourself\n  // if column index(es) aren't changing then \"invalidateRows()\" or \"invalidate()\" might be sufficient\n  // however, when column index(es) changed then you will have to call \"remapAllColumnsRowSpan()\" to clear & reevaluate the rowspan cache\n  toggleEmployeeIdVisibility() {\n    const newMetadata: any = {};\n    this.showEmployeeId = !this.showEmployeeId;\n\n    // direction to calculate new column indexes (-1 or +1 on the column index)\n    // e.g. metadata = `{0:{columns:{1:{rowspan: 2}}}}` if we hide then new result is `{0:{columns:{0:{rowspan: 2}}}}`\n    const dir = this.showEmployeeId ? 1 : -1;\n    for (const row of Object.keys(this.metadata)) {\n      newMetadata[row] = { columns: {} };\n      for (const col of Object.keys((this.metadata as any)[row].columns)) {\n        newMetadata[row].columns[Number(col) + dir] = (this.metadata as any)[row].columns[col];\n      }\n    }\n\n    // update column definitions\n    if (this.showEmployeeId) {\n      this.columnDefinitions.unshift({ id: 'employeeID', name: 'Employee ID', field: 'employeeID', width: 100 });\n    } else {\n      this.columnDefinitions.splice(0, 1);\n    }\n    this.aureliaGrid.slickGrid.setColumns(this.columnDefinitions);\n\n    // update & remap rowspans\n    this.metadata = newMetadata;\n    this.aureliaGrid.slickGrid.remapAllColumnsRowSpan();\n    this.aureliaGrid.slickGrid.invalidate();\n  }\n\n  toggleSubTitle() {\n    this.hideSubTitle = !this.hideSubTitle;\n    const action = this.hideSubTitle ? 'add' : 'remove';\n    document.querySelector('.subtitle')?.classList[action]('hidden');\n    this.aureliaGrid.resizerService.resizeGrid(0);\n  }\n}\n"],"names":["name","template","dependencies","bindables","_e","register","container","CustomElement","_Example43_decorators","_init","customElement","__au2ViewDef","Example43","__publicField","ExcelExportService","Editors","_item","row","_b","_a","newMetadata","dir","col","action","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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"}